// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NN.proto

package packet.nn;

public final class NN {
  private NN() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface NNGameOperStartSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional sint32 bankerPos = 1;
    /**
     * <code>optional sint32 bankerPos = 1;</code>
     *
     * <pre>
     *庄家位置,bankerPos&lt;0: 未定庄家
     * </pre>
     */
    boolean hasBankerPos();
    /**
     * <code>optional sint32 bankerPos = 1;</code>
     *
     * <pre>
     *庄家位置,bankerPos&lt;0: 未定庄家
     * </pre>
     */
    int getBankerPos();

    // repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;
    /**
     * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    java.util.List<packet.nn.NN.NNGameOperHandCardSyn> 
        getPlayerHandCardsList();
    /**
     * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    packet.nn.NN.NNGameOperHandCardSyn getPlayerHandCards(int index);
    /**
     * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    int getPlayerHandCardsCount();
    /**
     * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    java.util.List<? extends packet.nn.NN.NNGameOperHandCardSynOrBuilder> 
        getPlayerHandCardsOrBuilderList();
    /**
     * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    packet.nn.NN.NNGameOperHandCardSynOrBuilder getPlayerHandCardsOrBuilder(
        int index);

    // optional bool reconnect = 3;
    /**
     * <code>optional bool reconnect = 3;</code>
     *
     * <pre>
     *是否是断线重连 true是断线重连
     * </pre>
     */
    boolean hasReconnect();
    /**
     * <code>optional bool reconnect = 3;</code>
     *
     * <pre>
     *是否是断线重连 true是断线重连
     * </pre>
     */
    boolean getReconnect();

    // optional sint32 juNum = 4;
    /**
     * <code>optional sint32 juNum = 4;</code>
     *
     * <pre>
     *第几把
     * </pre>
     */
    boolean hasJuNum();
    /**
     * <code>optional sint32 juNum = 4;</code>
     *
     * <pre>
     *第几把
     * </pre>
     */
    int getJuNum();

    // optional sint32 qiangZhuangNum = 5;
    /**
     * <code>optional sint32 qiangZhuangNum = 5;</code>
     *
     * <pre>
     *抢庄倍数,qiangZhuangNum&lt;=0,无抢庄倍数
     * </pre>
     */
    boolean hasQiangZhuangNum();
    /**
     * <code>optional sint32 qiangZhuangNum = 5;</code>
     *
     * <pre>
     *抢庄倍数,qiangZhuangNum&lt;=0,无抢庄倍数
     * </pre>
     */
    int getQiangZhuangNum();

    // optional sint32 seq = 100;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
     * </pre>
     */
    boolean hasSeq();
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
     * </pre>
     */
    int getSeq();
  }
  /**
   * Protobuf type {@code packet.nn.NNGameOperStartSyn}
   *
   * <pre>
   *游戏开始 operType=GAMESTART
   * </pre>
   */
  public static final class NNGameOperStartSyn extends
      com.google.protobuf.GeneratedMessage
      implements NNGameOperStartSynOrBuilder {
    // Use NNGameOperStartSyn.newBuilder() to construct.
    private NNGameOperStartSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NNGameOperStartSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NNGameOperStartSyn defaultInstance;
    public static NNGameOperStartSyn getDefaultInstance() {
      return defaultInstance;
    }

    public NNGameOperStartSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NNGameOperStartSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPos_ = input.readSInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                playerHandCards_ = new java.util.ArrayList<packet.nn.NN.NNGameOperHandCardSyn>();
                mutable_bitField0_ |= 0x00000002;
              }
              playerHandCards_.add(input.readMessage(packet.nn.NN.NNGameOperHandCardSyn.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              reconnect_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              juNum_ = input.readSInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              qiangZhuangNum_ = input.readSInt32();
              break;
            }
            case 800: {
              bitField0_ |= 0x00000010;
              seq_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          playerHandCards_ = java.util.Collections.unmodifiableList(playerHandCards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperStartSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperStartSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.nn.NN.NNGameOperStartSyn.class, packet.nn.NN.NNGameOperStartSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<NNGameOperStartSyn> PARSER =
        new com.google.protobuf.AbstractParser<NNGameOperStartSyn>() {
      public NNGameOperStartSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NNGameOperStartSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NNGameOperStartSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional sint32 bankerPos = 1;
    public static final int BANKERPOS_FIELD_NUMBER = 1;
    private int bankerPos_;
    /**
     * <code>optional sint32 bankerPos = 1;</code>
     *
     * <pre>
     *庄家位置,bankerPos&lt;0: 未定庄家
     * </pre>
     */
    public boolean hasBankerPos() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sint32 bankerPos = 1;</code>
     *
     * <pre>
     *庄家位置,bankerPos&lt;0: 未定庄家
     * </pre>
     */
    public int getBankerPos() {
      return bankerPos_;
    }

    // repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;
    public static final int PLAYERHANDCARDS_FIELD_NUMBER = 2;
    private java.util.List<packet.nn.NN.NNGameOperHandCardSyn> playerHandCards_;
    /**
     * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public java.util.List<packet.nn.NN.NNGameOperHandCardSyn> getPlayerHandCardsList() {
      return playerHandCards_;
    }
    /**
     * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public java.util.List<? extends packet.nn.NN.NNGameOperHandCardSynOrBuilder> 
        getPlayerHandCardsOrBuilderList() {
      return playerHandCards_;
    }
    /**
     * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public int getPlayerHandCardsCount() {
      return playerHandCards_.size();
    }
    /**
     * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public packet.nn.NN.NNGameOperHandCardSyn getPlayerHandCards(int index) {
      return playerHandCards_.get(index);
    }
    /**
     * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public packet.nn.NN.NNGameOperHandCardSynOrBuilder getPlayerHandCardsOrBuilder(
        int index) {
      return playerHandCards_.get(index);
    }

    // optional bool reconnect = 3;
    public static final int RECONNECT_FIELD_NUMBER = 3;
    private boolean reconnect_;
    /**
     * <code>optional bool reconnect = 3;</code>
     *
     * <pre>
     *是否是断线重连 true是断线重连
     * </pre>
     */
    public boolean hasReconnect() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool reconnect = 3;</code>
     *
     * <pre>
     *是否是断线重连 true是断线重连
     * </pre>
     */
    public boolean getReconnect() {
      return reconnect_;
    }

    // optional sint32 juNum = 4;
    public static final int JUNUM_FIELD_NUMBER = 4;
    private int juNum_;
    /**
     * <code>optional sint32 juNum = 4;</code>
     *
     * <pre>
     *第几把
     * </pre>
     */
    public boolean hasJuNum() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 juNum = 4;</code>
     *
     * <pre>
     *第几把
     * </pre>
     */
    public int getJuNum() {
      return juNum_;
    }

    // optional sint32 qiangZhuangNum = 5;
    public static final int QIANGZHUANGNUM_FIELD_NUMBER = 5;
    private int qiangZhuangNum_;
    /**
     * <code>optional sint32 qiangZhuangNum = 5;</code>
     *
     * <pre>
     *抢庄倍数,qiangZhuangNum&lt;=0,无抢庄倍数
     * </pre>
     */
    public boolean hasQiangZhuangNum() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 qiangZhuangNum = 5;</code>
     *
     * <pre>
     *抢庄倍数,qiangZhuangNum&lt;=0,无抢庄倍数
     * </pre>
     */
    public int getQiangZhuangNum() {
      return qiangZhuangNum_;
    }

    // optional sint32 seq = 100;
    public static final int SEQ_FIELD_NUMBER = 100;
    private int seq_;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
     * </pre>
     */
    public boolean hasSeq() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
     * </pre>
     */
    public int getSeq() {
      return seq_;
    }

    private void initFields() {
      bankerPos_ = 0;
      playerHandCards_ = java.util.Collections.emptyList();
      reconnect_ = false;
      juNum_ = 0;
      qiangZhuangNum_ = 0;
      seq_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getPlayerHandCardsCount(); i++) {
        if (!getPlayerHandCards(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, bankerPos_);
      }
      for (int i = 0; i < playerHandCards_.size(); i++) {
        output.writeMessage(2, playerHandCards_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(3, reconnect_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(4, juNum_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(5, qiangZhuangNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(100, seq_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, bankerPos_);
      }
      for (int i = 0; i < playerHandCards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, playerHandCards_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, reconnect_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, juNum_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, qiangZhuangNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(100, seq_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.nn.NN.NNGameOperStartSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperStartSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperStartSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperStartSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperStartSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperStartSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperStartSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.nn.NN.NNGameOperStartSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperStartSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperStartSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.nn.NN.NNGameOperStartSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.nn.NNGameOperStartSyn}
     *
     * <pre>
     *游戏开始 operType=GAMESTART
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.nn.NN.NNGameOperStartSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperStartSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperStartSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.nn.NN.NNGameOperStartSyn.class, packet.nn.NN.NNGameOperStartSyn.Builder.class);
      }

      // Construct using packet.nn.NN.NNGameOperStartSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPlayerHandCardsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPos_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (playerHandCardsBuilder_ == null) {
          playerHandCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          playerHandCardsBuilder_.clear();
        }
        reconnect_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        juNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        qiangZhuangNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        seq_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperStartSyn_descriptor;
      }

      public packet.nn.NN.NNGameOperStartSyn getDefaultInstanceForType() {
        return packet.nn.NN.NNGameOperStartSyn.getDefaultInstance();
      }

      public packet.nn.NN.NNGameOperStartSyn build() {
        packet.nn.NN.NNGameOperStartSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.nn.NN.NNGameOperStartSyn buildPartial() {
        packet.nn.NN.NNGameOperStartSyn result = new packet.nn.NN.NNGameOperStartSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPos_ = bankerPos_;
        if (playerHandCardsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            playerHandCards_ = java.util.Collections.unmodifiableList(playerHandCards_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.playerHandCards_ = playerHandCards_;
        } else {
          result.playerHandCards_ = playerHandCardsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.reconnect_ = reconnect_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.juNum_ = juNum_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.qiangZhuangNum_ = qiangZhuangNum_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.seq_ = seq_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.nn.NN.NNGameOperStartSyn) {
          return mergeFrom((packet.nn.NN.NNGameOperStartSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.nn.NN.NNGameOperStartSyn other) {
        if (other == packet.nn.NN.NNGameOperStartSyn.getDefaultInstance()) return this;
        if (other.hasBankerPos()) {
          setBankerPos(other.getBankerPos());
        }
        if (playerHandCardsBuilder_ == null) {
          if (!other.playerHandCards_.isEmpty()) {
            if (playerHandCards_.isEmpty()) {
              playerHandCards_ = other.playerHandCards_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePlayerHandCardsIsMutable();
              playerHandCards_.addAll(other.playerHandCards_);
            }
            onChanged();
          }
        } else {
          if (!other.playerHandCards_.isEmpty()) {
            if (playerHandCardsBuilder_.isEmpty()) {
              playerHandCardsBuilder_.dispose();
              playerHandCardsBuilder_ = null;
              playerHandCards_ = other.playerHandCards_;
              bitField0_ = (bitField0_ & ~0x00000002);
              playerHandCardsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayerHandCardsFieldBuilder() : null;
            } else {
              playerHandCardsBuilder_.addAllMessages(other.playerHandCards_);
            }
          }
        }
        if (other.hasReconnect()) {
          setReconnect(other.getReconnect());
        }
        if (other.hasJuNum()) {
          setJuNum(other.getJuNum());
        }
        if (other.hasQiangZhuangNum()) {
          setQiangZhuangNum(other.getQiangZhuangNum());
        }
        if (other.hasSeq()) {
          setSeq(other.getSeq());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getPlayerHandCardsCount(); i++) {
          if (!getPlayerHandCards(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.nn.NN.NNGameOperStartSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.nn.NN.NNGameOperStartSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional sint32 bankerPos = 1;
      private int bankerPos_ ;
      /**
       * <code>optional sint32 bankerPos = 1;</code>
       *
       * <pre>
       *庄家位置,bankerPos&lt;0: 未定庄家
       * </pre>
       */
      public boolean hasBankerPos() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sint32 bankerPos = 1;</code>
       *
       * <pre>
       *庄家位置,bankerPos&lt;0: 未定庄家
       * </pre>
       */
      public int getBankerPos() {
        return bankerPos_;
      }
      /**
       * <code>optional sint32 bankerPos = 1;</code>
       *
       * <pre>
       *庄家位置,bankerPos&lt;0: 未定庄家
       * </pre>
       */
      public Builder setBankerPos(int value) {
        bitField0_ |= 0x00000001;
        bankerPos_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 bankerPos = 1;</code>
       *
       * <pre>
       *庄家位置,bankerPos&lt;0: 未定庄家
       * </pre>
       */
      public Builder clearBankerPos() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPos_ = 0;
        onChanged();
        return this;
      }

      // repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;
      private java.util.List<packet.nn.NN.NNGameOperHandCardSyn> playerHandCards_ =
        java.util.Collections.emptyList();
      private void ensurePlayerHandCardsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          playerHandCards_ = new java.util.ArrayList<packet.nn.NN.NNGameOperHandCardSyn>(playerHandCards_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.nn.NN.NNGameOperHandCardSyn, packet.nn.NN.NNGameOperHandCardSyn.Builder, packet.nn.NN.NNGameOperHandCardSynOrBuilder> playerHandCardsBuilder_;

      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public java.util.List<packet.nn.NN.NNGameOperHandCardSyn> getPlayerHandCardsList() {
        if (playerHandCardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(playerHandCards_);
        } else {
          return playerHandCardsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public int getPlayerHandCardsCount() {
        if (playerHandCardsBuilder_ == null) {
          return playerHandCards_.size();
        } else {
          return playerHandCardsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.nn.NN.NNGameOperHandCardSyn getPlayerHandCards(int index) {
        if (playerHandCardsBuilder_ == null) {
          return playerHandCards_.get(index);
        } else {
          return playerHandCardsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder setPlayerHandCards(
          int index, packet.nn.NN.NNGameOperHandCardSyn value) {
        if (playerHandCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.set(index, value);
          onChanged();
        } else {
          playerHandCardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder setPlayerHandCards(
          int index, packet.nn.NN.NNGameOperHandCardSyn.Builder builderForValue) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.set(index, builderForValue.build());
          onChanged();
        } else {
          playerHandCardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(packet.nn.NN.NNGameOperHandCardSyn value) {
        if (playerHandCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(value);
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(
          int index, packet.nn.NN.NNGameOperHandCardSyn value) {
        if (playerHandCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(index, value);
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(
          packet.nn.NN.NNGameOperHandCardSyn.Builder builderForValue) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(builderForValue.build());
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(
          int index, packet.nn.NN.NNGameOperHandCardSyn.Builder builderForValue) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(index, builderForValue.build());
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addAllPlayerHandCards(
          java.lang.Iterable<? extends packet.nn.NN.NNGameOperHandCardSyn> values) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          super.addAll(values, playerHandCards_);
          onChanged();
        } else {
          playerHandCardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder clearPlayerHandCards() {
        if (playerHandCardsBuilder_ == null) {
          playerHandCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          playerHandCardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder removePlayerHandCards(int index) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.remove(index);
          onChanged();
        } else {
          playerHandCardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.nn.NN.NNGameOperHandCardSyn.Builder getPlayerHandCardsBuilder(
          int index) {
        return getPlayerHandCardsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.nn.NN.NNGameOperHandCardSynOrBuilder getPlayerHandCardsOrBuilder(
          int index) {
        if (playerHandCardsBuilder_ == null) {
          return playerHandCards_.get(index);  } else {
          return playerHandCardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public java.util.List<? extends packet.nn.NN.NNGameOperHandCardSynOrBuilder> 
           getPlayerHandCardsOrBuilderList() {
        if (playerHandCardsBuilder_ != null) {
          return playerHandCardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(playerHandCards_);
        }
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.nn.NN.NNGameOperHandCardSyn.Builder addPlayerHandCardsBuilder() {
        return getPlayerHandCardsFieldBuilder().addBuilder(
            packet.nn.NN.NNGameOperHandCardSyn.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.nn.NN.NNGameOperHandCardSyn.Builder addPlayerHandCardsBuilder(
          int index) {
        return getPlayerHandCardsFieldBuilder().addBuilder(
            index, packet.nn.NN.NNGameOperHandCardSyn.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.nn.NNGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public java.util.List<packet.nn.NN.NNGameOperHandCardSyn.Builder> 
           getPlayerHandCardsBuilderList() {
        return getPlayerHandCardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.nn.NN.NNGameOperHandCardSyn, packet.nn.NN.NNGameOperHandCardSyn.Builder, packet.nn.NN.NNGameOperHandCardSynOrBuilder> 
          getPlayerHandCardsFieldBuilder() {
        if (playerHandCardsBuilder_ == null) {
          playerHandCardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.nn.NN.NNGameOperHandCardSyn, packet.nn.NN.NNGameOperHandCardSyn.Builder, packet.nn.NN.NNGameOperHandCardSynOrBuilder>(
                  playerHandCards_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          playerHandCards_ = null;
        }
        return playerHandCardsBuilder_;
      }

      // optional bool reconnect = 3;
      private boolean reconnect_ ;
      /**
       * <code>optional bool reconnect = 3;</code>
       *
       * <pre>
       *是否是断线重连 true是断线重连
       * </pre>
       */
      public boolean hasReconnect() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool reconnect = 3;</code>
       *
       * <pre>
       *是否是断线重连 true是断线重连
       * </pre>
       */
      public boolean getReconnect() {
        return reconnect_;
      }
      /**
       * <code>optional bool reconnect = 3;</code>
       *
       * <pre>
       *是否是断线重连 true是断线重连
       * </pre>
       */
      public Builder setReconnect(boolean value) {
        bitField0_ |= 0x00000004;
        reconnect_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool reconnect = 3;</code>
       *
       * <pre>
       *是否是断线重连 true是断线重连
       * </pre>
       */
      public Builder clearReconnect() {
        bitField0_ = (bitField0_ & ~0x00000004);
        reconnect_ = false;
        onChanged();
        return this;
      }

      // optional sint32 juNum = 4;
      private int juNum_ ;
      /**
       * <code>optional sint32 juNum = 4;</code>
       *
       * <pre>
       *第几把
       * </pre>
       */
      public boolean hasJuNum() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 juNum = 4;</code>
       *
       * <pre>
       *第几把
       * </pre>
       */
      public int getJuNum() {
        return juNum_;
      }
      /**
       * <code>optional sint32 juNum = 4;</code>
       *
       * <pre>
       *第几把
       * </pre>
       */
      public Builder setJuNum(int value) {
        bitField0_ |= 0x00000008;
        juNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 juNum = 4;</code>
       *
       * <pre>
       *第几把
       * </pre>
       */
      public Builder clearJuNum() {
        bitField0_ = (bitField0_ & ~0x00000008);
        juNum_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 qiangZhuangNum = 5;
      private int qiangZhuangNum_ ;
      /**
       * <code>optional sint32 qiangZhuangNum = 5;</code>
       *
       * <pre>
       *抢庄倍数,qiangZhuangNum&lt;=0,无抢庄倍数
       * </pre>
       */
      public boolean hasQiangZhuangNum() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 qiangZhuangNum = 5;</code>
       *
       * <pre>
       *抢庄倍数,qiangZhuangNum&lt;=0,无抢庄倍数
       * </pre>
       */
      public int getQiangZhuangNum() {
        return qiangZhuangNum_;
      }
      /**
       * <code>optional sint32 qiangZhuangNum = 5;</code>
       *
       * <pre>
       *抢庄倍数,qiangZhuangNum&lt;=0,无抢庄倍数
       * </pre>
       */
      public Builder setQiangZhuangNum(int value) {
        bitField0_ |= 0x00000010;
        qiangZhuangNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 qiangZhuangNum = 5;</code>
       *
       * <pre>
       *抢庄倍数,qiangZhuangNum&lt;=0,无抢庄倍数
       * </pre>
       */
      public Builder clearQiangZhuangNum() {
        bitField0_ = (bitField0_ & ~0x00000010);
        qiangZhuangNum_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 seq = 100;
      private int seq_ ;
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
       * </pre>
       */
      public boolean hasSeq() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
       * </pre>
       */
      public int getSeq() {
        return seq_;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
       * </pre>
       */
      public Builder setSeq(int value) {
        bitField0_ |= 0x00000020;
        seq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
       * </pre>
       */
      public Builder clearSeq() {
        bitField0_ = (bitField0_ & ~0x00000020);
        seq_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.nn.NNGameOperStartSyn)
    }

    static {
      defaultInstance = new NNGameOperStartSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.nn.NNGameOperStartSyn)
  }

  public interface NNGameOperHandCardSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // repeated sint32 handCards = 2;
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家)或者不能看牌的牌,则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardsList();
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家)或者不能看牌的牌,则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    int getHandCardsCount();
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家)或者不能看牌的牌,则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    int getHandCards(int index);

    // optional sint32 socre = 3;
    /**
     * <code>optional sint32 socre = 3;</code>
     *
     * <pre>
     *玩家自己的分数
     * </pre>
     */
    boolean hasSocre();
    /**
     * <code>optional sint32 socre = 3;</code>
     *
     * <pre>
     *玩家自己的分数
     * </pre>
     */
    int getSocre();

    // optional sint32 xiazhuNum = 4;
    /**
     * <code>optional sint32 xiazhuNum = 4;</code>
     *
     * <pre>
     *筹码
     * </pre>
     */
    boolean hasXiazhuNum();
    /**
     * <code>optional sint32 xiazhuNum = 4;</code>
     *
     * <pre>
     *筹码
     * </pre>
     */
    int getXiazhuNum();

    // optional string cardType = 5;
    /**
     * <code>optional string cardType = 5;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional string cardType = 5;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    java.lang.String getCardType();
    /**
     * <code>optional string cardType = 5;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    com.google.protobuf.ByteString
        getCardTypeBytes();

    // optional sint32 qiangZhuangNum = 6;
    /**
     * <code>optional sint32 qiangZhuangNum = 6;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasQiangZhuangNum();
    /**
     * <code>optional sint32 qiangZhuangNum = 6;</code>
     *
     * <pre>
     * </pre>
     */
    int getQiangZhuangNum();

    // optional bool isWait = 8;
    /**
     * <code>optional bool isWait = 8;</code>
     *
     * <pre>
     *是否等待下一把
     * </pre>
     */
    boolean hasIsWait();
    /**
     * <code>optional bool isWait = 8;</code>
     *
     * <pre>
     *是否等待下一把
     * </pre>
     */
    boolean getIsWait();
  }
  /**
   * Protobuf type {@code packet.nn.NNGameOperHandCardSyn}
   *
   * <pre>
   *同步某个的玩家手牌, operType=HANDCARDS
   * </pre>
   */
  public static final class NNGameOperHandCardSyn extends
      com.google.protobuf.GeneratedMessage
      implements NNGameOperHandCardSynOrBuilder {
    // Use NNGameOperHandCardSyn.newBuilder() to construct.
    private NNGameOperHandCardSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NNGameOperHandCardSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NNGameOperHandCardSyn defaultInstance;
    public static NNGameOperHandCardSyn getDefaultInstance() {
      return defaultInstance;
    }

    public NNGameOperHandCardSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NNGameOperHandCardSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                handCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              handCards_.add(input.readSInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                handCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCards_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              socre_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              xiazhuNum_ = input.readSInt32();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000008;
              cardType_ = input.readBytes();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              qiangZhuangNum_ = input.readSInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              isWait_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          handCards_ = java.util.Collections.unmodifiableList(handCards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperHandCardSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperHandCardSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.nn.NN.NNGameOperHandCardSyn.class, packet.nn.NN.NNGameOperHandCardSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<NNGameOperHandCardSyn> PARSER =
        new com.google.protobuf.AbstractParser<NNGameOperHandCardSyn>() {
      public NNGameOperHandCardSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NNGameOperHandCardSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NNGameOperHandCardSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // repeated sint32 handCards = 2;
    public static final int HANDCARDS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> handCards_;
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家)或者不能看牌的牌,则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardsList() {
      return handCards_;
    }
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家)或者不能看牌的牌,则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    public int getHandCardsCount() {
      return handCards_.size();
    }
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家)或者不能看牌的牌,则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    public int getHandCards(int index) {
      return handCards_.get(index);
    }

    // optional sint32 socre = 3;
    public static final int SOCRE_FIELD_NUMBER = 3;
    private int socre_;
    /**
     * <code>optional sint32 socre = 3;</code>
     *
     * <pre>
     *玩家自己的分数
     * </pre>
     */
    public boolean hasSocre() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 socre = 3;</code>
     *
     * <pre>
     *玩家自己的分数
     * </pre>
     */
    public int getSocre() {
      return socre_;
    }

    // optional sint32 xiazhuNum = 4;
    public static final int XIAZHUNUM_FIELD_NUMBER = 4;
    private int xiazhuNum_;
    /**
     * <code>optional sint32 xiazhuNum = 4;</code>
     *
     * <pre>
     *筹码
     * </pre>
     */
    public boolean hasXiazhuNum() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 xiazhuNum = 4;</code>
     *
     * <pre>
     *筹码
     * </pre>
     */
    public int getXiazhuNum() {
      return xiazhuNum_;
    }

    // optional string cardType = 5;
    public static final int CARDTYPE_FIELD_NUMBER = 5;
    private java.lang.Object cardType_;
    /**
     * <code>optional string cardType = 5;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string cardType = 5;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public java.lang.String getCardType() {
      java.lang.Object ref = cardType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          cardType_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string cardType = 5;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCardTypeBytes() {
      java.lang.Object ref = cardType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        cardType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional sint32 qiangZhuangNum = 6;
    public static final int QIANGZHUANGNUM_FIELD_NUMBER = 6;
    private int qiangZhuangNum_;
    /**
     * <code>optional sint32 qiangZhuangNum = 6;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasQiangZhuangNum() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 qiangZhuangNum = 6;</code>
     *
     * <pre>
     * </pre>
     */
    public int getQiangZhuangNum() {
      return qiangZhuangNum_;
    }

    // optional bool isWait = 8;
    public static final int ISWAIT_FIELD_NUMBER = 8;
    private boolean isWait_;
    /**
     * <code>optional bool isWait = 8;</code>
     *
     * <pre>
     *是否等待下一把
     * </pre>
     */
    public boolean hasIsWait() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool isWait = 8;</code>
     *
     * <pre>
     *是否等待下一把
     * </pre>
     */
    public boolean getIsWait() {
      return isWait_;
    }

    private void initFields() {
      position_ = 0;
      handCards_ = java.util.Collections.emptyList();
      socre_ = 0;
      xiazhuNum_ = 0;
      cardType_ = "";
      qiangZhuangNum_ = 0;
      isWait_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      for (int i = 0; i < handCards_.size(); i++) {
        output.writeSInt32(2, handCards_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(3, socre_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(4, xiazhuNum_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(5, getCardTypeBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(6, qiangZhuangNum_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(8, isWait_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(handCards_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardsList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, socre_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, xiazhuNum_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getCardTypeBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, qiangZhuangNum_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, isWait_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.nn.NN.NNGameOperHandCardSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperHandCardSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperHandCardSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperHandCardSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperHandCardSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperHandCardSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperHandCardSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.nn.NN.NNGameOperHandCardSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperHandCardSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperHandCardSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.nn.NN.NNGameOperHandCardSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.nn.NNGameOperHandCardSyn}
     *
     * <pre>
     *同步某个的玩家手牌, operType=HANDCARDS
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.nn.NN.NNGameOperHandCardSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperHandCardSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperHandCardSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.nn.NN.NNGameOperHandCardSyn.class, packet.nn.NN.NNGameOperHandCardSyn.Builder.class);
      }

      // Construct using packet.nn.NN.NNGameOperHandCardSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        handCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        socre_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        xiazhuNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        qiangZhuangNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        isWait_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperHandCardSyn_descriptor;
      }

      public packet.nn.NN.NNGameOperHandCardSyn getDefaultInstanceForType() {
        return packet.nn.NN.NNGameOperHandCardSyn.getDefaultInstance();
      }

      public packet.nn.NN.NNGameOperHandCardSyn build() {
        packet.nn.NN.NNGameOperHandCardSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.nn.NN.NNGameOperHandCardSyn buildPartial() {
        packet.nn.NN.NNGameOperHandCardSyn result = new packet.nn.NN.NNGameOperHandCardSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          handCards_ = java.util.Collections.unmodifiableList(handCards_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.handCards_ = handCards_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.socre_ = socre_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.xiazhuNum_ = xiazhuNum_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.qiangZhuangNum_ = qiangZhuangNum_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.isWait_ = isWait_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.nn.NN.NNGameOperHandCardSyn) {
          return mergeFrom((packet.nn.NN.NNGameOperHandCardSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.nn.NN.NNGameOperHandCardSyn other) {
        if (other == packet.nn.NN.NNGameOperHandCardSyn.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (!other.handCards_.isEmpty()) {
          if (handCards_.isEmpty()) {
            handCards_ = other.handCards_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureHandCardsIsMutable();
            handCards_.addAll(other.handCards_);
          }
          onChanged();
        }
        if (other.hasSocre()) {
          setSocre(other.getSocre());
        }
        if (other.hasXiazhuNum()) {
          setXiazhuNum(other.getXiazhuNum());
        }
        if (other.hasCardType()) {
          bitField0_ |= 0x00000010;
          cardType_ = other.cardType_;
          onChanged();
        }
        if (other.hasQiangZhuangNum()) {
          setQiangZhuangNum(other.getQiangZhuangNum());
        }
        if (other.hasIsWait()) {
          setIsWait(other.getIsWait());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.nn.NN.NNGameOperHandCardSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.nn.NN.NNGameOperHandCardSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // repeated sint32 handCards = 2;
      private java.util.List<java.lang.Integer> handCards_ = java.util.Collections.emptyList();
      private void ensureHandCardsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          handCards_ = new java.util.ArrayList<java.lang.Integer>(handCards_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家)或者不能看牌的牌,则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardsList() {
        return java.util.Collections.unmodifiableList(handCards_);
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家)或者不能看牌的牌,则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public int getHandCardsCount() {
        return handCards_.size();
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家)或者不能看牌的牌,则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public int getHandCards(int index) {
        return handCards_.get(index);
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家)或者不能看牌的牌,则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public Builder setHandCards(
          int index, int value) {
        ensureHandCardsIsMutable();
        handCards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家)或者不能看牌的牌,则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public Builder addHandCards(int value) {
        ensureHandCardsIsMutable();
        handCards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家)或者不能看牌的牌,则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public Builder addAllHandCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardsIsMutable();
        super.addAll(values, handCards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家)或者不能看牌的牌,则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public Builder clearHandCards() {
        handCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional sint32 socre = 3;
      private int socre_ ;
      /**
       * <code>optional sint32 socre = 3;</code>
       *
       * <pre>
       *玩家自己的分数
       * </pre>
       */
      public boolean hasSocre() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 socre = 3;</code>
       *
       * <pre>
       *玩家自己的分数
       * </pre>
       */
      public int getSocre() {
        return socre_;
      }
      /**
       * <code>optional sint32 socre = 3;</code>
       *
       * <pre>
       *玩家自己的分数
       * </pre>
       */
      public Builder setSocre(int value) {
        bitField0_ |= 0x00000004;
        socre_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 socre = 3;</code>
       *
       * <pre>
       *玩家自己的分数
       * </pre>
       */
      public Builder clearSocre() {
        bitField0_ = (bitField0_ & ~0x00000004);
        socre_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 xiazhuNum = 4;
      private int xiazhuNum_ ;
      /**
       * <code>optional sint32 xiazhuNum = 4;</code>
       *
       * <pre>
       *筹码
       * </pre>
       */
      public boolean hasXiazhuNum() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 xiazhuNum = 4;</code>
       *
       * <pre>
       *筹码
       * </pre>
       */
      public int getXiazhuNum() {
        return xiazhuNum_;
      }
      /**
       * <code>optional sint32 xiazhuNum = 4;</code>
       *
       * <pre>
       *筹码
       * </pre>
       */
      public Builder setXiazhuNum(int value) {
        bitField0_ |= 0x00000008;
        xiazhuNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 xiazhuNum = 4;</code>
       *
       * <pre>
       *筹码
       * </pre>
       */
      public Builder clearXiazhuNum() {
        bitField0_ = (bitField0_ & ~0x00000008);
        xiazhuNum_ = 0;
        onChanged();
        return this;
      }

      // optional string cardType = 5;
      private java.lang.Object cardType_ = "";
      /**
       * <code>optional string cardType = 5;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string cardType = 5;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public java.lang.String getCardType() {
        java.lang.Object ref = cardType_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          cardType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string cardType = 5;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCardTypeBytes() {
        java.lang.Object ref = cardType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          cardType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string cardType = 5;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder setCardType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string cardType = 5;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cardType_ = getDefaultInstance().getCardType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string cardType = 5;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder setCardTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        cardType_ = value;
        onChanged();
        return this;
      }

      // optional sint32 qiangZhuangNum = 6;
      private int qiangZhuangNum_ ;
      /**
       * <code>optional sint32 qiangZhuangNum = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasQiangZhuangNum() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 qiangZhuangNum = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public int getQiangZhuangNum() {
        return qiangZhuangNum_;
      }
      /**
       * <code>optional sint32 qiangZhuangNum = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setQiangZhuangNum(int value) {
        bitField0_ |= 0x00000020;
        qiangZhuangNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 qiangZhuangNum = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearQiangZhuangNum() {
        bitField0_ = (bitField0_ & ~0x00000020);
        qiangZhuangNum_ = 0;
        onChanged();
        return this;
      }

      // optional bool isWait = 8;
      private boolean isWait_ ;
      /**
       * <code>optional bool isWait = 8;</code>
       *
       * <pre>
       *是否等待下一把
       * </pre>
       */
      public boolean hasIsWait() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool isWait = 8;</code>
       *
       * <pre>
       *是否等待下一把
       * </pre>
       */
      public boolean getIsWait() {
        return isWait_;
      }
      /**
       * <code>optional bool isWait = 8;</code>
       *
       * <pre>
       *是否等待下一把
       * </pre>
       */
      public Builder setIsWait(boolean value) {
        bitField0_ |= 0x00000040;
        isWait_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool isWait = 8;</code>
       *
       * <pre>
       *是否等待下一把
       * </pre>
       */
      public Builder clearIsWait() {
        bitField0_ = (bitField0_ & ~0x00000040);
        isWait_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.nn.NNGameOperHandCardSyn)
    }

    static {
      defaultInstance = new NNGameOperHandCardSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.nn.NNGameOperHandCardSyn)
  }

  public interface NNGameOperActorSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // required sint32 timeLeft = 2;
    /**
     * <code>required sint32 timeLeft = 2;</code>
     *
     * <pre>
     *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
     * </pre>
     */
    boolean hasTimeLeft();
    /**
     * <code>required sint32 timeLeft = 2;</code>
     *
     * <pre>
     *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
     * </pre>
     */
    int getTimeLeft();
  }
  /**
   * Protobuf type {@code packet.nn.NNGameOperActorSyn}
   *
   * <pre>
   *同步行动者信息 operType=ACTSYN
   * </pre>
   */
  public static final class NNGameOperActorSyn extends
      com.google.protobuf.GeneratedMessage
      implements NNGameOperActorSynOrBuilder {
    // Use NNGameOperActorSyn.newBuilder() to construct.
    private NNGameOperActorSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NNGameOperActorSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NNGameOperActorSyn defaultInstance;
    public static NNGameOperActorSyn getDefaultInstance() {
      return defaultInstance;
    }

    public NNGameOperActorSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NNGameOperActorSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              timeLeft_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperActorSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperActorSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.nn.NN.NNGameOperActorSyn.class, packet.nn.NN.NNGameOperActorSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<NNGameOperActorSyn> PARSER =
        new com.google.protobuf.AbstractParser<NNGameOperActorSyn>() {
      public NNGameOperActorSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NNGameOperActorSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NNGameOperActorSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // required sint32 timeLeft = 2;
    public static final int TIMELEFT_FIELD_NUMBER = 2;
    private int timeLeft_;
    /**
     * <code>required sint32 timeLeft = 2;</code>
     *
     * <pre>
     *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
     * </pre>
     */
    public boolean hasTimeLeft() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 timeLeft = 2;</code>
     *
     * <pre>
     *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
     * </pre>
     */
    public int getTimeLeft() {
      return timeLeft_;
    }

    private void initFields() {
      position_ = 0;
      timeLeft_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTimeLeft()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, timeLeft_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, timeLeft_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.nn.NN.NNGameOperActorSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperActorSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperActorSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperActorSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperActorSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperActorSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperActorSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.nn.NN.NNGameOperActorSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperActorSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperActorSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.nn.NN.NNGameOperActorSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.nn.NNGameOperActorSyn}
     *
     * <pre>
     *同步行动者信息 operType=ACTSYN
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.nn.NN.NNGameOperActorSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperActorSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperActorSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.nn.NN.NNGameOperActorSyn.class, packet.nn.NN.NNGameOperActorSyn.Builder.class);
      }

      // Construct using packet.nn.NN.NNGameOperActorSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        timeLeft_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperActorSyn_descriptor;
      }

      public packet.nn.NN.NNGameOperActorSyn getDefaultInstanceForType() {
        return packet.nn.NN.NNGameOperActorSyn.getDefaultInstance();
      }

      public packet.nn.NN.NNGameOperActorSyn build() {
        packet.nn.NN.NNGameOperActorSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.nn.NN.NNGameOperActorSyn buildPartial() {
        packet.nn.NN.NNGameOperActorSyn result = new packet.nn.NN.NNGameOperActorSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.timeLeft_ = timeLeft_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.nn.NN.NNGameOperActorSyn) {
          return mergeFrom((packet.nn.NN.NNGameOperActorSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.nn.NN.NNGameOperActorSyn other) {
        if (other == packet.nn.NN.NNGameOperActorSyn.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasTimeLeft()) {
          setTimeLeft(other.getTimeLeft());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasTimeLeft()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.nn.NN.NNGameOperActorSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.nn.NN.NNGameOperActorSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // required sint32 timeLeft = 2;
      private int timeLeft_ ;
      /**
       * <code>required sint32 timeLeft = 2;</code>
       *
       * <pre>
       *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
       * </pre>
       */
      public boolean hasTimeLeft() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 timeLeft = 2;</code>
       *
       * <pre>
       *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
       * </pre>
       */
      public int getTimeLeft() {
        return timeLeft_;
      }
      /**
       * <code>required sint32 timeLeft = 2;</code>
       *
       * <pre>
       *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
       * </pre>
       */
      public Builder setTimeLeft(int value) {
        bitField0_ |= 0x00000002;
        timeLeft_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 timeLeft = 2;</code>
       *
       * <pre>
       *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
       * </pre>
       */
      public Builder clearTimeLeft() {
        bitField0_ = (bitField0_ & ~0x00000002);
        timeLeft_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.nn.NNGameOperActorSyn)
    }

    static {
      defaultInstance = new NNGameOperActorSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.nn.NNGameOperActorSyn)
  }

  public interface NNGameOperPlayerActionSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // required sint32 action = 2;
    /**
     * <code>required sint32 action = 2;</code>
     *
     * <pre>
     *操作编码
     * </pre>
     */
    boolean hasAction();
    /**
     * <code>required sint32 action = 2;</code>
     *
     * <pre>
     *操作编码
     * </pre>
     */
    int getAction();

    // optional sint32 qiangZhuangNum = 3;
    /**
     * <code>optional sint32 qiangZhuangNum = 3;</code>
     *
     * <pre>
     *抢庄倍数
     * </pre>
     */
    boolean hasQiangZhuangNum();
    /**
     * <code>optional sint32 qiangZhuangNum = 3;</code>
     *
     * <pre>
     *抢庄倍数
     * </pre>
     */
    int getQiangZhuangNum();

    // optional sint32 bankerPos = 4;
    /**
     * <code>optional sint32 bankerPos = 4;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    boolean hasBankerPos();
    /**
     * <code>optional sint32 bankerPos = 4;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    int getBankerPos();

    // optional sint32 xiaZhuNum = 5;
    /**
     * <code>optional sint32 xiaZhuNum = 5;</code>
     *
     * <pre>
     *下注筹码
     * </pre>
     */
    boolean hasXiaZhuNum();
    /**
     * <code>optional sint32 xiaZhuNum = 5;</code>
     *
     * <pre>
     *下注筹码
     * </pre>
     */
    int getXiaZhuNum();

    // optional string cardType = 6;
    /**
     * <code>optional string cardType = 6;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional string cardType = 6;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    java.lang.String getCardType();
    /**
     * <code>optional string cardType = 6;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    com.google.protobuf.ByteString
        getCardTypeBytes();

    // repeated sint32 handcard = 7;
    /**
     * <code>repeated sint32 handcard = 7;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandcardList();
    /**
     * <code>repeated sint32 handcard = 7;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    int getHandcardCount();
    /**
     * <code>repeated sint32 handcard = 7;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    int getHandcard(int index);

    // optional sint32 seq = 100;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    boolean hasSeq();
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    int getSeq();
  }
  /**
   * Protobuf type {@code packet.nn.NNGameOperPlayerActionSyn}
   *
   * <pre>
   *玩家操作同步operType=ACTIONSYN, 前端通过此包告诉后端玩家进行了什么操作，后端通过此包将操作告诉其它玩家
   * </pre>
   */
  public static final class NNGameOperPlayerActionSyn extends
      com.google.protobuf.GeneratedMessage
      implements NNGameOperPlayerActionSynOrBuilder {
    // Use NNGameOperPlayerActionSyn.newBuilder() to construct.
    private NNGameOperPlayerActionSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NNGameOperPlayerActionSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NNGameOperPlayerActionSyn defaultInstance;
    public static NNGameOperPlayerActionSyn getDefaultInstance() {
      return defaultInstance;
    }

    public NNGameOperPlayerActionSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NNGameOperPlayerActionSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              action_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              qiangZhuangNum_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              bankerPos_ = input.readSInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              xiaZhuNum_ = input.readSInt32();
              break;
            }
            case 50: {
              bitField0_ |= 0x00000020;
              cardType_ = input.readBytes();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                handcard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              handcard_.add(input.readSInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                handcard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                handcard_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 800: {
              bitField0_ |= 0x00000040;
              seq_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          handcard_ = java.util.Collections.unmodifiableList(handcard_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerActionSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerActionSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.nn.NN.NNGameOperPlayerActionSyn.class, packet.nn.NN.NNGameOperPlayerActionSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<NNGameOperPlayerActionSyn> PARSER =
        new com.google.protobuf.AbstractParser<NNGameOperPlayerActionSyn>() {
      public NNGameOperPlayerActionSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NNGameOperPlayerActionSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NNGameOperPlayerActionSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // required sint32 action = 2;
    public static final int ACTION_FIELD_NUMBER = 2;
    private int action_;
    /**
     * <code>required sint32 action = 2;</code>
     *
     * <pre>
     *操作编码
     * </pre>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 action = 2;</code>
     *
     * <pre>
     *操作编码
     * </pre>
     */
    public int getAction() {
      return action_;
    }

    // optional sint32 qiangZhuangNum = 3;
    public static final int QIANGZHUANGNUM_FIELD_NUMBER = 3;
    private int qiangZhuangNum_;
    /**
     * <code>optional sint32 qiangZhuangNum = 3;</code>
     *
     * <pre>
     *抢庄倍数
     * </pre>
     */
    public boolean hasQiangZhuangNum() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 qiangZhuangNum = 3;</code>
     *
     * <pre>
     *抢庄倍数
     * </pre>
     */
    public int getQiangZhuangNum() {
      return qiangZhuangNum_;
    }

    // optional sint32 bankerPos = 4;
    public static final int BANKERPOS_FIELD_NUMBER = 4;
    private int bankerPos_;
    /**
     * <code>optional sint32 bankerPos = 4;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    public boolean hasBankerPos() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 bankerPos = 4;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    public int getBankerPos() {
      return bankerPos_;
    }

    // optional sint32 xiaZhuNum = 5;
    public static final int XIAZHUNUM_FIELD_NUMBER = 5;
    private int xiaZhuNum_;
    /**
     * <code>optional sint32 xiaZhuNum = 5;</code>
     *
     * <pre>
     *下注筹码
     * </pre>
     */
    public boolean hasXiaZhuNum() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 xiaZhuNum = 5;</code>
     *
     * <pre>
     *下注筹码
     * </pre>
     */
    public int getXiaZhuNum() {
      return xiaZhuNum_;
    }

    // optional string cardType = 6;
    public static final int CARDTYPE_FIELD_NUMBER = 6;
    private java.lang.Object cardType_;
    /**
     * <code>optional string cardType = 6;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional string cardType = 6;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public java.lang.String getCardType() {
      java.lang.Object ref = cardType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          cardType_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string cardType = 6;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCardTypeBytes() {
      java.lang.Object ref = cardType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        cardType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated sint32 handcard = 7;
    public static final int HANDCARD_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> handcard_;
    /**
     * <code>repeated sint32 handcard = 7;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandcardList() {
      return handcard_;
    }
    /**
     * <code>repeated sint32 handcard = 7;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    public int getHandcardCount() {
      return handcard_.size();
    }
    /**
     * <code>repeated sint32 handcard = 7;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    public int getHandcard(int index) {
      return handcard_.get(index);
    }

    // optional sint32 seq = 100;
    public static final int SEQ_FIELD_NUMBER = 100;
    private int seq_;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    public boolean hasSeq() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    public int getSeq() {
      return seq_;
    }

    private void initFields() {
      position_ = 0;
      action_ = 0;
      qiangZhuangNum_ = 0;
      bankerPos_ = 0;
      xiaZhuNum_ = 0;
      cardType_ = "";
      handcard_ = java.util.Collections.emptyList();
      seq_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAction()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, action_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, qiangZhuangNum_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(4, bankerPos_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, xiaZhuNum_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, getCardTypeBytes());
      }
      for (int i = 0; i < handcard_.size(); i++) {
        output.writeSInt32(7, handcard_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(100, seq_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, action_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, qiangZhuangNum_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, bankerPos_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, xiaZhuNum_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getCardTypeBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handcard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(handcard_.get(i));
        }
        size += dataSize;
        size += 1 * getHandcardList().size();
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(100, seq_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.nn.NN.NNGameOperPlayerActionSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperPlayerActionSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerActionSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperPlayerActionSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerActionSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperPlayerActionSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerActionSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.nn.NN.NNGameOperPlayerActionSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerActionSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperPlayerActionSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.nn.NN.NNGameOperPlayerActionSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.nn.NNGameOperPlayerActionSyn}
     *
     * <pre>
     *玩家操作同步operType=ACTIONSYN, 前端通过此包告诉后端玩家进行了什么操作，后端通过此包将操作告诉其它玩家
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.nn.NN.NNGameOperPlayerActionSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerActionSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerActionSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.nn.NN.NNGameOperPlayerActionSyn.class, packet.nn.NN.NNGameOperPlayerActionSyn.Builder.class);
      }

      // Construct using packet.nn.NN.NNGameOperPlayerActionSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        action_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        qiangZhuangNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        bankerPos_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        xiaZhuNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        cardType_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        handcard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        seq_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerActionSyn_descriptor;
      }

      public packet.nn.NN.NNGameOperPlayerActionSyn getDefaultInstanceForType() {
        return packet.nn.NN.NNGameOperPlayerActionSyn.getDefaultInstance();
      }

      public packet.nn.NN.NNGameOperPlayerActionSyn build() {
        packet.nn.NN.NNGameOperPlayerActionSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.nn.NN.NNGameOperPlayerActionSyn buildPartial() {
        packet.nn.NN.NNGameOperPlayerActionSyn result = new packet.nn.NN.NNGameOperPlayerActionSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.action_ = action_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.qiangZhuangNum_ = qiangZhuangNum_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.bankerPos_ = bankerPos_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.xiaZhuNum_ = xiaZhuNum_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.cardType_ = cardType_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          handcard_ = java.util.Collections.unmodifiableList(handcard_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.handcard_ = handcard_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.seq_ = seq_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.nn.NN.NNGameOperPlayerActionSyn) {
          return mergeFrom((packet.nn.NN.NNGameOperPlayerActionSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.nn.NN.NNGameOperPlayerActionSyn other) {
        if (other == packet.nn.NN.NNGameOperPlayerActionSyn.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        if (other.hasQiangZhuangNum()) {
          setQiangZhuangNum(other.getQiangZhuangNum());
        }
        if (other.hasBankerPos()) {
          setBankerPos(other.getBankerPos());
        }
        if (other.hasXiaZhuNum()) {
          setXiaZhuNum(other.getXiaZhuNum());
        }
        if (other.hasCardType()) {
          bitField0_ |= 0x00000020;
          cardType_ = other.cardType_;
          onChanged();
        }
        if (!other.handcard_.isEmpty()) {
          if (handcard_.isEmpty()) {
            handcard_ = other.handcard_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureHandcardIsMutable();
            handcard_.addAll(other.handcard_);
          }
          onChanged();
        }
        if (other.hasSeq()) {
          setSeq(other.getSeq());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasAction()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.nn.NN.NNGameOperPlayerActionSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.nn.NN.NNGameOperPlayerActionSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // required sint32 action = 2;
      private int action_ ;
      /**
       * <code>required sint32 action = 2;</code>
       *
       * <pre>
       *操作编码
       * </pre>
       */
      public boolean hasAction() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 action = 2;</code>
       *
       * <pre>
       *操作编码
       * </pre>
       */
      public int getAction() {
        return action_;
      }
      /**
       * <code>required sint32 action = 2;</code>
       *
       * <pre>
       *操作编码
       * </pre>
       */
      public Builder setAction(int value) {
        bitField0_ |= 0x00000002;
        action_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 action = 2;</code>
       *
       * <pre>
       *操作编码
       * </pre>
       */
      public Builder clearAction() {
        bitField0_ = (bitField0_ & ~0x00000002);
        action_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 qiangZhuangNum = 3;
      private int qiangZhuangNum_ ;
      /**
       * <code>optional sint32 qiangZhuangNum = 3;</code>
       *
       * <pre>
       *抢庄倍数
       * </pre>
       */
      public boolean hasQiangZhuangNum() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 qiangZhuangNum = 3;</code>
       *
       * <pre>
       *抢庄倍数
       * </pre>
       */
      public int getQiangZhuangNum() {
        return qiangZhuangNum_;
      }
      /**
       * <code>optional sint32 qiangZhuangNum = 3;</code>
       *
       * <pre>
       *抢庄倍数
       * </pre>
       */
      public Builder setQiangZhuangNum(int value) {
        bitField0_ |= 0x00000004;
        qiangZhuangNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 qiangZhuangNum = 3;</code>
       *
       * <pre>
       *抢庄倍数
       * </pre>
       */
      public Builder clearQiangZhuangNum() {
        bitField0_ = (bitField0_ & ~0x00000004);
        qiangZhuangNum_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 bankerPos = 4;
      private int bankerPos_ ;
      /**
       * <code>optional sint32 bankerPos = 4;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public boolean hasBankerPos() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 bankerPos = 4;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public int getBankerPos() {
        return bankerPos_;
      }
      /**
       * <code>optional sint32 bankerPos = 4;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public Builder setBankerPos(int value) {
        bitField0_ |= 0x00000008;
        bankerPos_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 bankerPos = 4;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public Builder clearBankerPos() {
        bitField0_ = (bitField0_ & ~0x00000008);
        bankerPos_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 xiaZhuNum = 5;
      private int xiaZhuNum_ ;
      /**
       * <code>optional sint32 xiaZhuNum = 5;</code>
       *
       * <pre>
       *下注筹码
       * </pre>
       */
      public boolean hasXiaZhuNum() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 xiaZhuNum = 5;</code>
       *
       * <pre>
       *下注筹码
       * </pre>
       */
      public int getXiaZhuNum() {
        return xiaZhuNum_;
      }
      /**
       * <code>optional sint32 xiaZhuNum = 5;</code>
       *
       * <pre>
       *下注筹码
       * </pre>
       */
      public Builder setXiaZhuNum(int value) {
        bitField0_ |= 0x00000010;
        xiaZhuNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 xiaZhuNum = 5;</code>
       *
       * <pre>
       *下注筹码
       * </pre>
       */
      public Builder clearXiaZhuNum() {
        bitField0_ = (bitField0_ & ~0x00000010);
        xiaZhuNum_ = 0;
        onChanged();
        return this;
      }

      // optional string cardType = 6;
      private java.lang.Object cardType_ = "";
      /**
       * <code>optional string cardType = 6;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string cardType = 6;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public java.lang.String getCardType() {
        java.lang.Object ref = cardType_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          cardType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string cardType = 6;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCardTypeBytes() {
        java.lang.Object ref = cardType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          cardType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string cardType = 6;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder setCardType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string cardType = 6;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000020);
        cardType_ = getDefaultInstance().getCardType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string cardType = 6;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder setCardTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        cardType_ = value;
        onChanged();
        return this;
      }

      // repeated sint32 handcard = 7;
      private java.util.List<java.lang.Integer> handcard_ = java.util.Collections.emptyList();
      private void ensureHandcardIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          handcard_ = new java.util.ArrayList<java.lang.Integer>(handcard_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated sint32 handcard = 7;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandcardList() {
        return java.util.Collections.unmodifiableList(handcard_);
      }
      /**
       * <code>repeated sint32 handcard = 7;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public int getHandcardCount() {
        return handcard_.size();
      }
      /**
       * <code>repeated sint32 handcard = 7;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public int getHandcard(int index) {
        return handcard_.get(index);
      }
      /**
       * <code>repeated sint32 handcard = 7;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder setHandcard(
          int index, int value) {
        ensureHandcardIsMutable();
        handcard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handcard = 7;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder addHandcard(int value) {
        ensureHandcardIsMutable();
        handcard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handcard = 7;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder addAllHandcard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandcardIsMutable();
        super.addAll(values, handcard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handcard = 7;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder clearHandcard() {
        handcard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // optional sint32 seq = 100;
      private int seq_ ;
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public boolean hasSeq() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public int getSeq() {
        return seq_;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public Builder setSeq(int value) {
        bitField0_ |= 0x00000080;
        seq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public Builder clearSeq() {
        bitField0_ = (bitField0_ & ~0x00000080);
        seq_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.nn.NNGameOperPlayerActionSyn)
    }

    static {
      defaultInstance = new NNGameOperPlayerActionSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.nn.NNGameOperPlayerActionSyn)
  }

  public interface NNGameOperPlayerActionNotifyOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // required sint32 actions = 2;
    /**
     * <code>required sint32 actions = 2;</code>
     *
     * <pre>
     *操作编码
     * </pre>
     */
    boolean hasActions();
    /**
     * <code>required sint32 actions = 2;</code>
     *
     * <pre>
     *操作编码
     * </pre>
     */
    int getActions();

    // repeated sint32 qiangZhuangNum = 3;
    /**
     * <code>repeated sint32 qiangZhuangNum = 3;</code>
     *
     * <pre>
     *玩家抢庄倍数,0:没有倍数,经典抢庄,其余为抢庄倍数集合
     * </pre>
     */
    java.util.List<java.lang.Integer> getQiangZhuangNumList();
    /**
     * <code>repeated sint32 qiangZhuangNum = 3;</code>
     *
     * <pre>
     *玩家抢庄倍数,0:没有倍数,经典抢庄,其余为抢庄倍数集合
     * </pre>
     */
    int getQiangZhuangNumCount();
    /**
     * <code>repeated sint32 qiangZhuangNum = 3;</code>
     *
     * <pre>
     *玩家抢庄倍数,0:没有倍数,经典抢庄,其余为抢庄倍数集合
     * </pre>
     */
    int getQiangZhuangNum(int index);

    // repeated sint32 xiaZhuNum = 4;
    /**
     * <code>repeated sint32 xiaZhuNum = 4;</code>
     *
     * <pre>
     *可下注的筹码集合
     * </pre>
     */
    java.util.List<java.lang.Integer> getXiaZhuNumList();
    /**
     * <code>repeated sint32 xiaZhuNum = 4;</code>
     *
     * <pre>
     *可下注的筹码集合
     * </pre>
     */
    int getXiaZhuNumCount();
    /**
     * <code>repeated sint32 xiaZhuNum = 4;</code>
     *
     * <pre>
     *可下注的筹码集合
     * </pre>
     */
    int getXiaZhuNum(int index);

    // optional sint32 seq = 100;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    boolean hasSeq();
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    int getSeq();
  }
  /**
   * Protobuf type {@code packet.nn.NNGameOperPlayerActionNotify}
   *
   * <pre>
   *服务器提示玩家操作 operType=ACTNOTIFY
   * </pre>
   */
  public static final class NNGameOperPlayerActionNotify extends
      com.google.protobuf.GeneratedMessage
      implements NNGameOperPlayerActionNotifyOrBuilder {
    // Use NNGameOperPlayerActionNotify.newBuilder() to construct.
    private NNGameOperPlayerActionNotify(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NNGameOperPlayerActionNotify(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NNGameOperPlayerActionNotify defaultInstance;
    public static NNGameOperPlayerActionNotify getDefaultInstance() {
      return defaultInstance;
    }

    public NNGameOperPlayerActionNotify getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NNGameOperPlayerActionNotify(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              actions_ = input.readSInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                qiangZhuangNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              qiangZhuangNum_.add(input.readSInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                qiangZhuangNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                qiangZhuangNum_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                xiaZhuNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              xiaZhuNum_.add(input.readSInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                xiaZhuNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                xiaZhuNum_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 800: {
              bitField0_ |= 0x00000004;
              seq_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          qiangZhuangNum_ = java.util.Collections.unmodifiableList(qiangZhuangNum_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          xiaZhuNum_ = java.util.Collections.unmodifiableList(xiaZhuNum_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerActionNotify_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerActionNotify_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.nn.NN.NNGameOperPlayerActionNotify.class, packet.nn.NN.NNGameOperPlayerActionNotify.Builder.class);
    }

    public static com.google.protobuf.Parser<NNGameOperPlayerActionNotify> PARSER =
        new com.google.protobuf.AbstractParser<NNGameOperPlayerActionNotify>() {
      public NNGameOperPlayerActionNotify parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NNGameOperPlayerActionNotify(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NNGameOperPlayerActionNotify> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // required sint32 actions = 2;
    public static final int ACTIONS_FIELD_NUMBER = 2;
    private int actions_;
    /**
     * <code>required sint32 actions = 2;</code>
     *
     * <pre>
     *操作编码
     * </pre>
     */
    public boolean hasActions() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 actions = 2;</code>
     *
     * <pre>
     *操作编码
     * </pre>
     */
    public int getActions() {
      return actions_;
    }

    // repeated sint32 qiangZhuangNum = 3;
    public static final int QIANGZHUANGNUM_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> qiangZhuangNum_;
    /**
     * <code>repeated sint32 qiangZhuangNum = 3;</code>
     *
     * <pre>
     *玩家抢庄倍数,0:没有倍数,经典抢庄,其余为抢庄倍数集合
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getQiangZhuangNumList() {
      return qiangZhuangNum_;
    }
    /**
     * <code>repeated sint32 qiangZhuangNum = 3;</code>
     *
     * <pre>
     *玩家抢庄倍数,0:没有倍数,经典抢庄,其余为抢庄倍数集合
     * </pre>
     */
    public int getQiangZhuangNumCount() {
      return qiangZhuangNum_.size();
    }
    /**
     * <code>repeated sint32 qiangZhuangNum = 3;</code>
     *
     * <pre>
     *玩家抢庄倍数,0:没有倍数,经典抢庄,其余为抢庄倍数集合
     * </pre>
     */
    public int getQiangZhuangNum(int index) {
      return qiangZhuangNum_.get(index);
    }

    // repeated sint32 xiaZhuNum = 4;
    public static final int XIAZHUNUM_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> xiaZhuNum_;
    /**
     * <code>repeated sint32 xiaZhuNum = 4;</code>
     *
     * <pre>
     *可下注的筹码集合
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getXiaZhuNumList() {
      return xiaZhuNum_;
    }
    /**
     * <code>repeated sint32 xiaZhuNum = 4;</code>
     *
     * <pre>
     *可下注的筹码集合
     * </pre>
     */
    public int getXiaZhuNumCount() {
      return xiaZhuNum_.size();
    }
    /**
     * <code>repeated sint32 xiaZhuNum = 4;</code>
     *
     * <pre>
     *可下注的筹码集合
     * </pre>
     */
    public int getXiaZhuNum(int index) {
      return xiaZhuNum_.get(index);
    }

    // optional sint32 seq = 100;
    public static final int SEQ_FIELD_NUMBER = 100;
    private int seq_;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    public boolean hasSeq() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    public int getSeq() {
      return seq_;
    }

    private void initFields() {
      position_ = 0;
      actions_ = 0;
      qiangZhuangNum_ = java.util.Collections.emptyList();
      xiaZhuNum_ = java.util.Collections.emptyList();
      seq_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasActions()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, actions_);
      }
      for (int i = 0; i < qiangZhuangNum_.size(); i++) {
        output.writeSInt32(3, qiangZhuangNum_.get(i));
      }
      for (int i = 0; i < xiaZhuNum_.size(); i++) {
        output.writeSInt32(4, xiaZhuNum_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(100, seq_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, actions_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < qiangZhuangNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(qiangZhuangNum_.get(i));
        }
        size += dataSize;
        size += 1 * getQiangZhuangNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < xiaZhuNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(xiaZhuNum_.get(i));
        }
        size += dataSize;
        size += 1 * getXiaZhuNumList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(100, seq_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.nn.NN.NNGameOperPlayerActionNotify parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperPlayerActionNotify parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerActionNotify parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperPlayerActionNotify parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerActionNotify parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperPlayerActionNotify parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerActionNotify parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.nn.NN.NNGameOperPlayerActionNotify parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerActionNotify parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperPlayerActionNotify parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.nn.NN.NNGameOperPlayerActionNotify prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.nn.NNGameOperPlayerActionNotify}
     *
     * <pre>
     *服务器提示玩家操作 operType=ACTNOTIFY
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.nn.NN.NNGameOperPlayerActionNotifyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerActionNotify_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerActionNotify_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.nn.NN.NNGameOperPlayerActionNotify.class, packet.nn.NN.NNGameOperPlayerActionNotify.Builder.class);
      }

      // Construct using packet.nn.NN.NNGameOperPlayerActionNotify.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        actions_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        qiangZhuangNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        xiaZhuNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        seq_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerActionNotify_descriptor;
      }

      public packet.nn.NN.NNGameOperPlayerActionNotify getDefaultInstanceForType() {
        return packet.nn.NN.NNGameOperPlayerActionNotify.getDefaultInstance();
      }

      public packet.nn.NN.NNGameOperPlayerActionNotify build() {
        packet.nn.NN.NNGameOperPlayerActionNotify result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.nn.NN.NNGameOperPlayerActionNotify buildPartial() {
        packet.nn.NN.NNGameOperPlayerActionNotify result = new packet.nn.NN.NNGameOperPlayerActionNotify(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.actions_ = actions_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          qiangZhuangNum_ = java.util.Collections.unmodifiableList(qiangZhuangNum_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.qiangZhuangNum_ = qiangZhuangNum_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          xiaZhuNum_ = java.util.Collections.unmodifiableList(xiaZhuNum_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.xiaZhuNum_ = xiaZhuNum_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.seq_ = seq_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.nn.NN.NNGameOperPlayerActionNotify) {
          return mergeFrom((packet.nn.NN.NNGameOperPlayerActionNotify)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.nn.NN.NNGameOperPlayerActionNotify other) {
        if (other == packet.nn.NN.NNGameOperPlayerActionNotify.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasActions()) {
          setActions(other.getActions());
        }
        if (!other.qiangZhuangNum_.isEmpty()) {
          if (qiangZhuangNum_.isEmpty()) {
            qiangZhuangNum_ = other.qiangZhuangNum_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureQiangZhuangNumIsMutable();
            qiangZhuangNum_.addAll(other.qiangZhuangNum_);
          }
          onChanged();
        }
        if (!other.xiaZhuNum_.isEmpty()) {
          if (xiaZhuNum_.isEmpty()) {
            xiaZhuNum_ = other.xiaZhuNum_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureXiaZhuNumIsMutable();
            xiaZhuNum_.addAll(other.xiaZhuNum_);
          }
          onChanged();
        }
        if (other.hasSeq()) {
          setSeq(other.getSeq());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasActions()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.nn.NN.NNGameOperPlayerActionNotify parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.nn.NN.NNGameOperPlayerActionNotify) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // required sint32 actions = 2;
      private int actions_ ;
      /**
       * <code>required sint32 actions = 2;</code>
       *
       * <pre>
       *操作编码
       * </pre>
       */
      public boolean hasActions() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 actions = 2;</code>
       *
       * <pre>
       *操作编码
       * </pre>
       */
      public int getActions() {
        return actions_;
      }
      /**
       * <code>required sint32 actions = 2;</code>
       *
       * <pre>
       *操作编码
       * </pre>
       */
      public Builder setActions(int value) {
        bitField0_ |= 0x00000002;
        actions_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 actions = 2;</code>
       *
       * <pre>
       *操作编码
       * </pre>
       */
      public Builder clearActions() {
        bitField0_ = (bitField0_ & ~0x00000002);
        actions_ = 0;
        onChanged();
        return this;
      }

      // repeated sint32 qiangZhuangNum = 3;
      private java.util.List<java.lang.Integer> qiangZhuangNum_ = java.util.Collections.emptyList();
      private void ensureQiangZhuangNumIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          qiangZhuangNum_ = new java.util.ArrayList<java.lang.Integer>(qiangZhuangNum_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated sint32 qiangZhuangNum = 3;</code>
       *
       * <pre>
       *玩家抢庄倍数,0:没有倍数,经典抢庄,其余为抢庄倍数集合
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getQiangZhuangNumList() {
        return java.util.Collections.unmodifiableList(qiangZhuangNum_);
      }
      /**
       * <code>repeated sint32 qiangZhuangNum = 3;</code>
       *
       * <pre>
       *玩家抢庄倍数,0:没有倍数,经典抢庄,其余为抢庄倍数集合
       * </pre>
       */
      public int getQiangZhuangNumCount() {
        return qiangZhuangNum_.size();
      }
      /**
       * <code>repeated sint32 qiangZhuangNum = 3;</code>
       *
       * <pre>
       *玩家抢庄倍数,0:没有倍数,经典抢庄,其余为抢庄倍数集合
       * </pre>
       */
      public int getQiangZhuangNum(int index) {
        return qiangZhuangNum_.get(index);
      }
      /**
       * <code>repeated sint32 qiangZhuangNum = 3;</code>
       *
       * <pre>
       *玩家抢庄倍数,0:没有倍数,经典抢庄,其余为抢庄倍数集合
       * </pre>
       */
      public Builder setQiangZhuangNum(
          int index, int value) {
        ensureQiangZhuangNumIsMutable();
        qiangZhuangNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 qiangZhuangNum = 3;</code>
       *
       * <pre>
       *玩家抢庄倍数,0:没有倍数,经典抢庄,其余为抢庄倍数集合
       * </pre>
       */
      public Builder addQiangZhuangNum(int value) {
        ensureQiangZhuangNumIsMutable();
        qiangZhuangNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 qiangZhuangNum = 3;</code>
       *
       * <pre>
       *玩家抢庄倍数,0:没有倍数,经典抢庄,其余为抢庄倍数集合
       * </pre>
       */
      public Builder addAllQiangZhuangNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureQiangZhuangNumIsMutable();
        super.addAll(values, qiangZhuangNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 qiangZhuangNum = 3;</code>
       *
       * <pre>
       *玩家抢庄倍数,0:没有倍数,经典抢庄,其余为抢庄倍数集合
       * </pre>
       */
      public Builder clearQiangZhuangNum() {
        qiangZhuangNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated sint32 xiaZhuNum = 4;
      private java.util.List<java.lang.Integer> xiaZhuNum_ = java.util.Collections.emptyList();
      private void ensureXiaZhuNumIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          xiaZhuNum_ = new java.util.ArrayList<java.lang.Integer>(xiaZhuNum_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated sint32 xiaZhuNum = 4;</code>
       *
       * <pre>
       *可下注的筹码集合
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getXiaZhuNumList() {
        return java.util.Collections.unmodifiableList(xiaZhuNum_);
      }
      /**
       * <code>repeated sint32 xiaZhuNum = 4;</code>
       *
       * <pre>
       *可下注的筹码集合
       * </pre>
       */
      public int getXiaZhuNumCount() {
        return xiaZhuNum_.size();
      }
      /**
       * <code>repeated sint32 xiaZhuNum = 4;</code>
       *
       * <pre>
       *可下注的筹码集合
       * </pre>
       */
      public int getXiaZhuNum(int index) {
        return xiaZhuNum_.get(index);
      }
      /**
       * <code>repeated sint32 xiaZhuNum = 4;</code>
       *
       * <pre>
       *可下注的筹码集合
       * </pre>
       */
      public Builder setXiaZhuNum(
          int index, int value) {
        ensureXiaZhuNumIsMutable();
        xiaZhuNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 xiaZhuNum = 4;</code>
       *
       * <pre>
       *可下注的筹码集合
       * </pre>
       */
      public Builder addXiaZhuNum(int value) {
        ensureXiaZhuNumIsMutable();
        xiaZhuNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 xiaZhuNum = 4;</code>
       *
       * <pre>
       *可下注的筹码集合
       * </pre>
       */
      public Builder addAllXiaZhuNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureXiaZhuNumIsMutable();
        super.addAll(values, xiaZhuNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 xiaZhuNum = 4;</code>
       *
       * <pre>
       *可下注的筹码集合
       * </pre>
       */
      public Builder clearXiaZhuNum() {
        xiaZhuNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional sint32 seq = 100;
      private int seq_ ;
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public boolean hasSeq() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public int getSeq() {
        return seq_;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public Builder setSeq(int value) {
        bitField0_ |= 0x00000010;
        seq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public Builder clearSeq() {
        bitField0_ = (bitField0_ & ~0x00000010);
        seq_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.nn.NNGameOperPlayerActionNotify)
    }

    static {
      defaultInstance = new NNGameOperPlayerActionNotify(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.nn.NNGameOperPlayerActionNotify)
  }

  public interface NNGameOperPlayerHuSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *胡牌玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *胡牌玩家位置
     * </pre>
     */
    int getPosition();

    // repeated .packet.nn.NNGameOperPlayerSettle detail = 2;
    /**
     * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    java.util.List<packet.nn.NN.NNGameOperPlayerSettle> 
        getDetailList();
    /**
     * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    packet.nn.NN.NNGameOperPlayerSettle getDetail(int index);
    /**
     * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    int getDetailCount();
    /**
     * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    java.util.List<? extends packet.nn.NN.NNGameOperPlayerSettleOrBuilder> 
        getDetailOrBuilderList();
    /**
     * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    packet.nn.NN.NNGameOperPlayerSettleOrBuilder getDetailOrBuilder(
        int index);

    // optional sint32 juNum = 3;
    /**
     * <code>optional sint32 juNum = 3;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    boolean hasJuNum();
    /**
     * <code>optional sint32 juNum = 3;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    int getJuNum();
  }
  /**
   * Protobuf type {@code packet.nn.NNGameOperPlayerHuSyn}
   */
  public static final class NNGameOperPlayerHuSyn extends
      com.google.protobuf.GeneratedMessage
      implements NNGameOperPlayerHuSynOrBuilder {
    // Use NNGameOperPlayerHuSyn.newBuilder() to construct.
    private NNGameOperPlayerHuSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NNGameOperPlayerHuSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NNGameOperPlayerHuSyn defaultInstance;
    public static NNGameOperPlayerHuSyn getDefaultInstance() {
      return defaultInstance;
    }

    public NNGameOperPlayerHuSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NNGameOperPlayerHuSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                detail_ = new java.util.ArrayList<packet.nn.NN.NNGameOperPlayerSettle>();
                mutable_bitField0_ |= 0x00000002;
              }
              detail_.add(input.readMessage(packet.nn.NN.NNGameOperPlayerSettle.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              juNum_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          detail_ = java.util.Collections.unmodifiableList(detail_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerHuSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerHuSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.nn.NN.NNGameOperPlayerHuSyn.class, packet.nn.NN.NNGameOperPlayerHuSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<NNGameOperPlayerHuSyn> PARSER =
        new com.google.protobuf.AbstractParser<NNGameOperPlayerHuSyn>() {
      public NNGameOperPlayerHuSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NNGameOperPlayerHuSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NNGameOperPlayerHuSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *胡牌玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *胡牌玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // repeated .packet.nn.NNGameOperPlayerSettle detail = 2;
    public static final int DETAIL_FIELD_NUMBER = 2;
    private java.util.List<packet.nn.NN.NNGameOperPlayerSettle> detail_;
    /**
     * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    public java.util.List<packet.nn.NN.NNGameOperPlayerSettle> getDetailList() {
      return detail_;
    }
    /**
     * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    public java.util.List<? extends packet.nn.NN.NNGameOperPlayerSettleOrBuilder> 
        getDetailOrBuilderList() {
      return detail_;
    }
    /**
     * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    public int getDetailCount() {
      return detail_.size();
    }
    /**
     * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    public packet.nn.NN.NNGameOperPlayerSettle getDetail(int index) {
      return detail_.get(index);
    }
    /**
     * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    public packet.nn.NN.NNGameOperPlayerSettleOrBuilder getDetailOrBuilder(
        int index) {
      return detail_.get(index);
    }

    // optional sint32 juNum = 3;
    public static final int JUNUM_FIELD_NUMBER = 3;
    private int juNum_;
    /**
     * <code>optional sint32 juNum = 3;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    public boolean hasJuNum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 juNum = 3;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    public int getJuNum() {
      return juNum_;
    }

    private void initFields() {
      position_ = 0;
      detail_ = java.util.Collections.emptyList();
      juNum_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getDetailCount(); i++) {
        if (!getDetail(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      for (int i = 0; i < detail_.size(); i++) {
        output.writeMessage(2, detail_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(3, juNum_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      for (int i = 0; i < detail_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, detail_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, juNum_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.nn.NN.NNGameOperPlayerHuSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperPlayerHuSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerHuSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperPlayerHuSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerHuSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperPlayerHuSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerHuSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.nn.NN.NNGameOperPlayerHuSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerHuSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperPlayerHuSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.nn.NN.NNGameOperPlayerHuSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.nn.NNGameOperPlayerHuSyn}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.nn.NN.NNGameOperPlayerHuSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerHuSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerHuSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.nn.NN.NNGameOperPlayerHuSyn.class, packet.nn.NN.NNGameOperPlayerHuSyn.Builder.class);
      }

      // Construct using packet.nn.NN.NNGameOperPlayerHuSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDetailFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (detailBuilder_ == null) {
          detail_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          detailBuilder_.clear();
        }
        juNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerHuSyn_descriptor;
      }

      public packet.nn.NN.NNGameOperPlayerHuSyn getDefaultInstanceForType() {
        return packet.nn.NN.NNGameOperPlayerHuSyn.getDefaultInstance();
      }

      public packet.nn.NN.NNGameOperPlayerHuSyn build() {
        packet.nn.NN.NNGameOperPlayerHuSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.nn.NN.NNGameOperPlayerHuSyn buildPartial() {
        packet.nn.NN.NNGameOperPlayerHuSyn result = new packet.nn.NN.NNGameOperPlayerHuSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (detailBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            detail_ = java.util.Collections.unmodifiableList(detail_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.detail_ = detail_;
        } else {
          result.detail_ = detailBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.juNum_ = juNum_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.nn.NN.NNGameOperPlayerHuSyn) {
          return mergeFrom((packet.nn.NN.NNGameOperPlayerHuSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.nn.NN.NNGameOperPlayerHuSyn other) {
        if (other == packet.nn.NN.NNGameOperPlayerHuSyn.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (detailBuilder_ == null) {
          if (!other.detail_.isEmpty()) {
            if (detail_.isEmpty()) {
              detail_ = other.detail_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureDetailIsMutable();
              detail_.addAll(other.detail_);
            }
            onChanged();
          }
        } else {
          if (!other.detail_.isEmpty()) {
            if (detailBuilder_.isEmpty()) {
              detailBuilder_.dispose();
              detailBuilder_ = null;
              detail_ = other.detail_;
              bitField0_ = (bitField0_ & ~0x00000002);
              detailBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDetailFieldBuilder() : null;
            } else {
              detailBuilder_.addAllMessages(other.detail_);
            }
          }
        }
        if (other.hasJuNum()) {
          setJuNum(other.getJuNum());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        for (int i = 0; i < getDetailCount(); i++) {
          if (!getDetail(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.nn.NN.NNGameOperPlayerHuSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.nn.NN.NNGameOperPlayerHuSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *胡牌玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *胡牌玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *胡牌玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *胡牌玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // repeated .packet.nn.NNGameOperPlayerSettle detail = 2;
      private java.util.List<packet.nn.NN.NNGameOperPlayerSettle> detail_ =
        java.util.Collections.emptyList();
      private void ensureDetailIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          detail_ = new java.util.ArrayList<packet.nn.NN.NNGameOperPlayerSettle>(detail_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.nn.NN.NNGameOperPlayerSettle, packet.nn.NN.NNGameOperPlayerSettle.Builder, packet.nn.NN.NNGameOperPlayerSettleOrBuilder> detailBuilder_;

      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public java.util.List<packet.nn.NN.NNGameOperPlayerSettle> getDetailList() {
        if (detailBuilder_ == null) {
          return java.util.Collections.unmodifiableList(detail_);
        } else {
          return detailBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public int getDetailCount() {
        if (detailBuilder_ == null) {
          return detail_.size();
        } else {
          return detailBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public packet.nn.NN.NNGameOperPlayerSettle getDetail(int index) {
        if (detailBuilder_ == null) {
          return detail_.get(index);
        } else {
          return detailBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder setDetail(
          int index, packet.nn.NN.NNGameOperPlayerSettle value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.set(index, value);
          onChanged();
        } else {
          detailBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder setDetail(
          int index, packet.nn.NN.NNGameOperPlayerSettle.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.set(index, builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder addDetail(packet.nn.NN.NNGameOperPlayerSettle value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.add(value);
          onChanged();
        } else {
          detailBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder addDetail(
          int index, packet.nn.NN.NNGameOperPlayerSettle value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.add(index, value);
          onChanged();
        } else {
          detailBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder addDetail(
          packet.nn.NN.NNGameOperPlayerSettle.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.add(builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder addDetail(
          int index, packet.nn.NN.NNGameOperPlayerSettle.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.add(index, builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder addAllDetail(
          java.lang.Iterable<? extends packet.nn.NN.NNGameOperPlayerSettle> values) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          super.addAll(values, detail_);
          onChanged();
        } else {
          detailBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder clearDetail() {
        if (detailBuilder_ == null) {
          detail_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          detailBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder removeDetail(int index) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.remove(index);
          onChanged();
        } else {
          detailBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public packet.nn.NN.NNGameOperPlayerSettle.Builder getDetailBuilder(
          int index) {
        return getDetailFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public packet.nn.NN.NNGameOperPlayerSettleOrBuilder getDetailOrBuilder(
          int index) {
        if (detailBuilder_ == null) {
          return detail_.get(index);  } else {
          return detailBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public java.util.List<? extends packet.nn.NN.NNGameOperPlayerSettleOrBuilder> 
           getDetailOrBuilderList() {
        if (detailBuilder_ != null) {
          return detailBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(detail_);
        }
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public packet.nn.NN.NNGameOperPlayerSettle.Builder addDetailBuilder() {
        return getDetailFieldBuilder().addBuilder(
            packet.nn.NN.NNGameOperPlayerSettle.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public packet.nn.NN.NNGameOperPlayerSettle.Builder addDetailBuilder(
          int index) {
        return getDetailFieldBuilder().addBuilder(
            index, packet.nn.NN.NNGameOperPlayerSettle.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.nn.NNGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public java.util.List<packet.nn.NN.NNGameOperPlayerSettle.Builder> 
           getDetailBuilderList() {
        return getDetailFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.nn.NN.NNGameOperPlayerSettle, packet.nn.NN.NNGameOperPlayerSettle.Builder, packet.nn.NN.NNGameOperPlayerSettleOrBuilder> 
          getDetailFieldBuilder() {
        if (detailBuilder_ == null) {
          detailBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.nn.NN.NNGameOperPlayerSettle, packet.nn.NN.NNGameOperPlayerSettle.Builder, packet.nn.NN.NNGameOperPlayerSettleOrBuilder>(
                  detail_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          detail_ = null;
        }
        return detailBuilder_;
      }

      // optional sint32 juNum = 3;
      private int juNum_ ;
      /**
       * <code>optional sint32 juNum = 3;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public boolean hasJuNum() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 juNum = 3;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public int getJuNum() {
        return juNum_;
      }
      /**
       * <code>optional sint32 juNum = 3;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public Builder setJuNum(int value) {
        bitField0_ |= 0x00000004;
        juNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 juNum = 3;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public Builder clearJuNum() {
        bitField0_ = (bitField0_ & ~0x00000004);
        juNum_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.nn.NNGameOperPlayerHuSyn)
    }

    static {
      defaultInstance = new NNGameOperPlayerHuSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.nn.NNGameOperPlayerHuSyn)
  }

  public interface NNGameOperPlayerSettleOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    int getPosition();

    // optional sint32 playerId = 2;
    /**
     * <code>optional sint32 playerId = 2;</code>
     *
     * <pre>
     *ID
     * </pre>
     */
    boolean hasPlayerId();
    /**
     * <code>optional sint32 playerId = 2;</code>
     *
     * <pre>
     *ID
     * </pre>
     */
    int getPlayerId();

    // optional string playerName = 3;
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    boolean hasPlayerName();
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    java.lang.String getPlayerName();
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    com.google.protobuf.ByteString
        getPlayerNameBytes();

    // repeated sint32 handcard = 4;
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandcardList();
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    int getHandcardCount();
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    int getHandcard(int index);

    // optional sint32 lastScore = 5;
    /**
     * <code>optional sint32 lastScore = 5;</code>
     *
     * <pre>
     *上局得分
     * </pre>
     */
    boolean hasLastScore();
    /**
     * <code>optional sint32 lastScore = 5;</code>
     *
     * <pre>
     *上局得分
     * </pre>
     */
    int getLastScore();

    // optional sint32 score = 6;
    /**
     * <code>optional sint32 score = 6;</code>
     *
     * <pre>
     *本局得分
     * </pre>
     */
    boolean hasScore();
    /**
     * <code>optional sint32 score = 6;</code>
     *
     * <pre>
     *本局得分
     * </pre>
     */
    int getScore();

    // optional sint32 allSocre = 7;
    /**
     * <code>optional sint32 allSocre = 7;</code>
     *
     * <pre>
     *总分数
     * </pre>
     */
    boolean hasAllSocre();
    /**
     * <code>optional sint32 allSocre = 7;</code>
     *
     * <pre>
     *总分数
     * </pre>
     */
    int getAllSocre();

    // optional string cardType = 8;
    /**
     * <code>optional string cardType = 8;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional string cardType = 8;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    java.lang.String getCardType();
    /**
     * <code>optional string cardType = 8;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    com.google.protobuf.ByteString
        getCardTypeBytes();

    // optional sint32 isBanker = 9;
    /**
     * <code>optional sint32 isBanker = 9;</code>
     *
     * <pre>
     *是否是庄家
     * </pre>
     */
    boolean hasIsBanker();
    /**
     * <code>optional sint32 isBanker = 9;</code>
     *
     * <pre>
     *是否是庄家
     * </pre>
     */
    int getIsBanker();

    // optional sint32 result = 10;
    /**
     * <code>optional sint32 result = 10;</code>
     *
     * <pre>
     * 1 win 2 lose 3 even
     * </pre>
     */
    boolean hasResult();
    /**
     * <code>optional sint32 result = 10;</code>
     *
     * <pre>
     * 1 win 2 lose 3 even
     * </pre>
     */
    int getResult();
  }
  /**
   * Protobuf type {@code packet.nn.NNGameOperPlayerSettle}
   */
  public static final class NNGameOperPlayerSettle extends
      com.google.protobuf.GeneratedMessage
      implements NNGameOperPlayerSettleOrBuilder {
    // Use NNGameOperPlayerSettle.newBuilder() to construct.
    private NNGameOperPlayerSettle(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NNGameOperPlayerSettle(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NNGameOperPlayerSettle defaultInstance;
    public static NNGameOperPlayerSettle getDefaultInstance() {
      return defaultInstance;
    }

    public NNGameOperPlayerSettle getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NNGameOperPlayerSettle(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              playerId_ = input.readSInt32();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              playerName_ = input.readBytes();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                handcard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              handcard_.add(input.readSInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                handcard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                handcard_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              lastScore_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              score_ = input.readSInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              allSocre_ = input.readSInt32();
              break;
            }
            case 66: {
              bitField0_ |= 0x00000040;
              cardType_ = input.readBytes();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000080;
              isBanker_ = input.readSInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              result_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          handcard_ = java.util.Collections.unmodifiableList(handcard_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerSettle_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerSettle_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.nn.NN.NNGameOperPlayerSettle.class, packet.nn.NN.NNGameOperPlayerSettle.Builder.class);
    }

    public static com.google.protobuf.Parser<NNGameOperPlayerSettle> PARSER =
        new com.google.protobuf.AbstractParser<NNGameOperPlayerSettle>() {
      public NNGameOperPlayerSettle parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NNGameOperPlayerSettle(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NNGameOperPlayerSettle> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // optional sint32 playerId = 2;
    public static final int PLAYERID_FIELD_NUMBER = 2;
    private int playerId_;
    /**
     * <code>optional sint32 playerId = 2;</code>
     *
     * <pre>
     *ID
     * </pre>
     */
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 playerId = 2;</code>
     *
     * <pre>
     *ID
     * </pre>
     */
    public int getPlayerId() {
      return playerId_;
    }

    // optional string playerName = 3;
    public static final int PLAYERNAME_FIELD_NUMBER = 3;
    private java.lang.Object playerName_;
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    public boolean hasPlayerName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    public java.lang.String getPlayerName() {
      java.lang.Object ref = playerName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          playerName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPlayerNameBytes() {
      java.lang.Object ref = playerName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        playerName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated sint32 handcard = 4;
    public static final int HANDCARD_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> handcard_;
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandcardList() {
      return handcard_;
    }
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    public int getHandcardCount() {
      return handcard_.size();
    }
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    public int getHandcard(int index) {
      return handcard_.get(index);
    }

    // optional sint32 lastScore = 5;
    public static final int LASTSCORE_FIELD_NUMBER = 5;
    private int lastScore_;
    /**
     * <code>optional sint32 lastScore = 5;</code>
     *
     * <pre>
     *上局得分
     * </pre>
     */
    public boolean hasLastScore() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 lastScore = 5;</code>
     *
     * <pre>
     *上局得分
     * </pre>
     */
    public int getLastScore() {
      return lastScore_;
    }

    // optional sint32 score = 6;
    public static final int SCORE_FIELD_NUMBER = 6;
    private int score_;
    /**
     * <code>optional sint32 score = 6;</code>
     *
     * <pre>
     *本局得分
     * </pre>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 score = 6;</code>
     *
     * <pre>
     *本局得分
     * </pre>
     */
    public int getScore() {
      return score_;
    }

    // optional sint32 allSocre = 7;
    public static final int ALLSOCRE_FIELD_NUMBER = 7;
    private int allSocre_;
    /**
     * <code>optional sint32 allSocre = 7;</code>
     *
     * <pre>
     *总分数
     * </pre>
     */
    public boolean hasAllSocre() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 allSocre = 7;</code>
     *
     * <pre>
     *总分数
     * </pre>
     */
    public int getAllSocre() {
      return allSocre_;
    }

    // optional string cardType = 8;
    public static final int CARDTYPE_FIELD_NUMBER = 8;
    private java.lang.Object cardType_;
    /**
     * <code>optional string cardType = 8;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional string cardType = 8;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public java.lang.String getCardType() {
      java.lang.Object ref = cardType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          cardType_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string cardType = 8;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCardTypeBytes() {
      java.lang.Object ref = cardType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        cardType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional sint32 isBanker = 9;
    public static final int ISBANKER_FIELD_NUMBER = 9;
    private int isBanker_;
    /**
     * <code>optional sint32 isBanker = 9;</code>
     *
     * <pre>
     *是否是庄家
     * </pre>
     */
    public boolean hasIsBanker() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional sint32 isBanker = 9;</code>
     *
     * <pre>
     *是否是庄家
     * </pre>
     */
    public int getIsBanker() {
      return isBanker_;
    }

    // optional sint32 result = 10;
    public static final int RESULT_FIELD_NUMBER = 10;
    private int result_;
    /**
     * <code>optional sint32 result = 10;</code>
     *
     * <pre>
     * 1 win 2 lose 3 even
     * </pre>
     */
    public boolean hasResult() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional sint32 result = 10;</code>
     *
     * <pre>
     * 1 win 2 lose 3 even
     * </pre>
     */
    public int getResult() {
      return result_;
    }

    private void initFields() {
      position_ = 0;
      playerId_ = 0;
      playerName_ = "";
      handcard_ = java.util.Collections.emptyList();
      lastScore_ = 0;
      score_ = 0;
      allSocre_ = 0;
      cardType_ = "";
      isBanker_ = 0;
      result_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, playerId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getPlayerNameBytes());
      }
      for (int i = 0; i < handcard_.size(); i++) {
        output.writeSInt32(4, handcard_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(5, lastScore_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(6, score_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(7, allSocre_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(8, getCardTypeBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeSInt32(9, isBanker_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeSInt32(10, result_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, playerId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getPlayerNameBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handcard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(handcard_.get(i));
        }
        size += dataSize;
        size += 1 * getHandcardList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, lastScore_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, score_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, allSocre_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getCardTypeBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(9, isBanker_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(10, result_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.nn.NN.NNGameOperPlayerSettle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperPlayerSettle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerSettle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperPlayerSettle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerSettle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperPlayerSettle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerSettle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.nn.NN.NNGameOperPlayerSettle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperPlayerSettle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperPlayerSettle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.nn.NN.NNGameOperPlayerSettle prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.nn.NNGameOperPlayerSettle}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.nn.NN.NNGameOperPlayerSettleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerSettle_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerSettle_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.nn.NN.NNGameOperPlayerSettle.class, packet.nn.NN.NNGameOperPlayerSettle.Builder.class);
      }

      // Construct using packet.nn.NN.NNGameOperPlayerSettle.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        playerId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        playerName_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        handcard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        lastScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        score_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        allSocre_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        cardType_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        isBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        result_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperPlayerSettle_descriptor;
      }

      public packet.nn.NN.NNGameOperPlayerSettle getDefaultInstanceForType() {
        return packet.nn.NN.NNGameOperPlayerSettle.getDefaultInstance();
      }

      public packet.nn.NN.NNGameOperPlayerSettle build() {
        packet.nn.NN.NNGameOperPlayerSettle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.nn.NN.NNGameOperPlayerSettle buildPartial() {
        packet.nn.NN.NNGameOperPlayerSettle result = new packet.nn.NN.NNGameOperPlayerSettle(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.playerId_ = playerId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.playerName_ = playerName_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          handcard_ = java.util.Collections.unmodifiableList(handcard_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.handcard_ = handcard_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.lastScore_ = lastScore_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.allSocre_ = allSocre_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.isBanker_ = isBanker_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.result_ = result_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.nn.NN.NNGameOperPlayerSettle) {
          return mergeFrom((packet.nn.NN.NNGameOperPlayerSettle)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.nn.NN.NNGameOperPlayerSettle other) {
        if (other == packet.nn.NN.NNGameOperPlayerSettle.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasPlayerId()) {
          setPlayerId(other.getPlayerId());
        }
        if (other.hasPlayerName()) {
          bitField0_ |= 0x00000004;
          playerName_ = other.playerName_;
          onChanged();
        }
        if (!other.handcard_.isEmpty()) {
          if (handcard_.isEmpty()) {
            handcard_ = other.handcard_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureHandcardIsMutable();
            handcard_.addAll(other.handcard_);
          }
          onChanged();
        }
        if (other.hasLastScore()) {
          setLastScore(other.getLastScore());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (other.hasAllSocre()) {
          setAllSocre(other.getAllSocre());
        }
        if (other.hasCardType()) {
          bitField0_ |= 0x00000080;
          cardType_ = other.cardType_;
          onChanged();
        }
        if (other.hasIsBanker()) {
          setIsBanker(other.getIsBanker());
        }
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.nn.NN.NNGameOperPlayerSettle parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.nn.NN.NNGameOperPlayerSettle) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 playerId = 2;
      private int playerId_ ;
      /**
       * <code>optional sint32 playerId = 2;</code>
       *
       * <pre>
       *ID
       * </pre>
       */
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 playerId = 2;</code>
       *
       * <pre>
       *ID
       * </pre>
       */
      public int getPlayerId() {
        return playerId_;
      }
      /**
       * <code>optional sint32 playerId = 2;</code>
       *
       * <pre>
       *ID
       * </pre>
       */
      public Builder setPlayerId(int value) {
        bitField0_ |= 0x00000002;
        playerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 playerId = 2;</code>
       *
       * <pre>
       *ID
       * </pre>
       */
      public Builder clearPlayerId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        playerId_ = 0;
        onChanged();
        return this;
      }

      // optional string playerName = 3;
      private java.lang.Object playerName_ = "";
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public boolean hasPlayerName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public java.lang.String getPlayerName() {
        java.lang.Object ref = playerName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          playerName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPlayerNameBytes() {
        java.lang.Object ref = playerName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          playerName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public Builder setPlayerName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        playerName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public Builder clearPlayerName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        playerName_ = getDefaultInstance().getPlayerName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public Builder setPlayerNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        playerName_ = value;
        onChanged();
        return this;
      }

      // repeated sint32 handcard = 4;
      private java.util.List<java.lang.Integer> handcard_ = java.util.Collections.emptyList();
      private void ensureHandcardIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          handcard_ = new java.util.ArrayList<java.lang.Integer>(handcard_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandcardList() {
        return java.util.Collections.unmodifiableList(handcard_);
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public int getHandcardCount() {
        return handcard_.size();
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public int getHandcard(int index) {
        return handcard_.get(index);
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder setHandcard(
          int index, int value) {
        ensureHandcardIsMutable();
        handcard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder addHandcard(int value) {
        ensureHandcardIsMutable();
        handcard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder addAllHandcard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandcardIsMutable();
        super.addAll(values, handcard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder clearHandcard() {
        handcard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional sint32 lastScore = 5;
      private int lastScore_ ;
      /**
       * <code>optional sint32 lastScore = 5;</code>
       *
       * <pre>
       *上局得分
       * </pre>
       */
      public boolean hasLastScore() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 lastScore = 5;</code>
       *
       * <pre>
       *上局得分
       * </pre>
       */
      public int getLastScore() {
        return lastScore_;
      }
      /**
       * <code>optional sint32 lastScore = 5;</code>
       *
       * <pre>
       *上局得分
       * </pre>
       */
      public Builder setLastScore(int value) {
        bitField0_ |= 0x00000010;
        lastScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 lastScore = 5;</code>
       *
       * <pre>
       *上局得分
       * </pre>
       */
      public Builder clearLastScore() {
        bitField0_ = (bitField0_ & ~0x00000010);
        lastScore_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 score = 6;
      private int score_ ;
      /**
       * <code>optional sint32 score = 6;</code>
       *
       * <pre>
       *本局得分
       * </pre>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 score = 6;</code>
       *
       * <pre>
       *本局得分
       * </pre>
       */
      public int getScore() {
        return score_;
      }
      /**
       * <code>optional sint32 score = 6;</code>
       *
       * <pre>
       *本局得分
       * </pre>
       */
      public Builder setScore(int value) {
        bitField0_ |= 0x00000020;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 score = 6;</code>
       *
       * <pre>
       *本局得分
       * </pre>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000020);
        score_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 allSocre = 7;
      private int allSocre_ ;
      /**
       * <code>optional sint32 allSocre = 7;</code>
       *
       * <pre>
       *总分数
       * </pre>
       */
      public boolean hasAllSocre() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional sint32 allSocre = 7;</code>
       *
       * <pre>
       *总分数
       * </pre>
       */
      public int getAllSocre() {
        return allSocre_;
      }
      /**
       * <code>optional sint32 allSocre = 7;</code>
       *
       * <pre>
       *总分数
       * </pre>
       */
      public Builder setAllSocre(int value) {
        bitField0_ |= 0x00000040;
        allSocre_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 allSocre = 7;</code>
       *
       * <pre>
       *总分数
       * </pre>
       */
      public Builder clearAllSocre() {
        bitField0_ = (bitField0_ & ~0x00000040);
        allSocre_ = 0;
        onChanged();
        return this;
      }

      // optional string cardType = 8;
      private java.lang.Object cardType_ = "";
      /**
       * <code>optional string cardType = 8;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional string cardType = 8;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public java.lang.String getCardType() {
        java.lang.Object ref = cardType_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          cardType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string cardType = 8;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCardTypeBytes() {
        java.lang.Object ref = cardType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          cardType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string cardType = 8;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder setCardType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string cardType = 8;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000080);
        cardType_ = getDefaultInstance().getCardType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string cardType = 8;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder setCardTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        cardType_ = value;
        onChanged();
        return this;
      }

      // optional sint32 isBanker = 9;
      private int isBanker_ ;
      /**
       * <code>optional sint32 isBanker = 9;</code>
       *
       * <pre>
       *是否是庄家
       * </pre>
       */
      public boolean hasIsBanker() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional sint32 isBanker = 9;</code>
       *
       * <pre>
       *是否是庄家
       * </pre>
       */
      public int getIsBanker() {
        return isBanker_;
      }
      /**
       * <code>optional sint32 isBanker = 9;</code>
       *
       * <pre>
       *是否是庄家
       * </pre>
       */
      public Builder setIsBanker(int value) {
        bitField0_ |= 0x00000100;
        isBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 isBanker = 9;</code>
       *
       * <pre>
       *是否是庄家
       * </pre>
       */
      public Builder clearIsBanker() {
        bitField0_ = (bitField0_ & ~0x00000100);
        isBanker_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 result = 10;
      private int result_ ;
      /**
       * <code>optional sint32 result = 10;</code>
       *
       * <pre>
       * 1 win 2 lose 3 even
       * </pre>
       */
      public boolean hasResult() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional sint32 result = 10;</code>
       *
       * <pre>
       * 1 win 2 lose 3 even
       * </pre>
       */
      public int getResult() {
        return result_;
      }
      /**
       * <code>optional sint32 result = 10;</code>
       *
       * <pre>
       * 1 win 2 lose 3 even
       * </pre>
       */
      public Builder setResult(int value) {
        bitField0_ |= 0x00000200;
        result_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 result = 10;</code>
       *
       * <pre>
       * 1 win 2 lose 3 even
       * </pre>
       */
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000200);
        result_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.nn.NNGameOperPlayerSettle)
    }

    static {
      defaultInstance = new NNGameOperPlayerSettle(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.nn.NNGameOperPlayerSettle)
  }

  public interface NNGameOperFinalSettleSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional sint32 roomId = 1;
    /**
     * <code>optional sint32 roomId = 1;</code>
     *
     * <pre>
     *房间ID
     * </pre>
     */
    boolean hasRoomId();
    /**
     * <code>optional sint32 roomId = 1;</code>
     *
     * <pre>
     *房间ID
     * </pre>
     */
    int getRoomId();

    // optional sint32 innings = 2;
    /**
     * <code>optional sint32 innings = 2;</code>
     *
     * <pre>
     *总局数
     * </pre>
     */
    boolean hasInnings();
    /**
     * <code>optional sint32 innings = 2;</code>
     *
     * <pre>
     *总局数
     * </pre>
     */
    int getInnings();

    // repeated .packet.nn.NNPlayerFinalResult detail = 3;
    /**
     * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    java.util.List<packet.nn.NN.NNPlayerFinalResult> 
        getDetailList();
    /**
     * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    packet.nn.NN.NNPlayerFinalResult getDetail(int index);
    /**
     * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    int getDetailCount();
    /**
     * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    java.util.List<? extends packet.nn.NN.NNPlayerFinalResultOrBuilder> 
        getDetailOrBuilderList();
    /**
     * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    packet.nn.NN.NNPlayerFinalResultOrBuilder getDetailOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code packet.nn.NNGameOperFinalSettleSyn}
   */
  public static final class NNGameOperFinalSettleSyn extends
      com.google.protobuf.GeneratedMessage
      implements NNGameOperFinalSettleSynOrBuilder {
    // Use NNGameOperFinalSettleSyn.newBuilder() to construct.
    private NNGameOperFinalSettleSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NNGameOperFinalSettleSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NNGameOperFinalSettleSyn defaultInstance;
    public static NNGameOperFinalSettleSyn getDefaultInstance() {
      return defaultInstance;
    }

    public NNGameOperFinalSettleSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NNGameOperFinalSettleSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              roomId_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              innings_ = input.readSInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                detail_ = new java.util.ArrayList<packet.nn.NN.NNPlayerFinalResult>();
                mutable_bitField0_ |= 0x00000004;
              }
              detail_.add(input.readMessage(packet.nn.NN.NNPlayerFinalResult.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          detail_ = java.util.Collections.unmodifiableList(detail_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperFinalSettleSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.nn.NN.internal_static_packet_nn_NNGameOperFinalSettleSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.nn.NN.NNGameOperFinalSettleSyn.class, packet.nn.NN.NNGameOperFinalSettleSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<NNGameOperFinalSettleSyn> PARSER =
        new com.google.protobuf.AbstractParser<NNGameOperFinalSettleSyn>() {
      public NNGameOperFinalSettleSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NNGameOperFinalSettleSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NNGameOperFinalSettleSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional sint32 roomId = 1;
    public static final int ROOMID_FIELD_NUMBER = 1;
    private int roomId_;
    /**
     * <code>optional sint32 roomId = 1;</code>
     *
     * <pre>
     *房间ID
     * </pre>
     */
    public boolean hasRoomId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sint32 roomId = 1;</code>
     *
     * <pre>
     *房间ID
     * </pre>
     */
    public int getRoomId() {
      return roomId_;
    }

    // optional sint32 innings = 2;
    public static final int INNINGS_FIELD_NUMBER = 2;
    private int innings_;
    /**
     * <code>optional sint32 innings = 2;</code>
     *
     * <pre>
     *总局数
     * </pre>
     */
    public boolean hasInnings() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 innings = 2;</code>
     *
     * <pre>
     *总局数
     * </pre>
     */
    public int getInnings() {
      return innings_;
    }

    // repeated .packet.nn.NNPlayerFinalResult detail = 3;
    public static final int DETAIL_FIELD_NUMBER = 3;
    private java.util.List<packet.nn.NN.NNPlayerFinalResult> detail_;
    /**
     * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    public java.util.List<packet.nn.NN.NNPlayerFinalResult> getDetailList() {
      return detail_;
    }
    /**
     * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    public java.util.List<? extends packet.nn.NN.NNPlayerFinalResultOrBuilder> 
        getDetailOrBuilderList() {
      return detail_;
    }
    /**
     * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    public int getDetailCount() {
      return detail_.size();
    }
    /**
     * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    public packet.nn.NN.NNPlayerFinalResult getDetail(int index) {
      return detail_.get(index);
    }
    /**
     * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    public packet.nn.NN.NNPlayerFinalResultOrBuilder getDetailOrBuilder(
        int index) {
      return detail_.get(index);
    }

    private void initFields() {
      roomId_ = 0;
      innings_ = 0;
      detail_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, roomId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, innings_);
      }
      for (int i = 0; i < detail_.size(); i++) {
        output.writeMessage(3, detail_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, roomId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, innings_);
      }
      for (int i = 0; i < detail_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, detail_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.nn.NN.NNGameOperFinalSettleSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperFinalSettleSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperFinalSettleSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNGameOperFinalSettleSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperFinalSettleSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperFinalSettleSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperFinalSettleSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.nn.NN.NNGameOperFinalSettleSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNGameOperFinalSettleSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNGameOperFinalSettleSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.nn.NN.NNGameOperFinalSettleSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.nn.NNGameOperFinalSettleSyn}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.nn.NN.NNGameOperFinalSettleSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperFinalSettleSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperFinalSettleSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.nn.NN.NNGameOperFinalSettleSyn.class, packet.nn.NN.NNGameOperFinalSettleSyn.Builder.class);
      }

      // Construct using packet.nn.NN.NNGameOperFinalSettleSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDetailFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        roomId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        innings_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (detailBuilder_ == null) {
          detail_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          detailBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.nn.NN.internal_static_packet_nn_NNGameOperFinalSettleSyn_descriptor;
      }

      public packet.nn.NN.NNGameOperFinalSettleSyn getDefaultInstanceForType() {
        return packet.nn.NN.NNGameOperFinalSettleSyn.getDefaultInstance();
      }

      public packet.nn.NN.NNGameOperFinalSettleSyn build() {
        packet.nn.NN.NNGameOperFinalSettleSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.nn.NN.NNGameOperFinalSettleSyn buildPartial() {
        packet.nn.NN.NNGameOperFinalSettleSyn result = new packet.nn.NN.NNGameOperFinalSettleSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.roomId_ = roomId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.innings_ = innings_;
        if (detailBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            detail_ = java.util.Collections.unmodifiableList(detail_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.detail_ = detail_;
        } else {
          result.detail_ = detailBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.nn.NN.NNGameOperFinalSettleSyn) {
          return mergeFrom((packet.nn.NN.NNGameOperFinalSettleSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.nn.NN.NNGameOperFinalSettleSyn other) {
        if (other == packet.nn.NN.NNGameOperFinalSettleSyn.getDefaultInstance()) return this;
        if (other.hasRoomId()) {
          setRoomId(other.getRoomId());
        }
        if (other.hasInnings()) {
          setInnings(other.getInnings());
        }
        if (detailBuilder_ == null) {
          if (!other.detail_.isEmpty()) {
            if (detail_.isEmpty()) {
              detail_ = other.detail_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureDetailIsMutable();
              detail_.addAll(other.detail_);
            }
            onChanged();
          }
        } else {
          if (!other.detail_.isEmpty()) {
            if (detailBuilder_.isEmpty()) {
              detailBuilder_.dispose();
              detailBuilder_ = null;
              detail_ = other.detail_;
              bitField0_ = (bitField0_ & ~0x00000004);
              detailBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDetailFieldBuilder() : null;
            } else {
              detailBuilder_.addAllMessages(other.detail_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.nn.NN.NNGameOperFinalSettleSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.nn.NN.NNGameOperFinalSettleSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional sint32 roomId = 1;
      private int roomId_ ;
      /**
       * <code>optional sint32 roomId = 1;</code>
       *
       * <pre>
       *房间ID
       * </pre>
       */
      public boolean hasRoomId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sint32 roomId = 1;</code>
       *
       * <pre>
       *房间ID
       * </pre>
       */
      public int getRoomId() {
        return roomId_;
      }
      /**
       * <code>optional sint32 roomId = 1;</code>
       *
       * <pre>
       *房间ID
       * </pre>
       */
      public Builder setRoomId(int value) {
        bitField0_ |= 0x00000001;
        roomId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 roomId = 1;</code>
       *
       * <pre>
       *房间ID
       * </pre>
       */
      public Builder clearRoomId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        roomId_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 innings = 2;
      private int innings_ ;
      /**
       * <code>optional sint32 innings = 2;</code>
       *
       * <pre>
       *总局数
       * </pre>
       */
      public boolean hasInnings() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 innings = 2;</code>
       *
       * <pre>
       *总局数
       * </pre>
       */
      public int getInnings() {
        return innings_;
      }
      /**
       * <code>optional sint32 innings = 2;</code>
       *
       * <pre>
       *总局数
       * </pre>
       */
      public Builder setInnings(int value) {
        bitField0_ |= 0x00000002;
        innings_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 innings = 2;</code>
       *
       * <pre>
       *总局数
       * </pre>
       */
      public Builder clearInnings() {
        bitField0_ = (bitField0_ & ~0x00000002);
        innings_ = 0;
        onChanged();
        return this;
      }

      // repeated .packet.nn.NNPlayerFinalResult detail = 3;
      private java.util.List<packet.nn.NN.NNPlayerFinalResult> detail_ =
        java.util.Collections.emptyList();
      private void ensureDetailIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          detail_ = new java.util.ArrayList<packet.nn.NN.NNPlayerFinalResult>(detail_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.nn.NN.NNPlayerFinalResult, packet.nn.NN.NNPlayerFinalResult.Builder, packet.nn.NN.NNPlayerFinalResultOrBuilder> detailBuilder_;

      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public java.util.List<packet.nn.NN.NNPlayerFinalResult> getDetailList() {
        if (detailBuilder_ == null) {
          return java.util.Collections.unmodifiableList(detail_);
        } else {
          return detailBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public int getDetailCount() {
        if (detailBuilder_ == null) {
          return detail_.size();
        } else {
          return detailBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public packet.nn.NN.NNPlayerFinalResult getDetail(int index) {
        if (detailBuilder_ == null) {
          return detail_.get(index);
        } else {
          return detailBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder setDetail(
          int index, packet.nn.NN.NNPlayerFinalResult value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.set(index, value);
          onChanged();
        } else {
          detailBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder setDetail(
          int index, packet.nn.NN.NNPlayerFinalResult.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.set(index, builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder addDetail(packet.nn.NN.NNPlayerFinalResult value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.add(value);
          onChanged();
        } else {
          detailBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder addDetail(
          int index, packet.nn.NN.NNPlayerFinalResult value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.add(index, value);
          onChanged();
        } else {
          detailBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder addDetail(
          packet.nn.NN.NNPlayerFinalResult.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.add(builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder addDetail(
          int index, packet.nn.NN.NNPlayerFinalResult.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.add(index, builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder addAllDetail(
          java.lang.Iterable<? extends packet.nn.NN.NNPlayerFinalResult> values) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          super.addAll(values, detail_);
          onChanged();
        } else {
          detailBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder clearDetail() {
        if (detailBuilder_ == null) {
          detail_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          detailBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder removeDetail(int index) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.remove(index);
          onChanged();
        } else {
          detailBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public packet.nn.NN.NNPlayerFinalResult.Builder getDetailBuilder(
          int index) {
        return getDetailFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public packet.nn.NN.NNPlayerFinalResultOrBuilder getDetailOrBuilder(
          int index) {
        if (detailBuilder_ == null) {
          return detail_.get(index);  } else {
          return detailBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public java.util.List<? extends packet.nn.NN.NNPlayerFinalResultOrBuilder> 
           getDetailOrBuilderList() {
        if (detailBuilder_ != null) {
          return detailBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(detail_);
        }
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public packet.nn.NN.NNPlayerFinalResult.Builder addDetailBuilder() {
        return getDetailFieldBuilder().addBuilder(
            packet.nn.NN.NNPlayerFinalResult.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public packet.nn.NN.NNPlayerFinalResult.Builder addDetailBuilder(
          int index) {
        return getDetailFieldBuilder().addBuilder(
            index, packet.nn.NN.NNPlayerFinalResult.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.nn.NNPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public java.util.List<packet.nn.NN.NNPlayerFinalResult.Builder> 
           getDetailBuilderList() {
        return getDetailFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.nn.NN.NNPlayerFinalResult, packet.nn.NN.NNPlayerFinalResult.Builder, packet.nn.NN.NNPlayerFinalResultOrBuilder> 
          getDetailFieldBuilder() {
        if (detailBuilder_ == null) {
          detailBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.nn.NN.NNPlayerFinalResult, packet.nn.NN.NNPlayerFinalResult.Builder, packet.nn.NN.NNPlayerFinalResultOrBuilder>(
                  detail_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          detail_ = null;
        }
        return detailBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:packet.nn.NNGameOperFinalSettleSyn)
    }

    static {
      defaultInstance = new NNGameOperFinalSettleSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.nn.NNGameOperFinalSettleSyn)
  }

  public interface NNPlayerFinalResultOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional sint64 playerId = 1;
    /**
     * <code>optional sint64 playerId = 1;</code>
     *
     * <pre>
     *玩家ID
     * </pre>
     */
    boolean hasPlayerId();
    /**
     * <code>optional sint64 playerId = 1;</code>
     *
     * <pre>
     *玩家ID
     * </pre>
     */
    long getPlayerId();

    // optional string playerName = 2;
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    boolean hasPlayerName();
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    java.lang.String getPlayerName();
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    com.google.protobuf.ByteString
        getPlayerNameBytes();

    // optional sint32 position = 3;
    /**
     * <code>optional sint32 position = 3;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>optional sint32 position = 3;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // optional string headImage = 4;
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    boolean hasHeadImage();
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    java.lang.String getHeadImage();
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    com.google.protobuf.ByteString
        getHeadImageBytes();

    // optional sint32 allScore = 5;
    /**
     * <code>optional sint32 allScore = 5;</code>
     *
     * <pre>
     *玩家总分
     * </pre>
     */
    boolean hasAllScore();
    /**
     * <code>optional sint32 allScore = 5;</code>
     *
     * <pre>
     *玩家总分
     * </pre>
     */
    int getAllScore();

    // optional sint32 winNum = 6;
    /**
     * <code>optional sint32 winNum = 6;</code>
     *
     * <pre>
     *玩家赢的局数
     * </pre>
     */
    boolean hasWinNum();
    /**
     * <code>optional sint32 winNum = 6;</code>
     *
     * <pre>
     *玩家赢的局数
     * </pre>
     */
    int getWinNum();

    // optional sint32 loseNum = 7;
    /**
     * <code>optional sint32 loseNum = 7;</code>
     *
     * <pre>
     *玩家输的局数
     * </pre>
     */
    boolean hasLoseNum();
    /**
     * <code>optional sint32 loseNum = 7;</code>
     *
     * <pre>
     *玩家输的局数
     * </pre>
     */
    int getLoseNum();

    // optional bool roomOwner = 8;
    /**
     * <code>optional bool roomOwner = 8;</code>
     *
     * <pre>
     *是否是否房主
     * </pre>
     */
    boolean hasRoomOwner();
    /**
     * <code>optional bool roomOwner = 8;</code>
     *
     * <pre>
     *是否是否房主
     * </pre>
     */
    boolean getRoomOwner();
  }
  /**
   * Protobuf type {@code packet.nn.NNPlayerFinalResult}
   */
  public static final class NNPlayerFinalResult extends
      com.google.protobuf.GeneratedMessage
      implements NNPlayerFinalResultOrBuilder {
    // Use NNPlayerFinalResult.newBuilder() to construct.
    private NNPlayerFinalResult(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NNPlayerFinalResult(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NNPlayerFinalResult defaultInstance;
    public static NNPlayerFinalResult getDefaultInstance() {
      return defaultInstance;
    }

    public NNPlayerFinalResult getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NNPlayerFinalResult(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              playerId_ = input.readSInt64();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              playerName_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              position_ = input.readSInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              headImage_ = input.readBytes();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              allScore_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              winNum_ = input.readSInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              loseNum_ = input.readSInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              roomOwner_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.nn.NN.internal_static_packet_nn_NNPlayerFinalResult_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.nn.NN.internal_static_packet_nn_NNPlayerFinalResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.nn.NN.NNPlayerFinalResult.class, packet.nn.NN.NNPlayerFinalResult.Builder.class);
    }

    public static com.google.protobuf.Parser<NNPlayerFinalResult> PARSER =
        new com.google.protobuf.AbstractParser<NNPlayerFinalResult>() {
      public NNPlayerFinalResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NNPlayerFinalResult(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NNPlayerFinalResult> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional sint64 playerId = 1;
    public static final int PLAYERID_FIELD_NUMBER = 1;
    private long playerId_;
    /**
     * <code>optional sint64 playerId = 1;</code>
     *
     * <pre>
     *玩家ID
     * </pre>
     */
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sint64 playerId = 1;</code>
     *
     * <pre>
     *玩家ID
     * </pre>
     */
    public long getPlayerId() {
      return playerId_;
    }

    // optional string playerName = 2;
    public static final int PLAYERNAME_FIELD_NUMBER = 2;
    private java.lang.Object playerName_;
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    public boolean hasPlayerName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    public java.lang.String getPlayerName() {
      java.lang.Object ref = playerName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          playerName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPlayerNameBytes() {
      java.lang.Object ref = playerName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        playerName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional sint32 position = 3;
    public static final int POSITION_FIELD_NUMBER = 3;
    private int position_;
    /**
     * <code>optional sint32 position = 3;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 position = 3;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // optional string headImage = 4;
    public static final int HEADIMAGE_FIELD_NUMBER = 4;
    private java.lang.Object headImage_;
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public boolean hasHeadImage() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public java.lang.String getHeadImage() {
      java.lang.Object ref = headImage_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          headImage_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHeadImageBytes() {
      java.lang.Object ref = headImage_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        headImage_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional sint32 allScore = 5;
    public static final int ALLSCORE_FIELD_NUMBER = 5;
    private int allScore_;
    /**
     * <code>optional sint32 allScore = 5;</code>
     *
     * <pre>
     *玩家总分
     * </pre>
     */
    public boolean hasAllScore() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 allScore = 5;</code>
     *
     * <pre>
     *玩家总分
     * </pre>
     */
    public int getAllScore() {
      return allScore_;
    }

    // optional sint32 winNum = 6;
    public static final int WINNUM_FIELD_NUMBER = 6;
    private int winNum_;
    /**
     * <code>optional sint32 winNum = 6;</code>
     *
     * <pre>
     *玩家赢的局数
     * </pre>
     */
    public boolean hasWinNum() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 winNum = 6;</code>
     *
     * <pre>
     *玩家赢的局数
     * </pre>
     */
    public int getWinNum() {
      return winNum_;
    }

    // optional sint32 loseNum = 7;
    public static final int LOSENUM_FIELD_NUMBER = 7;
    private int loseNum_;
    /**
     * <code>optional sint32 loseNum = 7;</code>
     *
     * <pre>
     *玩家输的局数
     * </pre>
     */
    public boolean hasLoseNum() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 loseNum = 7;</code>
     *
     * <pre>
     *玩家输的局数
     * </pre>
     */
    public int getLoseNum() {
      return loseNum_;
    }

    // optional bool roomOwner = 8;
    public static final int ROOMOWNER_FIELD_NUMBER = 8;
    private boolean roomOwner_;
    /**
     * <code>optional bool roomOwner = 8;</code>
     *
     * <pre>
     *是否是否房主
     * </pre>
     */
    public boolean hasRoomOwner() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool roomOwner = 8;</code>
     *
     * <pre>
     *是否是否房主
     * </pre>
     */
    public boolean getRoomOwner() {
      return roomOwner_;
    }

    private void initFields() {
      playerId_ = 0L;
      playerName_ = "";
      position_ = 0;
      headImage_ = "";
      allScore_ = 0;
      winNum_ = 0;
      loseNum_ = 0;
      roomOwner_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt64(1, playerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getPlayerNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, position_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getHeadImageBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, allScore_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(6, winNum_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(7, loseNum_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, roomOwner_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(1, playerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getPlayerNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, position_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getHeadImageBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, allScore_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, winNum_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, loseNum_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, roomOwner_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.nn.NN.NNPlayerFinalResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNPlayerFinalResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNPlayerFinalResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.nn.NN.NNPlayerFinalResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.nn.NN.NNPlayerFinalResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNPlayerFinalResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNPlayerFinalResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.nn.NN.NNPlayerFinalResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.nn.NN.NNPlayerFinalResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.nn.NN.NNPlayerFinalResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.nn.NN.NNPlayerFinalResult prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.nn.NNPlayerFinalResult}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.nn.NN.NNPlayerFinalResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.nn.NN.internal_static_packet_nn_NNPlayerFinalResult_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.nn.NN.internal_static_packet_nn_NNPlayerFinalResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.nn.NN.NNPlayerFinalResult.class, packet.nn.NN.NNPlayerFinalResult.Builder.class);
      }

      // Construct using packet.nn.NN.NNPlayerFinalResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        playerId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        playerName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        headImage_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        allScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        winNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        loseNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        roomOwner_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.nn.NN.internal_static_packet_nn_NNPlayerFinalResult_descriptor;
      }

      public packet.nn.NN.NNPlayerFinalResult getDefaultInstanceForType() {
        return packet.nn.NN.NNPlayerFinalResult.getDefaultInstance();
      }

      public packet.nn.NN.NNPlayerFinalResult build() {
        packet.nn.NN.NNPlayerFinalResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.nn.NN.NNPlayerFinalResult buildPartial() {
        packet.nn.NN.NNPlayerFinalResult result = new packet.nn.NN.NNPlayerFinalResult(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.playerId_ = playerId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.playerName_ = playerName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.headImage_ = headImage_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.allScore_ = allScore_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.winNum_ = winNum_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.loseNum_ = loseNum_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.roomOwner_ = roomOwner_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.nn.NN.NNPlayerFinalResult) {
          return mergeFrom((packet.nn.NN.NNPlayerFinalResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.nn.NN.NNPlayerFinalResult other) {
        if (other == packet.nn.NN.NNPlayerFinalResult.getDefaultInstance()) return this;
        if (other.hasPlayerId()) {
          setPlayerId(other.getPlayerId());
        }
        if (other.hasPlayerName()) {
          bitField0_ |= 0x00000002;
          playerName_ = other.playerName_;
          onChanged();
        }
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasHeadImage()) {
          bitField0_ |= 0x00000008;
          headImage_ = other.headImage_;
          onChanged();
        }
        if (other.hasAllScore()) {
          setAllScore(other.getAllScore());
        }
        if (other.hasWinNum()) {
          setWinNum(other.getWinNum());
        }
        if (other.hasLoseNum()) {
          setLoseNum(other.getLoseNum());
        }
        if (other.hasRoomOwner()) {
          setRoomOwner(other.getRoomOwner());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.nn.NN.NNPlayerFinalResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.nn.NN.NNPlayerFinalResult) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional sint64 playerId = 1;
      private long playerId_ ;
      /**
       * <code>optional sint64 playerId = 1;</code>
       *
       * <pre>
       *玩家ID
       * </pre>
       */
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sint64 playerId = 1;</code>
       *
       * <pre>
       *玩家ID
       * </pre>
       */
      public long getPlayerId() {
        return playerId_;
      }
      /**
       * <code>optional sint64 playerId = 1;</code>
       *
       * <pre>
       *玩家ID
       * </pre>
       */
      public Builder setPlayerId(long value) {
        bitField0_ |= 0x00000001;
        playerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint64 playerId = 1;</code>
       *
       * <pre>
       *玩家ID
       * </pre>
       */
      public Builder clearPlayerId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        playerId_ = 0L;
        onChanged();
        return this;
      }

      // optional string playerName = 2;
      private java.lang.Object playerName_ = "";
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public boolean hasPlayerName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public java.lang.String getPlayerName() {
        java.lang.Object ref = playerName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          playerName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPlayerNameBytes() {
        java.lang.Object ref = playerName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          playerName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public Builder setPlayerName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        playerName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public Builder clearPlayerName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        playerName_ = getDefaultInstance().getPlayerName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public Builder setPlayerNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        playerName_ = value;
        onChanged();
        return this;
      }

      // optional sint32 position = 3;
      private int position_ ;
      /**
       * <code>optional sint32 position = 3;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 position = 3;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>optional sint32 position = 3;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000004;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 position = 3;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000004);
        position_ = 0;
        onChanged();
        return this;
      }

      // optional string headImage = 4;
      private java.lang.Object headImage_ = "";
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public boolean hasHeadImage() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public java.lang.String getHeadImage() {
        java.lang.Object ref = headImage_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          headImage_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHeadImageBytes() {
        java.lang.Object ref = headImage_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          headImage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        headImage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder clearHeadImage() {
        bitField0_ = (bitField0_ & ~0x00000008);
        headImage_ = getDefaultInstance().getHeadImage();
        onChanged();
        return this;
      }
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        headImage_ = value;
        onChanged();
        return this;
      }

      // optional sint32 allScore = 5;
      private int allScore_ ;
      /**
       * <code>optional sint32 allScore = 5;</code>
       *
       * <pre>
       *玩家总分
       * </pre>
       */
      public boolean hasAllScore() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 allScore = 5;</code>
       *
       * <pre>
       *玩家总分
       * </pre>
       */
      public int getAllScore() {
        return allScore_;
      }
      /**
       * <code>optional sint32 allScore = 5;</code>
       *
       * <pre>
       *玩家总分
       * </pre>
       */
      public Builder setAllScore(int value) {
        bitField0_ |= 0x00000010;
        allScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 allScore = 5;</code>
       *
       * <pre>
       *玩家总分
       * </pre>
       */
      public Builder clearAllScore() {
        bitField0_ = (bitField0_ & ~0x00000010);
        allScore_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 winNum = 6;
      private int winNum_ ;
      /**
       * <code>optional sint32 winNum = 6;</code>
       *
       * <pre>
       *玩家赢的局数
       * </pre>
       */
      public boolean hasWinNum() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 winNum = 6;</code>
       *
       * <pre>
       *玩家赢的局数
       * </pre>
       */
      public int getWinNum() {
        return winNum_;
      }
      /**
       * <code>optional sint32 winNum = 6;</code>
       *
       * <pre>
       *玩家赢的局数
       * </pre>
       */
      public Builder setWinNum(int value) {
        bitField0_ |= 0x00000020;
        winNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 winNum = 6;</code>
       *
       * <pre>
       *玩家赢的局数
       * </pre>
       */
      public Builder clearWinNum() {
        bitField0_ = (bitField0_ & ~0x00000020);
        winNum_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 loseNum = 7;
      private int loseNum_ ;
      /**
       * <code>optional sint32 loseNum = 7;</code>
       *
       * <pre>
       *玩家输的局数
       * </pre>
       */
      public boolean hasLoseNum() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional sint32 loseNum = 7;</code>
       *
       * <pre>
       *玩家输的局数
       * </pre>
       */
      public int getLoseNum() {
        return loseNum_;
      }
      /**
       * <code>optional sint32 loseNum = 7;</code>
       *
       * <pre>
       *玩家输的局数
       * </pre>
       */
      public Builder setLoseNum(int value) {
        bitField0_ |= 0x00000040;
        loseNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 loseNum = 7;</code>
       *
       * <pre>
       *玩家输的局数
       * </pre>
       */
      public Builder clearLoseNum() {
        bitField0_ = (bitField0_ & ~0x00000040);
        loseNum_ = 0;
        onChanged();
        return this;
      }

      // optional bool roomOwner = 8;
      private boolean roomOwner_ ;
      /**
       * <code>optional bool roomOwner = 8;</code>
       *
       * <pre>
       *是否是否房主
       * </pre>
       */
      public boolean hasRoomOwner() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool roomOwner = 8;</code>
       *
       * <pre>
       *是否是否房主
       * </pre>
       */
      public boolean getRoomOwner() {
        return roomOwner_;
      }
      /**
       * <code>optional bool roomOwner = 8;</code>
       *
       * <pre>
       *是否是否房主
       * </pre>
       */
      public Builder setRoomOwner(boolean value) {
        bitField0_ |= 0x00000080;
        roomOwner_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool roomOwner = 8;</code>
       *
       * <pre>
       *是否是否房主
       * </pre>
       */
      public Builder clearRoomOwner() {
        bitField0_ = (bitField0_ & ~0x00000080);
        roomOwner_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.nn.NNPlayerFinalResult)
    }

    static {
      defaultInstance = new NNPlayerFinalResult(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.nn.NNPlayerFinalResult)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_nn_NNGameOperStartSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_nn_NNGameOperStartSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_nn_NNGameOperHandCardSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_nn_NNGameOperHandCardSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_nn_NNGameOperActorSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_nn_NNGameOperActorSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_nn_NNGameOperPlayerActionSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_nn_NNGameOperPlayerActionSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_nn_NNGameOperPlayerActionNotify_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_nn_NNGameOperPlayerActionNotify_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_nn_NNGameOperPlayerHuSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_nn_NNGameOperPlayerHuSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_nn_NNGameOperPlayerSettle_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_nn_NNGameOperPlayerSettle_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_nn_NNGameOperFinalSettleSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_nn_NNGameOperFinalSettleSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_nn_NNPlayerFinalResult_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_nn_NNPlayerFinalResult_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\010NN.proto\022\tpacket.nn\"\251\001\n\022NNGameOperStar" +
      "tSyn\022\021\n\tbankerPos\030\001 \001(\021\0229\n\017playerHandCar" +
      "ds\030\002 \003(\0132 .packet.nn.NNGameOperHandCardS" +
      "yn\022\021\n\treconnect\030\003 \001(\010\022\r\n\005juNum\030\004 \001(\021\022\026\n\016" +
      "qiangZhuangNum\030\005 \001(\021\022\013\n\003seq\030d \001(\021\"\230\001\n\025NN" +
      "GameOperHandCardSyn\022\020\n\010position\030\001 \002(\021\022\021\n" +
      "\thandCards\030\002 \003(\021\022\r\n\005socre\030\003 \001(\021\022\021\n\txiazh" +
      "uNum\030\004 \001(\021\022\020\n\010cardType\030\005 \001(\t\022\026\n\016qiangZhu" +
      "angNum\030\006 \001(\021\022\016\n\006isWait\030\010 \001(\010\"8\n\022NNGameOp" +
      "erActorSyn\022\020\n\010position\030\001 \002(\021\022\020\n\010timeLeft",
      "\030\002 \002(\021\"\254\001\n\031NNGameOperPlayerActionSyn\022\020\n\010" +
      "position\030\001 \002(\021\022\016\n\006action\030\002 \002(\021\022\026\n\016qiangZ" +
      "huangNum\030\003 \001(\021\022\021\n\tbankerPos\030\004 \001(\021\022\021\n\txia" +
      "ZhuNum\030\005 \001(\021\022\020\n\010cardType\030\006 \001(\t\022\020\n\010handca" +
      "rd\030\007 \003(\021\022\013\n\003seq\030d \001(\021\"y\n\034NNGameOperPlaye" +
      "rActionNotify\022\020\n\010position\030\001 \002(\021\022\017\n\007actio" +
      "ns\030\002 \002(\021\022\026\n\016qiangZhuangNum\030\003 \003(\021\022\021\n\txiaZ" +
      "huNum\030\004 \003(\021\022\013\n\003seq\030d \001(\021\"k\n\025NNGameOperPl" +
      "ayerHuSyn\022\020\n\010position\030\001 \002(\021\0221\n\006detail\030\002 " +
      "\003(\0132!.packet.nn.NNGameOperPlayerSettle\022\r",
      "\n\005juNum\030\003 \001(\021\"\312\001\n\026NNGameOperPlayerSettle" +
      "\022\020\n\010position\030\001 \002(\021\022\020\n\010playerId\030\002 \001(\021\022\022\n\n" +
      "playerName\030\003 \001(\t\022\020\n\010handcard\030\004 \003(\021\022\021\n\tla" +
      "stScore\030\005 \001(\021\022\r\n\005score\030\006 \001(\021\022\020\n\010allSocre" +
      "\030\007 \001(\021\022\020\n\010cardType\030\010 \001(\t\022\020\n\010isBanker\030\t \001" +
      "(\021\022\016\n\006result\030\n \001(\021\"k\n\030NNGameOperFinalSet" +
      "tleSyn\022\016\n\006roomId\030\001 \001(\021\022\017\n\007innings\030\002 \001(\021\022" +
      ".\n\006detail\030\003 \003(\0132\036.packet.nn.NNPlayerFina" +
      "lResult\"\246\001\n\023NNPlayerFinalResult\022\020\n\010playe" +
      "rId\030\001 \001(\022\022\022\n\nplayerName\030\002 \001(\t\022\020\n\010positio",
      "n\030\003 \001(\021\022\021\n\theadImage\030\004 \001(\t\022\020\n\010allScore\030\005" +
      " \001(\021\022\016\n\006winNum\030\006 \001(\021\022\017\n\007loseNum\030\007 \001(\021\022\021\n" +
      "\troomOwner\030\010 \001(\010"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_packet_nn_NNGameOperStartSyn_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_packet_nn_NNGameOperStartSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_nn_NNGameOperStartSyn_descriptor,
              new java.lang.String[] { "BankerPos", "PlayerHandCards", "Reconnect", "JuNum", "QiangZhuangNum", "Seq", });
          internal_static_packet_nn_NNGameOperHandCardSyn_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_packet_nn_NNGameOperHandCardSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_nn_NNGameOperHandCardSyn_descriptor,
              new java.lang.String[] { "Position", "HandCards", "Socre", "XiazhuNum", "CardType", "QiangZhuangNum", "IsWait", });
          internal_static_packet_nn_NNGameOperActorSyn_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_packet_nn_NNGameOperActorSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_nn_NNGameOperActorSyn_descriptor,
              new java.lang.String[] { "Position", "TimeLeft", });
          internal_static_packet_nn_NNGameOperPlayerActionSyn_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_packet_nn_NNGameOperPlayerActionSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_nn_NNGameOperPlayerActionSyn_descriptor,
              new java.lang.String[] { "Position", "Action", "QiangZhuangNum", "BankerPos", "XiaZhuNum", "CardType", "Handcard", "Seq", });
          internal_static_packet_nn_NNGameOperPlayerActionNotify_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_packet_nn_NNGameOperPlayerActionNotify_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_nn_NNGameOperPlayerActionNotify_descriptor,
              new java.lang.String[] { "Position", "Actions", "QiangZhuangNum", "XiaZhuNum", "Seq", });
          internal_static_packet_nn_NNGameOperPlayerHuSyn_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_packet_nn_NNGameOperPlayerHuSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_nn_NNGameOperPlayerHuSyn_descriptor,
              new java.lang.String[] { "Position", "Detail", "JuNum", });
          internal_static_packet_nn_NNGameOperPlayerSettle_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_packet_nn_NNGameOperPlayerSettle_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_nn_NNGameOperPlayerSettle_descriptor,
              new java.lang.String[] { "Position", "PlayerId", "PlayerName", "Handcard", "LastScore", "Score", "AllSocre", "CardType", "IsBanker", "Result", });
          internal_static_packet_nn_NNGameOperFinalSettleSyn_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_packet_nn_NNGameOperFinalSettleSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_nn_NNGameOperFinalSettleSyn_descriptor,
              new java.lang.String[] { "RoomId", "Innings", "Detail", });
          internal_static_packet_nn_NNPlayerFinalResult_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_packet_nn_NNPlayerFinalResult_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_nn_NNPlayerFinalResult_descriptor,
              new java.lang.String[] { "PlayerId", "PlayerName", "Position", "HeadImage", "AllScore", "WinNum", "LoseNum", "RoomOwner", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
