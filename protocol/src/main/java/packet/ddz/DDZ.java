// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DDZ.proto

package packet.ddz;

public final class DDZ {
  private DDZ() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface DDZGameOperStartSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional sint32 bankerPos = 1;
    /**
     * <code>optional sint32 bankerPos = 1;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    boolean hasBankerPos();
    /**
     * <code>optional sint32 bankerPos = 1;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    int getBankerPos();

    // required sint32 serviceGold = 2;
    /**
     * <code>required sint32 serviceGold = 2;</code>
     *
     * <pre>
     *台费
     * </pre>
     */
    boolean hasServiceGold();
    /**
     * <code>required sint32 serviceGold = 2;</code>
     *
     * <pre>
     *台费
     * </pre>
     */
    int getServiceGold();

    // repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;
    /**
     * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    java.util.List<packet.ddz.DDZ.DDZGameOperHandCardSyn> 
        getPlayerHandCardsList();
    /**
     * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    packet.ddz.DDZ.DDZGameOperHandCardSyn getPlayerHandCards(int index);
    /**
     * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    int getPlayerHandCardsCount();
    /**
     * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    java.util.List<? extends packet.ddz.DDZ.DDZGameOperHandCardSynOrBuilder> 
        getPlayerHandCardsOrBuilderList();
    /**
     * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    packet.ddz.DDZ.DDZGameOperHandCardSynOrBuilder getPlayerHandCardsOrBuilder(
        int index);

    // optional sint32 quanNum = 4;
    /**
     * <code>optional sint32 quanNum = 4;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    boolean hasQuanNum();
    /**
     * <code>optional sint32 quanNum = 4;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    int getQuanNum();

    // optional sint32 seq = 5;
    /**
     * <code>optional sint32 seq = 5;</code>
     *
     * <pre>
     *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
     * </pre>
     */
    boolean hasSeq();
    /**
     * <code>optional sint32 seq = 5;</code>
     *
     * <pre>
     *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
     * </pre>
     */
    int getSeq();

    // optional bool reconnect = 6;
    /**
     * <code>optional bool reconnect = 6;</code>
     *
     * <pre>
     *是否是断线重连 true是断线重连
     * </pre>
     */
    boolean hasReconnect();
    /**
     * <code>optional bool reconnect = 6;</code>
     *
     * <pre>
     *是否是断线重连 true是断线重连
     * </pre>
     */
    boolean getReconnect();

    // repeated sint32 cardLeft = 7;
    /**
     * <code>repeated sint32 cardLeft = 7;</code>
     *
     * <pre>
     *剩余牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardLeftList();
    /**
     * <code>repeated sint32 cardLeft = 7;</code>
     *
     * <pre>
     *剩余牌
     * </pre>
     */
    int getCardLeftCount();
    /**
     * <code>repeated sint32 cardLeft = 7;</code>
     *
     * <pre>
     *剩余牌
     * </pre>
     */
    int getCardLeft(int index);

    // optional sint32 multiple = 8;
    /**
     * <code>optional sint32 multiple = 8;</code>
     *
     * <pre>
     *当前桌子的倍数
     * </pre>
     */
    boolean hasMultiple();
    /**
     * <code>optional sint32 multiple = 8;</code>
     *
     * <pre>
     *当前桌子的倍数
     * </pre>
     */
    int getMultiple();

    // optional sint32 lunNum = 9;
    /**
     * <code>optional sint32 lunNum = 9;</code>
     *
     * <pre>
     *比赛场第几轮
     * </pre>
     */
    boolean hasLunNum();
    /**
     * <code>optional sint32 lunNum = 9;</code>
     *
     * <pre>
     *比赛场第几轮
     * </pre>
     */
    int getLunNum();

    // repeated sint32 lastActionCard = 10;
    /**
     * <code>repeated sint32 lastActionCard = 10;</code>
     *
     * <pre>
     *上一个行动的牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getLastActionCardList();
    /**
     * <code>repeated sint32 lastActionCard = 10;</code>
     *
     * <pre>
     *上一个行动的牌
     * </pre>
     */
    int getLastActionCardCount();
    /**
     * <code>repeated sint32 lastActionCard = 10;</code>
     *
     * <pre>
     *上一个行动的牌
     * </pre>
     */
    int getLastActionCard(int index);

    // optional sint32 lastActionPosition = 11;
    /**
     * <code>optional sint32 lastActionPosition = 11;</code>
     *
     * <pre>
     *上一个行动的玩家位置
     * </pre>
     */
    boolean hasLastActionPosition();
    /**
     * <code>optional sint32 lastActionPosition = 11;</code>
     *
     * <pre>
     *上一个行动的玩家位置
     * </pre>
     */
    int getLastActionPosition();

    // repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    java.util.List<packet.ddz.DDZ.DDZGameCardInDesk> 
        getCardInDeskList();
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    packet.ddz.DDZ.DDZGameCardInDesk getCardInDesk(int index);
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    int getCardInDeskCount();
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    java.util.List<? extends packet.ddz.DDZ.DDZGameCardInDeskOrBuilder> 
        getCardInDeskOrBuilderList();
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    packet.ddz.DDZ.DDZGameCardInDeskOrBuilder getCardInDeskOrBuilder(
        int index);

    // repeated sint32 DiPai = 14;
    /**
     * <code>repeated sint32 DiPai = 14;</code>
     *
     * <pre>
     *三张底牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getDiPaiList();
    /**
     * <code>repeated sint32 DiPai = 14;</code>
     *
     * <pre>
     *三张底牌
     * </pre>
     */
    int getDiPaiCount();
    /**
     * <code>repeated sint32 DiPai = 14;</code>
     *
     * <pre>
     *三张底牌
     * </pre>
     */
    int getDiPai(int index);

    // optional sint32 robNum = 15;
    /**
     * <code>optional sint32 robNum = 15;</code>
     *
     * <pre>
     *抢地主的分数
     * </pre>
     */
    boolean hasRobNum();
    /**
     * <code>optional sint32 robNum = 15;</code>
     *
     * <pre>
     *抢地主的分数
     * </pre>
     */
    int getRobNum();

    // repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;
    /**
     * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
     *
     * <pre>
     *玩家剩余牌数,是否加倍等情况
     * </pre>
     */
    java.util.List<packet.ddz.DDZ.DDZPlayerCard> 
        getPlayerCardLeftList();
    /**
     * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
     *
     * <pre>
     *玩家剩余牌数,是否加倍等情况
     * </pre>
     */
    packet.ddz.DDZ.DDZPlayerCard getPlayerCardLeft(int index);
    /**
     * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
     *
     * <pre>
     *玩家剩余牌数,是否加倍等情况
     * </pre>
     */
    int getPlayerCardLeftCount();
    /**
     * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
     *
     * <pre>
     *玩家剩余牌数,是否加倍等情况
     * </pre>
     */
    java.util.List<? extends packet.ddz.DDZ.DDZPlayerCardOrBuilder> 
        getPlayerCardLeftOrBuilderList();
    /**
     * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
     *
     * <pre>
     *玩家剩余牌数,是否加倍等情况
     * </pre>
     */
    packet.ddz.DDZ.DDZPlayerCardOrBuilder getPlayerCardLeftOrBuilder(
        int index);

    // optional sint32 rangPaiNum = 17;
    /**
     * <code>optional sint32 rangPaiNum = 17;</code>
     *
     * <pre>
     *让牌数(二人斗地主)
     * </pre>
     */
    boolean hasRangPaiNum();
    /**
     * <code>optional sint32 rangPaiNum = 17;</code>
     *
     * <pre>
     *让牌数(二人斗地主)
     * </pre>
     */
    int getRangPaiNum();
  }
  /**
   * Protobuf type {@code packet.ddz.DDZGameOperStartSyn}
   *
   * <pre>
   *游戏开始 operType=GAMESTART
   * </pre>
   */
  public static final class DDZGameOperStartSyn extends
      com.google.protobuf.GeneratedMessage
      implements DDZGameOperStartSynOrBuilder {
    // Use DDZGameOperStartSyn.newBuilder() to construct.
    private DDZGameOperStartSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DDZGameOperStartSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DDZGameOperStartSyn defaultInstance;
    public static DDZGameOperStartSyn getDefaultInstance() {
      return defaultInstance;
    }

    public DDZGameOperStartSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DDZGameOperStartSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPos_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              serviceGold_ = input.readSInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                playerHandCards_ = new java.util.ArrayList<packet.ddz.DDZ.DDZGameOperHandCardSyn>();
                mutable_bitField0_ |= 0x00000004;
              }
              playerHandCards_.add(input.readMessage(packet.ddz.DDZ.DDZGameOperHandCardSyn.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              quanNum_ = input.readSInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              seq_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              reconnect_ = input.readBool();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                cardLeft_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              cardLeft_.add(input.readSInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                cardLeft_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardLeft_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              multiple_ = input.readSInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              lunNum_ = input.readSInt32();
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                lastActionCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              lastActionCard_.add(input.readSInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                lastActionCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                lastActionCard_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              bitField0_ |= 0x00000080;
              lastActionPosition_ = input.readSInt32();
              break;
            }
            case 98: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                cardInDesk_ = new java.util.ArrayList<packet.ddz.DDZ.DDZGameCardInDesk>();
                mutable_bitField0_ |= 0x00000800;
              }
              cardInDesk_.add(input.readMessage(packet.ddz.DDZ.DDZGameCardInDesk.PARSER, extensionRegistry));
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                diPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              diPai_.add(input.readSInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                diPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                diPai_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              bitField0_ |= 0x00000100;
              robNum_ = input.readSInt32();
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                playerCardLeft_ = new java.util.ArrayList<packet.ddz.DDZ.DDZPlayerCard>();
                mutable_bitField0_ |= 0x00004000;
              }
              playerCardLeft_.add(input.readMessage(packet.ddz.DDZ.DDZPlayerCard.PARSER, extensionRegistry));
              break;
            }
            case 136: {
              bitField0_ |= 0x00000200;
              rangPaiNum_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          playerHandCards_ = java.util.Collections.unmodifiableList(playerHandCards_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          cardLeft_ = java.util.Collections.unmodifiableList(cardLeft_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          lastActionCard_ = java.util.Collections.unmodifiableList(lastActionCard_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          cardInDesk_ = java.util.Collections.unmodifiableList(cardInDesk_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          diPai_ = java.util.Collections.unmodifiableList(diPai_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          playerCardLeft_ = java.util.Collections.unmodifiableList(playerCardLeft_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperStartSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperStartSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.ddz.DDZ.DDZGameOperStartSyn.class, packet.ddz.DDZ.DDZGameOperStartSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<DDZGameOperStartSyn> PARSER =
        new com.google.protobuf.AbstractParser<DDZGameOperStartSyn>() {
      public DDZGameOperStartSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DDZGameOperStartSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DDZGameOperStartSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional sint32 bankerPos = 1;
    public static final int BANKERPOS_FIELD_NUMBER = 1;
    private int bankerPos_;
    /**
     * <code>optional sint32 bankerPos = 1;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    public boolean hasBankerPos() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sint32 bankerPos = 1;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    public int getBankerPos() {
      return bankerPos_;
    }

    // required sint32 serviceGold = 2;
    public static final int SERVICEGOLD_FIELD_NUMBER = 2;
    private int serviceGold_;
    /**
     * <code>required sint32 serviceGold = 2;</code>
     *
     * <pre>
     *台费
     * </pre>
     */
    public boolean hasServiceGold() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 serviceGold = 2;</code>
     *
     * <pre>
     *台费
     * </pre>
     */
    public int getServiceGold() {
      return serviceGold_;
    }

    // repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;
    public static final int PLAYERHANDCARDS_FIELD_NUMBER = 3;
    private java.util.List<packet.ddz.DDZ.DDZGameOperHandCardSyn> playerHandCards_;
    /**
     * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public java.util.List<packet.ddz.DDZ.DDZGameOperHandCardSyn> getPlayerHandCardsList() {
      return playerHandCards_;
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public java.util.List<? extends packet.ddz.DDZ.DDZGameOperHandCardSynOrBuilder> 
        getPlayerHandCardsOrBuilderList() {
      return playerHandCards_;
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public int getPlayerHandCardsCount() {
      return playerHandCards_.size();
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public packet.ddz.DDZ.DDZGameOperHandCardSyn getPlayerHandCards(int index) {
      return playerHandCards_.get(index);
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public packet.ddz.DDZ.DDZGameOperHandCardSynOrBuilder getPlayerHandCardsOrBuilder(
        int index) {
      return playerHandCards_.get(index);
    }

    // optional sint32 quanNum = 4;
    public static final int QUANNUM_FIELD_NUMBER = 4;
    private int quanNum_;
    /**
     * <code>optional sint32 quanNum = 4;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public boolean hasQuanNum() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 quanNum = 4;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public int getQuanNum() {
      return quanNum_;
    }

    // optional sint32 seq = 5;
    public static final int SEQ_FIELD_NUMBER = 5;
    private int seq_;
    /**
     * <code>optional sint32 seq = 5;</code>
     *
     * <pre>
     *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
     * </pre>
     */
    public boolean hasSeq() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 seq = 5;</code>
     *
     * <pre>
     *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
     * </pre>
     */
    public int getSeq() {
      return seq_;
    }

    // optional bool reconnect = 6;
    public static final int RECONNECT_FIELD_NUMBER = 6;
    private boolean reconnect_;
    /**
     * <code>optional bool reconnect = 6;</code>
     *
     * <pre>
     *是否是断线重连 true是断线重连
     * </pre>
     */
    public boolean hasReconnect() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool reconnect = 6;</code>
     *
     * <pre>
     *是否是断线重连 true是断线重连
     * </pre>
     */
    public boolean getReconnect() {
      return reconnect_;
    }

    // repeated sint32 cardLeft = 7;
    public static final int CARDLEFT_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> cardLeft_;
    /**
     * <code>repeated sint32 cardLeft = 7;</code>
     *
     * <pre>
     *剩余牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardLeftList() {
      return cardLeft_;
    }
    /**
     * <code>repeated sint32 cardLeft = 7;</code>
     *
     * <pre>
     *剩余牌
     * </pre>
     */
    public int getCardLeftCount() {
      return cardLeft_.size();
    }
    /**
     * <code>repeated sint32 cardLeft = 7;</code>
     *
     * <pre>
     *剩余牌
     * </pre>
     */
    public int getCardLeft(int index) {
      return cardLeft_.get(index);
    }

    // optional sint32 multiple = 8;
    public static final int MULTIPLE_FIELD_NUMBER = 8;
    private int multiple_;
    /**
     * <code>optional sint32 multiple = 8;</code>
     *
     * <pre>
     *当前桌子的倍数
     * </pre>
     */
    public boolean hasMultiple() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 multiple = 8;</code>
     *
     * <pre>
     *当前桌子的倍数
     * </pre>
     */
    public int getMultiple() {
      return multiple_;
    }

    // optional sint32 lunNum = 9;
    public static final int LUNNUM_FIELD_NUMBER = 9;
    private int lunNum_;
    /**
     * <code>optional sint32 lunNum = 9;</code>
     *
     * <pre>
     *比赛场第几轮
     * </pre>
     */
    public boolean hasLunNum() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 lunNum = 9;</code>
     *
     * <pre>
     *比赛场第几轮
     * </pre>
     */
    public int getLunNum() {
      return lunNum_;
    }

    // repeated sint32 lastActionCard = 10;
    public static final int LASTACTIONCARD_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> lastActionCard_;
    /**
     * <code>repeated sint32 lastActionCard = 10;</code>
     *
     * <pre>
     *上一个行动的牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getLastActionCardList() {
      return lastActionCard_;
    }
    /**
     * <code>repeated sint32 lastActionCard = 10;</code>
     *
     * <pre>
     *上一个行动的牌
     * </pre>
     */
    public int getLastActionCardCount() {
      return lastActionCard_.size();
    }
    /**
     * <code>repeated sint32 lastActionCard = 10;</code>
     *
     * <pre>
     *上一个行动的牌
     * </pre>
     */
    public int getLastActionCard(int index) {
      return lastActionCard_.get(index);
    }

    // optional sint32 lastActionPosition = 11;
    public static final int LASTACTIONPOSITION_FIELD_NUMBER = 11;
    private int lastActionPosition_;
    /**
     * <code>optional sint32 lastActionPosition = 11;</code>
     *
     * <pre>
     *上一个行动的玩家位置
     * </pre>
     */
    public boolean hasLastActionPosition() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional sint32 lastActionPosition = 11;</code>
     *
     * <pre>
     *上一个行动的玩家位置
     * </pre>
     */
    public int getLastActionPosition() {
      return lastActionPosition_;
    }

    // repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;
    public static final int CARDINDESK_FIELD_NUMBER = 12;
    private java.util.List<packet.ddz.DDZ.DDZGameCardInDesk> cardInDesk_;
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    public java.util.List<packet.ddz.DDZ.DDZGameCardInDesk> getCardInDeskList() {
      return cardInDesk_;
    }
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    public java.util.List<? extends packet.ddz.DDZ.DDZGameCardInDeskOrBuilder> 
        getCardInDeskOrBuilderList() {
      return cardInDesk_;
    }
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    public int getCardInDeskCount() {
      return cardInDesk_.size();
    }
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    public packet.ddz.DDZ.DDZGameCardInDesk getCardInDesk(int index) {
      return cardInDesk_.get(index);
    }
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    public packet.ddz.DDZ.DDZGameCardInDeskOrBuilder getCardInDeskOrBuilder(
        int index) {
      return cardInDesk_.get(index);
    }

    // repeated sint32 DiPai = 14;
    public static final int DIPAI_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> diPai_;
    /**
     * <code>repeated sint32 DiPai = 14;</code>
     *
     * <pre>
     *三张底牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDiPaiList() {
      return diPai_;
    }
    /**
     * <code>repeated sint32 DiPai = 14;</code>
     *
     * <pre>
     *三张底牌
     * </pre>
     */
    public int getDiPaiCount() {
      return diPai_.size();
    }
    /**
     * <code>repeated sint32 DiPai = 14;</code>
     *
     * <pre>
     *三张底牌
     * </pre>
     */
    public int getDiPai(int index) {
      return diPai_.get(index);
    }

    // optional sint32 robNum = 15;
    public static final int ROBNUM_FIELD_NUMBER = 15;
    private int robNum_;
    /**
     * <code>optional sint32 robNum = 15;</code>
     *
     * <pre>
     *抢地主的分数
     * </pre>
     */
    public boolean hasRobNum() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional sint32 robNum = 15;</code>
     *
     * <pre>
     *抢地主的分数
     * </pre>
     */
    public int getRobNum() {
      return robNum_;
    }

    // repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;
    public static final int PLAYERCARDLEFT_FIELD_NUMBER = 16;
    private java.util.List<packet.ddz.DDZ.DDZPlayerCard> playerCardLeft_;
    /**
     * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
     *
     * <pre>
     *玩家剩余牌数,是否加倍等情况
     * </pre>
     */
    public java.util.List<packet.ddz.DDZ.DDZPlayerCard> getPlayerCardLeftList() {
      return playerCardLeft_;
    }
    /**
     * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
     *
     * <pre>
     *玩家剩余牌数,是否加倍等情况
     * </pre>
     */
    public java.util.List<? extends packet.ddz.DDZ.DDZPlayerCardOrBuilder> 
        getPlayerCardLeftOrBuilderList() {
      return playerCardLeft_;
    }
    /**
     * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
     *
     * <pre>
     *玩家剩余牌数,是否加倍等情况
     * </pre>
     */
    public int getPlayerCardLeftCount() {
      return playerCardLeft_.size();
    }
    /**
     * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
     *
     * <pre>
     *玩家剩余牌数,是否加倍等情况
     * </pre>
     */
    public packet.ddz.DDZ.DDZPlayerCard getPlayerCardLeft(int index) {
      return playerCardLeft_.get(index);
    }
    /**
     * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
     *
     * <pre>
     *玩家剩余牌数,是否加倍等情况
     * </pre>
     */
    public packet.ddz.DDZ.DDZPlayerCardOrBuilder getPlayerCardLeftOrBuilder(
        int index) {
      return playerCardLeft_.get(index);
    }

    // optional sint32 rangPaiNum = 17;
    public static final int RANGPAINUM_FIELD_NUMBER = 17;
    private int rangPaiNum_;
    /**
     * <code>optional sint32 rangPaiNum = 17;</code>
     *
     * <pre>
     *让牌数(二人斗地主)
     * </pre>
     */
    public boolean hasRangPaiNum() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional sint32 rangPaiNum = 17;</code>
     *
     * <pre>
     *让牌数(二人斗地主)
     * </pre>
     */
    public int getRangPaiNum() {
      return rangPaiNum_;
    }

    private void initFields() {
      bankerPos_ = 0;
      serviceGold_ = 0;
      playerHandCards_ = java.util.Collections.emptyList();
      quanNum_ = 0;
      seq_ = 0;
      reconnect_ = false;
      cardLeft_ = java.util.Collections.emptyList();
      multiple_ = 0;
      lunNum_ = 0;
      lastActionCard_ = java.util.Collections.emptyList();
      lastActionPosition_ = 0;
      cardInDesk_ = java.util.Collections.emptyList();
      diPai_ = java.util.Collections.emptyList();
      robNum_ = 0;
      playerCardLeft_ = java.util.Collections.emptyList();
      rangPaiNum_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasServiceGold()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getPlayerHandCardsCount(); i++) {
        if (!getPlayerHandCards(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getCardInDeskCount(); i++) {
        if (!getCardInDesk(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getPlayerCardLeftCount(); i++) {
        if (!getPlayerCardLeft(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, bankerPos_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, serviceGold_);
      }
      for (int i = 0; i < playerHandCards_.size(); i++) {
        output.writeMessage(3, playerHandCards_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(4, quanNum_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(5, seq_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(6, reconnect_);
      }
      for (int i = 0; i < cardLeft_.size(); i++) {
        output.writeSInt32(7, cardLeft_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(8, multiple_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(9, lunNum_);
      }
      for (int i = 0; i < lastActionCard_.size(); i++) {
        output.writeSInt32(10, lastActionCard_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeSInt32(11, lastActionPosition_);
      }
      for (int i = 0; i < cardInDesk_.size(); i++) {
        output.writeMessage(12, cardInDesk_.get(i));
      }
      for (int i = 0; i < diPai_.size(); i++) {
        output.writeSInt32(14, diPai_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeSInt32(15, robNum_);
      }
      for (int i = 0; i < playerCardLeft_.size(); i++) {
        output.writeMessage(16, playerCardLeft_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeSInt32(17, rangPaiNum_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, bankerPos_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, serviceGold_);
      }
      for (int i = 0; i < playerHandCards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, playerHandCards_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, quanNum_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, seq_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, reconnect_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardLeft_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(cardLeft_.get(i));
        }
        size += dataSize;
        size += 1 * getCardLeftList().size();
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(8, multiple_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(9, lunNum_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < lastActionCard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(lastActionCard_.get(i));
        }
        size += dataSize;
        size += 1 * getLastActionCardList().size();
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(11, lastActionPosition_);
      }
      for (int i = 0; i < cardInDesk_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, cardInDesk_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < diPai_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(diPai_.get(i));
        }
        size += dataSize;
        size += 1 * getDiPaiList().size();
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(15, robNum_);
      }
      for (int i = 0; i < playerCardLeft_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, playerCardLeft_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(17, rangPaiNum_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.ddz.DDZ.DDZGameOperStartSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperStartSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperStartSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperStartSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperStartSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperStartSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperStartSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperStartSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperStartSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperStartSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.ddz.DDZ.DDZGameOperStartSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.ddz.DDZGameOperStartSyn}
     *
     * <pre>
     *游戏开始 operType=GAMESTART
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.ddz.DDZ.DDZGameOperStartSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperStartSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperStartSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.ddz.DDZ.DDZGameOperStartSyn.class, packet.ddz.DDZ.DDZGameOperStartSyn.Builder.class);
      }

      // Construct using packet.ddz.DDZ.DDZGameOperStartSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPlayerHandCardsFieldBuilder();
          getCardInDeskFieldBuilder();
          getPlayerCardLeftFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPos_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        serviceGold_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (playerHandCardsBuilder_ == null) {
          playerHandCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          playerHandCardsBuilder_.clear();
        }
        quanNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        seq_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        reconnect_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        cardLeft_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        multiple_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        lunNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        lastActionCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        lastActionPosition_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        if (cardInDeskBuilder_ == null) {
          cardInDesk_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
        } else {
          cardInDeskBuilder_.clear();
        }
        diPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        robNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        if (playerCardLeftBuilder_ == null) {
          playerCardLeft_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00004000);
        } else {
          playerCardLeftBuilder_.clear();
        }
        rangPaiNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperStartSyn_descriptor;
      }

      public packet.ddz.DDZ.DDZGameOperStartSyn getDefaultInstanceForType() {
        return packet.ddz.DDZ.DDZGameOperStartSyn.getDefaultInstance();
      }

      public packet.ddz.DDZ.DDZGameOperStartSyn build() {
        packet.ddz.DDZ.DDZGameOperStartSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.ddz.DDZ.DDZGameOperStartSyn buildPartial() {
        packet.ddz.DDZ.DDZGameOperStartSyn result = new packet.ddz.DDZ.DDZGameOperStartSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPos_ = bankerPos_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.serviceGold_ = serviceGold_;
        if (playerHandCardsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            playerHandCards_ = java.util.Collections.unmodifiableList(playerHandCards_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.playerHandCards_ = playerHandCards_;
        } else {
          result.playerHandCards_ = playerHandCardsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.quanNum_ = quanNum_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.seq_ = seq_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.reconnect_ = reconnect_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          cardLeft_ = java.util.Collections.unmodifiableList(cardLeft_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.cardLeft_ = cardLeft_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.multiple_ = multiple_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.lunNum_ = lunNum_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          lastActionCard_ = java.util.Collections.unmodifiableList(lastActionCard_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.lastActionCard_ = lastActionCard_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000080;
        }
        result.lastActionPosition_ = lastActionPosition_;
        if (cardInDeskBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800)) {
            cardInDesk_ = java.util.Collections.unmodifiableList(cardInDesk_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.cardInDesk_ = cardInDesk_;
        } else {
          result.cardInDesk_ = cardInDeskBuilder_.build();
        }
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          diPai_ = java.util.Collections.unmodifiableList(diPai_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.diPai_ = diPai_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.robNum_ = robNum_;
        if (playerCardLeftBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000)) {
            playerCardLeft_ = java.util.Collections.unmodifiableList(playerCardLeft_);
            bitField0_ = (bitField0_ & ~0x00004000);
          }
          result.playerCardLeft_ = playerCardLeft_;
        } else {
          result.playerCardLeft_ = playerCardLeftBuilder_.build();
        }
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.rangPaiNum_ = rangPaiNum_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.ddz.DDZ.DDZGameOperStartSyn) {
          return mergeFrom((packet.ddz.DDZ.DDZGameOperStartSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.ddz.DDZ.DDZGameOperStartSyn other) {
        if (other == packet.ddz.DDZ.DDZGameOperStartSyn.getDefaultInstance()) return this;
        if (other.hasBankerPos()) {
          setBankerPos(other.getBankerPos());
        }
        if (other.hasServiceGold()) {
          setServiceGold(other.getServiceGold());
        }
        if (playerHandCardsBuilder_ == null) {
          if (!other.playerHandCards_.isEmpty()) {
            if (playerHandCards_.isEmpty()) {
              playerHandCards_ = other.playerHandCards_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensurePlayerHandCardsIsMutable();
              playerHandCards_.addAll(other.playerHandCards_);
            }
            onChanged();
          }
        } else {
          if (!other.playerHandCards_.isEmpty()) {
            if (playerHandCardsBuilder_.isEmpty()) {
              playerHandCardsBuilder_.dispose();
              playerHandCardsBuilder_ = null;
              playerHandCards_ = other.playerHandCards_;
              bitField0_ = (bitField0_ & ~0x00000004);
              playerHandCardsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayerHandCardsFieldBuilder() : null;
            } else {
              playerHandCardsBuilder_.addAllMessages(other.playerHandCards_);
            }
          }
        }
        if (other.hasQuanNum()) {
          setQuanNum(other.getQuanNum());
        }
        if (other.hasSeq()) {
          setSeq(other.getSeq());
        }
        if (other.hasReconnect()) {
          setReconnect(other.getReconnect());
        }
        if (!other.cardLeft_.isEmpty()) {
          if (cardLeft_.isEmpty()) {
            cardLeft_ = other.cardLeft_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureCardLeftIsMutable();
            cardLeft_.addAll(other.cardLeft_);
          }
          onChanged();
        }
        if (other.hasMultiple()) {
          setMultiple(other.getMultiple());
        }
        if (other.hasLunNum()) {
          setLunNum(other.getLunNum());
        }
        if (!other.lastActionCard_.isEmpty()) {
          if (lastActionCard_.isEmpty()) {
            lastActionCard_ = other.lastActionCard_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureLastActionCardIsMutable();
            lastActionCard_.addAll(other.lastActionCard_);
          }
          onChanged();
        }
        if (other.hasLastActionPosition()) {
          setLastActionPosition(other.getLastActionPosition());
        }
        if (cardInDeskBuilder_ == null) {
          if (!other.cardInDesk_.isEmpty()) {
            if (cardInDesk_.isEmpty()) {
              cardInDesk_ = other.cardInDesk_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensureCardInDeskIsMutable();
              cardInDesk_.addAll(other.cardInDesk_);
            }
            onChanged();
          }
        } else {
          if (!other.cardInDesk_.isEmpty()) {
            if (cardInDeskBuilder_.isEmpty()) {
              cardInDeskBuilder_.dispose();
              cardInDeskBuilder_ = null;
              cardInDesk_ = other.cardInDesk_;
              bitField0_ = (bitField0_ & ~0x00000800);
              cardInDeskBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardInDeskFieldBuilder() : null;
            } else {
              cardInDeskBuilder_.addAllMessages(other.cardInDesk_);
            }
          }
        }
        if (!other.diPai_.isEmpty()) {
          if (diPai_.isEmpty()) {
            diPai_ = other.diPai_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureDiPaiIsMutable();
            diPai_.addAll(other.diPai_);
          }
          onChanged();
        }
        if (other.hasRobNum()) {
          setRobNum(other.getRobNum());
        }
        if (playerCardLeftBuilder_ == null) {
          if (!other.playerCardLeft_.isEmpty()) {
            if (playerCardLeft_.isEmpty()) {
              playerCardLeft_ = other.playerCardLeft_;
              bitField0_ = (bitField0_ & ~0x00004000);
            } else {
              ensurePlayerCardLeftIsMutable();
              playerCardLeft_.addAll(other.playerCardLeft_);
            }
            onChanged();
          }
        } else {
          if (!other.playerCardLeft_.isEmpty()) {
            if (playerCardLeftBuilder_.isEmpty()) {
              playerCardLeftBuilder_.dispose();
              playerCardLeftBuilder_ = null;
              playerCardLeft_ = other.playerCardLeft_;
              bitField0_ = (bitField0_ & ~0x00004000);
              playerCardLeftBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayerCardLeftFieldBuilder() : null;
            } else {
              playerCardLeftBuilder_.addAllMessages(other.playerCardLeft_);
            }
          }
        }
        if (other.hasRangPaiNum()) {
          setRangPaiNum(other.getRangPaiNum());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasServiceGold()) {
          
          return false;
        }
        for (int i = 0; i < getPlayerHandCardsCount(); i++) {
          if (!getPlayerHandCards(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getCardInDeskCount(); i++) {
          if (!getCardInDesk(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getPlayerCardLeftCount(); i++) {
          if (!getPlayerCardLeft(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.ddz.DDZ.DDZGameOperStartSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.ddz.DDZ.DDZGameOperStartSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional sint32 bankerPos = 1;
      private int bankerPos_ ;
      /**
       * <code>optional sint32 bankerPos = 1;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public boolean hasBankerPos() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sint32 bankerPos = 1;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public int getBankerPos() {
        return bankerPos_;
      }
      /**
       * <code>optional sint32 bankerPos = 1;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public Builder setBankerPos(int value) {
        bitField0_ |= 0x00000001;
        bankerPos_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 bankerPos = 1;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public Builder clearBankerPos() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPos_ = 0;
        onChanged();
        return this;
      }

      // required sint32 serviceGold = 2;
      private int serviceGold_ ;
      /**
       * <code>required sint32 serviceGold = 2;</code>
       *
       * <pre>
       *台费
       * </pre>
       */
      public boolean hasServiceGold() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 serviceGold = 2;</code>
       *
       * <pre>
       *台费
       * </pre>
       */
      public int getServiceGold() {
        return serviceGold_;
      }
      /**
       * <code>required sint32 serviceGold = 2;</code>
       *
       * <pre>
       *台费
       * </pre>
       */
      public Builder setServiceGold(int value) {
        bitField0_ |= 0x00000002;
        serviceGold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 serviceGold = 2;</code>
       *
       * <pre>
       *台费
       * </pre>
       */
      public Builder clearServiceGold() {
        bitField0_ = (bitField0_ & ~0x00000002);
        serviceGold_ = 0;
        onChanged();
        return this;
      }

      // repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;
      private java.util.List<packet.ddz.DDZ.DDZGameOperHandCardSyn> playerHandCards_ =
        java.util.Collections.emptyList();
      private void ensurePlayerHandCardsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          playerHandCards_ = new java.util.ArrayList<packet.ddz.DDZ.DDZGameOperHandCardSyn>(playerHandCards_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZGameOperHandCardSyn, packet.ddz.DDZ.DDZGameOperHandCardSyn.Builder, packet.ddz.DDZ.DDZGameOperHandCardSynOrBuilder> playerHandCardsBuilder_;

      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZGameOperHandCardSyn> getPlayerHandCardsList() {
        if (playerHandCardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(playerHandCards_);
        } else {
          return playerHandCardsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public int getPlayerHandCardsCount() {
        if (playerHandCardsBuilder_ == null) {
          return playerHandCards_.size();
        } else {
          return playerHandCardsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperHandCardSyn getPlayerHandCards(int index) {
        if (playerHandCardsBuilder_ == null) {
          return playerHandCards_.get(index);
        } else {
          return playerHandCardsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder setPlayerHandCards(
          int index, packet.ddz.DDZ.DDZGameOperHandCardSyn value) {
        if (playerHandCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.set(index, value);
          onChanged();
        } else {
          playerHandCardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder setPlayerHandCards(
          int index, packet.ddz.DDZ.DDZGameOperHandCardSyn.Builder builderForValue) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.set(index, builderForValue.build());
          onChanged();
        } else {
          playerHandCardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(packet.ddz.DDZ.DDZGameOperHandCardSyn value) {
        if (playerHandCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(value);
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(
          int index, packet.ddz.DDZ.DDZGameOperHandCardSyn value) {
        if (playerHandCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(index, value);
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(
          packet.ddz.DDZ.DDZGameOperHandCardSyn.Builder builderForValue) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(builderForValue.build());
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(
          int index, packet.ddz.DDZ.DDZGameOperHandCardSyn.Builder builderForValue) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(index, builderForValue.build());
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addAllPlayerHandCards(
          java.lang.Iterable<? extends packet.ddz.DDZ.DDZGameOperHandCardSyn> values) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          super.addAll(values, playerHandCards_);
          onChanged();
        } else {
          playerHandCardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder clearPlayerHandCards() {
        if (playerHandCardsBuilder_ == null) {
          playerHandCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          playerHandCardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder removePlayerHandCards(int index) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.remove(index);
          onChanged();
        } else {
          playerHandCardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperHandCardSyn.Builder getPlayerHandCardsBuilder(
          int index) {
        return getPlayerHandCardsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperHandCardSynOrBuilder getPlayerHandCardsOrBuilder(
          int index) {
        if (playerHandCardsBuilder_ == null) {
          return playerHandCards_.get(index);  } else {
          return playerHandCardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public java.util.List<? extends packet.ddz.DDZ.DDZGameOperHandCardSynOrBuilder> 
           getPlayerHandCardsOrBuilderList() {
        if (playerHandCardsBuilder_ != null) {
          return playerHandCardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(playerHandCards_);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperHandCardSyn.Builder addPlayerHandCardsBuilder() {
        return getPlayerHandCardsFieldBuilder().addBuilder(
            packet.ddz.DDZ.DDZGameOperHandCardSyn.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperHandCardSyn.Builder addPlayerHandCardsBuilder(
          int index) {
        return getPlayerHandCardsFieldBuilder().addBuilder(
            index, packet.ddz.DDZ.DDZGameOperHandCardSyn.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperHandCardSyn playerHandCards = 3;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZGameOperHandCardSyn.Builder> 
           getPlayerHandCardsBuilderList() {
        return getPlayerHandCardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZGameOperHandCardSyn, packet.ddz.DDZ.DDZGameOperHandCardSyn.Builder, packet.ddz.DDZ.DDZGameOperHandCardSynOrBuilder> 
          getPlayerHandCardsFieldBuilder() {
        if (playerHandCardsBuilder_ == null) {
          playerHandCardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.ddz.DDZ.DDZGameOperHandCardSyn, packet.ddz.DDZ.DDZGameOperHandCardSyn.Builder, packet.ddz.DDZ.DDZGameOperHandCardSynOrBuilder>(
                  playerHandCards_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          playerHandCards_ = null;
        }
        return playerHandCardsBuilder_;
      }

      // optional sint32 quanNum = 4;
      private int quanNum_ ;
      /**
       * <code>optional sint32 quanNum = 4;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public boolean hasQuanNum() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 quanNum = 4;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public int getQuanNum() {
        return quanNum_;
      }
      /**
       * <code>optional sint32 quanNum = 4;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder setQuanNum(int value) {
        bitField0_ |= 0x00000008;
        quanNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 quanNum = 4;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder clearQuanNum() {
        bitField0_ = (bitField0_ & ~0x00000008);
        quanNum_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 seq = 5;
      private int seq_ ;
      /**
       * <code>optional sint32 seq = 5;</code>
       *
       * <pre>
       *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
       * </pre>
       */
      public boolean hasSeq() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 seq = 5;</code>
       *
       * <pre>
       *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
       * </pre>
       */
      public int getSeq() {
        return seq_;
      }
      /**
       * <code>optional sint32 seq = 5;</code>
       *
       * <pre>
       *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
       * </pre>
       */
      public Builder setSeq(int value) {
        bitField0_ |= 0x00000010;
        seq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 seq = 5;</code>
       *
       * <pre>
       *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
       * </pre>
       */
      public Builder clearSeq() {
        bitField0_ = (bitField0_ & ~0x00000010);
        seq_ = 0;
        onChanged();
        return this;
      }

      // optional bool reconnect = 6;
      private boolean reconnect_ ;
      /**
       * <code>optional bool reconnect = 6;</code>
       *
       * <pre>
       *是否是断线重连 true是断线重连
       * </pre>
       */
      public boolean hasReconnect() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool reconnect = 6;</code>
       *
       * <pre>
       *是否是断线重连 true是断线重连
       * </pre>
       */
      public boolean getReconnect() {
        return reconnect_;
      }
      /**
       * <code>optional bool reconnect = 6;</code>
       *
       * <pre>
       *是否是断线重连 true是断线重连
       * </pre>
       */
      public Builder setReconnect(boolean value) {
        bitField0_ |= 0x00000020;
        reconnect_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool reconnect = 6;</code>
       *
       * <pre>
       *是否是断线重连 true是断线重连
       * </pre>
       */
      public Builder clearReconnect() {
        bitField0_ = (bitField0_ & ~0x00000020);
        reconnect_ = false;
        onChanged();
        return this;
      }

      // repeated sint32 cardLeft = 7;
      private java.util.List<java.lang.Integer> cardLeft_ = java.util.Collections.emptyList();
      private void ensureCardLeftIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          cardLeft_ = new java.util.ArrayList<java.lang.Integer>(cardLeft_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated sint32 cardLeft = 7;</code>
       *
       * <pre>
       *剩余牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardLeftList() {
        return java.util.Collections.unmodifiableList(cardLeft_);
      }
      /**
       * <code>repeated sint32 cardLeft = 7;</code>
       *
       * <pre>
       *剩余牌
       * </pre>
       */
      public int getCardLeftCount() {
        return cardLeft_.size();
      }
      /**
       * <code>repeated sint32 cardLeft = 7;</code>
       *
       * <pre>
       *剩余牌
       * </pre>
       */
      public int getCardLeft(int index) {
        return cardLeft_.get(index);
      }
      /**
       * <code>repeated sint32 cardLeft = 7;</code>
       *
       * <pre>
       *剩余牌
       * </pre>
       */
      public Builder setCardLeft(
          int index, int value) {
        ensureCardLeftIsMutable();
        cardLeft_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardLeft = 7;</code>
       *
       * <pre>
       *剩余牌
       * </pre>
       */
      public Builder addCardLeft(int value) {
        ensureCardLeftIsMutable();
        cardLeft_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardLeft = 7;</code>
       *
       * <pre>
       *剩余牌
       * </pre>
       */
      public Builder addAllCardLeft(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardLeftIsMutable();
        super.addAll(values, cardLeft_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardLeft = 7;</code>
       *
       * <pre>
       *剩余牌
       * </pre>
       */
      public Builder clearCardLeft() {
        cardLeft_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // optional sint32 multiple = 8;
      private int multiple_ ;
      /**
       * <code>optional sint32 multiple = 8;</code>
       *
       * <pre>
       *当前桌子的倍数
       * </pre>
       */
      public boolean hasMultiple() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional sint32 multiple = 8;</code>
       *
       * <pre>
       *当前桌子的倍数
       * </pre>
       */
      public int getMultiple() {
        return multiple_;
      }
      /**
       * <code>optional sint32 multiple = 8;</code>
       *
       * <pre>
       *当前桌子的倍数
       * </pre>
       */
      public Builder setMultiple(int value) {
        bitField0_ |= 0x00000080;
        multiple_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 multiple = 8;</code>
       *
       * <pre>
       *当前桌子的倍数
       * </pre>
       */
      public Builder clearMultiple() {
        bitField0_ = (bitField0_ & ~0x00000080);
        multiple_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 lunNum = 9;
      private int lunNum_ ;
      /**
       * <code>optional sint32 lunNum = 9;</code>
       *
       * <pre>
       *比赛场第几轮
       * </pre>
       */
      public boolean hasLunNum() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional sint32 lunNum = 9;</code>
       *
       * <pre>
       *比赛场第几轮
       * </pre>
       */
      public int getLunNum() {
        return lunNum_;
      }
      /**
       * <code>optional sint32 lunNum = 9;</code>
       *
       * <pre>
       *比赛场第几轮
       * </pre>
       */
      public Builder setLunNum(int value) {
        bitField0_ |= 0x00000100;
        lunNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 lunNum = 9;</code>
       *
       * <pre>
       *比赛场第几轮
       * </pre>
       */
      public Builder clearLunNum() {
        bitField0_ = (bitField0_ & ~0x00000100);
        lunNum_ = 0;
        onChanged();
        return this;
      }

      // repeated sint32 lastActionCard = 10;
      private java.util.List<java.lang.Integer> lastActionCard_ = java.util.Collections.emptyList();
      private void ensureLastActionCardIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          lastActionCard_ = new java.util.ArrayList<java.lang.Integer>(lastActionCard_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated sint32 lastActionCard = 10;</code>
       *
       * <pre>
       *上一个行动的牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getLastActionCardList() {
        return java.util.Collections.unmodifiableList(lastActionCard_);
      }
      /**
       * <code>repeated sint32 lastActionCard = 10;</code>
       *
       * <pre>
       *上一个行动的牌
       * </pre>
       */
      public int getLastActionCardCount() {
        return lastActionCard_.size();
      }
      /**
       * <code>repeated sint32 lastActionCard = 10;</code>
       *
       * <pre>
       *上一个行动的牌
       * </pre>
       */
      public int getLastActionCard(int index) {
        return lastActionCard_.get(index);
      }
      /**
       * <code>repeated sint32 lastActionCard = 10;</code>
       *
       * <pre>
       *上一个行动的牌
       * </pre>
       */
      public Builder setLastActionCard(
          int index, int value) {
        ensureLastActionCardIsMutable();
        lastActionCard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 lastActionCard = 10;</code>
       *
       * <pre>
       *上一个行动的牌
       * </pre>
       */
      public Builder addLastActionCard(int value) {
        ensureLastActionCardIsMutable();
        lastActionCard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 lastActionCard = 10;</code>
       *
       * <pre>
       *上一个行动的牌
       * </pre>
       */
      public Builder addAllLastActionCard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLastActionCardIsMutable();
        super.addAll(values, lastActionCard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 lastActionCard = 10;</code>
       *
       * <pre>
       *上一个行动的牌
       * </pre>
       */
      public Builder clearLastActionCard() {
        lastActionCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // optional sint32 lastActionPosition = 11;
      private int lastActionPosition_ ;
      /**
       * <code>optional sint32 lastActionPosition = 11;</code>
       *
       * <pre>
       *上一个行动的玩家位置
       * </pre>
       */
      public boolean hasLastActionPosition() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional sint32 lastActionPosition = 11;</code>
       *
       * <pre>
       *上一个行动的玩家位置
       * </pre>
       */
      public int getLastActionPosition() {
        return lastActionPosition_;
      }
      /**
       * <code>optional sint32 lastActionPosition = 11;</code>
       *
       * <pre>
       *上一个行动的玩家位置
       * </pre>
       */
      public Builder setLastActionPosition(int value) {
        bitField0_ |= 0x00000400;
        lastActionPosition_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 lastActionPosition = 11;</code>
       *
       * <pre>
       *上一个行动的玩家位置
       * </pre>
       */
      public Builder clearLastActionPosition() {
        bitField0_ = (bitField0_ & ~0x00000400);
        lastActionPosition_ = 0;
        onChanged();
        return this;
      }

      // repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;
      private java.util.List<packet.ddz.DDZ.DDZGameCardInDesk> cardInDesk_ =
        java.util.Collections.emptyList();
      private void ensureCardInDeskIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          cardInDesk_ = new java.util.ArrayList<packet.ddz.DDZ.DDZGameCardInDesk>(cardInDesk_);
          bitField0_ |= 0x00000800;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZGameCardInDesk, packet.ddz.DDZ.DDZGameCardInDesk.Builder, packet.ddz.DDZ.DDZGameCardInDeskOrBuilder> cardInDeskBuilder_;

      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZGameCardInDesk> getCardInDeskList() {
        if (cardInDeskBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardInDesk_);
        } else {
          return cardInDeskBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public int getCardInDeskCount() {
        if (cardInDeskBuilder_ == null) {
          return cardInDesk_.size();
        } else {
          return cardInDeskBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameCardInDesk getCardInDesk(int index) {
        if (cardInDeskBuilder_ == null) {
          return cardInDesk_.get(index);
        } else {
          return cardInDeskBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder setCardInDesk(
          int index, packet.ddz.DDZ.DDZGameCardInDesk value) {
        if (cardInDeskBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardInDeskIsMutable();
          cardInDesk_.set(index, value);
          onChanged();
        } else {
          cardInDeskBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder setCardInDesk(
          int index, packet.ddz.DDZ.DDZGameCardInDesk.Builder builderForValue) {
        if (cardInDeskBuilder_ == null) {
          ensureCardInDeskIsMutable();
          cardInDesk_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardInDeskBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder addCardInDesk(packet.ddz.DDZ.DDZGameCardInDesk value) {
        if (cardInDeskBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardInDeskIsMutable();
          cardInDesk_.add(value);
          onChanged();
        } else {
          cardInDeskBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder addCardInDesk(
          int index, packet.ddz.DDZ.DDZGameCardInDesk value) {
        if (cardInDeskBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardInDeskIsMutable();
          cardInDesk_.add(index, value);
          onChanged();
        } else {
          cardInDeskBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder addCardInDesk(
          packet.ddz.DDZ.DDZGameCardInDesk.Builder builderForValue) {
        if (cardInDeskBuilder_ == null) {
          ensureCardInDeskIsMutable();
          cardInDesk_.add(builderForValue.build());
          onChanged();
        } else {
          cardInDeskBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder addCardInDesk(
          int index, packet.ddz.DDZ.DDZGameCardInDesk.Builder builderForValue) {
        if (cardInDeskBuilder_ == null) {
          ensureCardInDeskIsMutable();
          cardInDesk_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardInDeskBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder addAllCardInDesk(
          java.lang.Iterable<? extends packet.ddz.DDZ.DDZGameCardInDesk> values) {
        if (cardInDeskBuilder_ == null) {
          ensureCardInDeskIsMutable();
          super.addAll(values, cardInDesk_);
          onChanged();
        } else {
          cardInDeskBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder clearCardInDesk() {
        if (cardInDeskBuilder_ == null) {
          cardInDesk_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
        } else {
          cardInDeskBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder removeCardInDesk(int index) {
        if (cardInDeskBuilder_ == null) {
          ensureCardInDeskIsMutable();
          cardInDesk_.remove(index);
          onChanged();
        } else {
          cardInDeskBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameCardInDesk.Builder getCardInDeskBuilder(
          int index) {
        return getCardInDeskFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameCardInDeskOrBuilder getCardInDeskOrBuilder(
          int index) {
        if (cardInDeskBuilder_ == null) {
          return cardInDesk_.get(index);  } else {
          return cardInDeskBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public java.util.List<? extends packet.ddz.DDZ.DDZGameCardInDeskOrBuilder> 
           getCardInDeskOrBuilderList() {
        if (cardInDeskBuilder_ != null) {
          return cardInDeskBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardInDesk_);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameCardInDesk.Builder addCardInDeskBuilder() {
        return getCardInDeskFieldBuilder().addBuilder(
            packet.ddz.DDZ.DDZGameCardInDesk.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameCardInDesk.Builder addCardInDeskBuilder(
          int index) {
        return getCardInDeskFieldBuilder().addBuilder(
            index, packet.ddz.DDZ.DDZGameCardInDesk.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 12;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZGameCardInDesk.Builder> 
           getCardInDeskBuilderList() {
        return getCardInDeskFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZGameCardInDesk, packet.ddz.DDZ.DDZGameCardInDesk.Builder, packet.ddz.DDZ.DDZGameCardInDeskOrBuilder> 
          getCardInDeskFieldBuilder() {
        if (cardInDeskBuilder_ == null) {
          cardInDeskBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.ddz.DDZ.DDZGameCardInDesk, packet.ddz.DDZ.DDZGameCardInDesk.Builder, packet.ddz.DDZ.DDZGameCardInDeskOrBuilder>(
                  cardInDesk_,
                  ((bitField0_ & 0x00000800) == 0x00000800),
                  getParentForChildren(),
                  isClean());
          cardInDesk_ = null;
        }
        return cardInDeskBuilder_;
      }

      // repeated sint32 DiPai = 14;
      private java.util.List<java.lang.Integer> diPai_ = java.util.Collections.emptyList();
      private void ensureDiPaiIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          diPai_ = new java.util.ArrayList<java.lang.Integer>(diPai_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated sint32 DiPai = 14;</code>
       *
       * <pre>
       *三张底牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDiPaiList() {
        return java.util.Collections.unmodifiableList(diPai_);
      }
      /**
       * <code>repeated sint32 DiPai = 14;</code>
       *
       * <pre>
       *三张底牌
       * </pre>
       */
      public int getDiPaiCount() {
        return diPai_.size();
      }
      /**
       * <code>repeated sint32 DiPai = 14;</code>
       *
       * <pre>
       *三张底牌
       * </pre>
       */
      public int getDiPai(int index) {
        return diPai_.get(index);
      }
      /**
       * <code>repeated sint32 DiPai = 14;</code>
       *
       * <pre>
       *三张底牌
       * </pre>
       */
      public Builder setDiPai(
          int index, int value) {
        ensureDiPaiIsMutable();
        diPai_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 DiPai = 14;</code>
       *
       * <pre>
       *三张底牌
       * </pre>
       */
      public Builder addDiPai(int value) {
        ensureDiPaiIsMutable();
        diPai_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 DiPai = 14;</code>
       *
       * <pre>
       *三张底牌
       * </pre>
       */
      public Builder addAllDiPai(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDiPaiIsMutable();
        super.addAll(values, diPai_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 DiPai = 14;</code>
       *
       * <pre>
       *三张底牌
       * </pre>
       */
      public Builder clearDiPai() {
        diPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // optional sint32 robNum = 15;
      private int robNum_ ;
      /**
       * <code>optional sint32 robNum = 15;</code>
       *
       * <pre>
       *抢地主的分数
       * </pre>
       */
      public boolean hasRobNum() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional sint32 robNum = 15;</code>
       *
       * <pre>
       *抢地主的分数
       * </pre>
       */
      public int getRobNum() {
        return robNum_;
      }
      /**
       * <code>optional sint32 robNum = 15;</code>
       *
       * <pre>
       *抢地主的分数
       * </pre>
       */
      public Builder setRobNum(int value) {
        bitField0_ |= 0x00002000;
        robNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 robNum = 15;</code>
       *
       * <pre>
       *抢地主的分数
       * </pre>
       */
      public Builder clearRobNum() {
        bitField0_ = (bitField0_ & ~0x00002000);
        robNum_ = 0;
        onChanged();
        return this;
      }

      // repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;
      private java.util.List<packet.ddz.DDZ.DDZPlayerCard> playerCardLeft_ =
        java.util.Collections.emptyList();
      private void ensurePlayerCardLeftIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          playerCardLeft_ = new java.util.ArrayList<packet.ddz.DDZ.DDZPlayerCard>(playerCardLeft_);
          bitField0_ |= 0x00004000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZPlayerCard, packet.ddz.DDZ.DDZPlayerCard.Builder, packet.ddz.DDZ.DDZPlayerCardOrBuilder> playerCardLeftBuilder_;

      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZPlayerCard> getPlayerCardLeftList() {
        if (playerCardLeftBuilder_ == null) {
          return java.util.Collections.unmodifiableList(playerCardLeft_);
        } else {
          return playerCardLeftBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public int getPlayerCardLeftCount() {
        if (playerCardLeftBuilder_ == null) {
          return playerCardLeft_.size();
        } else {
          return playerCardLeftBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public packet.ddz.DDZ.DDZPlayerCard getPlayerCardLeft(int index) {
        if (playerCardLeftBuilder_ == null) {
          return playerCardLeft_.get(index);
        } else {
          return playerCardLeftBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public Builder setPlayerCardLeft(
          int index, packet.ddz.DDZ.DDZPlayerCard value) {
        if (playerCardLeftBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerCardLeftIsMutable();
          playerCardLeft_.set(index, value);
          onChanged();
        } else {
          playerCardLeftBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public Builder setPlayerCardLeft(
          int index, packet.ddz.DDZ.DDZPlayerCard.Builder builderForValue) {
        if (playerCardLeftBuilder_ == null) {
          ensurePlayerCardLeftIsMutable();
          playerCardLeft_.set(index, builderForValue.build());
          onChanged();
        } else {
          playerCardLeftBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public Builder addPlayerCardLeft(packet.ddz.DDZ.DDZPlayerCard value) {
        if (playerCardLeftBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerCardLeftIsMutable();
          playerCardLeft_.add(value);
          onChanged();
        } else {
          playerCardLeftBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public Builder addPlayerCardLeft(
          int index, packet.ddz.DDZ.DDZPlayerCard value) {
        if (playerCardLeftBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerCardLeftIsMutable();
          playerCardLeft_.add(index, value);
          onChanged();
        } else {
          playerCardLeftBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public Builder addPlayerCardLeft(
          packet.ddz.DDZ.DDZPlayerCard.Builder builderForValue) {
        if (playerCardLeftBuilder_ == null) {
          ensurePlayerCardLeftIsMutable();
          playerCardLeft_.add(builderForValue.build());
          onChanged();
        } else {
          playerCardLeftBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public Builder addPlayerCardLeft(
          int index, packet.ddz.DDZ.DDZPlayerCard.Builder builderForValue) {
        if (playerCardLeftBuilder_ == null) {
          ensurePlayerCardLeftIsMutable();
          playerCardLeft_.add(index, builderForValue.build());
          onChanged();
        } else {
          playerCardLeftBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public Builder addAllPlayerCardLeft(
          java.lang.Iterable<? extends packet.ddz.DDZ.DDZPlayerCard> values) {
        if (playerCardLeftBuilder_ == null) {
          ensurePlayerCardLeftIsMutable();
          super.addAll(values, playerCardLeft_);
          onChanged();
        } else {
          playerCardLeftBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public Builder clearPlayerCardLeft() {
        if (playerCardLeftBuilder_ == null) {
          playerCardLeft_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00004000);
          onChanged();
        } else {
          playerCardLeftBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public Builder removePlayerCardLeft(int index) {
        if (playerCardLeftBuilder_ == null) {
          ensurePlayerCardLeftIsMutable();
          playerCardLeft_.remove(index);
          onChanged();
        } else {
          playerCardLeftBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public packet.ddz.DDZ.DDZPlayerCard.Builder getPlayerCardLeftBuilder(
          int index) {
        return getPlayerCardLeftFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public packet.ddz.DDZ.DDZPlayerCardOrBuilder getPlayerCardLeftOrBuilder(
          int index) {
        if (playerCardLeftBuilder_ == null) {
          return playerCardLeft_.get(index);  } else {
          return playerCardLeftBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public java.util.List<? extends packet.ddz.DDZ.DDZPlayerCardOrBuilder> 
           getPlayerCardLeftOrBuilderList() {
        if (playerCardLeftBuilder_ != null) {
          return playerCardLeftBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(playerCardLeft_);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public packet.ddz.DDZ.DDZPlayerCard.Builder addPlayerCardLeftBuilder() {
        return getPlayerCardLeftFieldBuilder().addBuilder(
            packet.ddz.DDZ.DDZPlayerCard.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public packet.ddz.DDZ.DDZPlayerCard.Builder addPlayerCardLeftBuilder(
          int index) {
        return getPlayerCardLeftFieldBuilder().addBuilder(
            index, packet.ddz.DDZ.DDZPlayerCard.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerCard playerCardLeft = 16;</code>
       *
       * <pre>
       *玩家剩余牌数,是否加倍等情况
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZPlayerCard.Builder> 
           getPlayerCardLeftBuilderList() {
        return getPlayerCardLeftFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZPlayerCard, packet.ddz.DDZ.DDZPlayerCard.Builder, packet.ddz.DDZ.DDZPlayerCardOrBuilder> 
          getPlayerCardLeftFieldBuilder() {
        if (playerCardLeftBuilder_ == null) {
          playerCardLeftBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.ddz.DDZ.DDZPlayerCard, packet.ddz.DDZ.DDZPlayerCard.Builder, packet.ddz.DDZ.DDZPlayerCardOrBuilder>(
                  playerCardLeft_,
                  ((bitField0_ & 0x00004000) == 0x00004000),
                  getParentForChildren(),
                  isClean());
          playerCardLeft_ = null;
        }
        return playerCardLeftBuilder_;
      }

      // optional sint32 rangPaiNum = 17;
      private int rangPaiNum_ ;
      /**
       * <code>optional sint32 rangPaiNum = 17;</code>
       *
       * <pre>
       *让牌数(二人斗地主)
       * </pre>
       */
      public boolean hasRangPaiNum() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional sint32 rangPaiNum = 17;</code>
       *
       * <pre>
       *让牌数(二人斗地主)
       * </pre>
       */
      public int getRangPaiNum() {
        return rangPaiNum_;
      }
      /**
       * <code>optional sint32 rangPaiNum = 17;</code>
       *
       * <pre>
       *让牌数(二人斗地主)
       * </pre>
       */
      public Builder setRangPaiNum(int value) {
        bitField0_ |= 0x00008000;
        rangPaiNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 rangPaiNum = 17;</code>
       *
       * <pre>
       *让牌数(二人斗地主)
       * </pre>
       */
      public Builder clearRangPaiNum() {
        bitField0_ = (bitField0_ & ~0x00008000);
        rangPaiNum_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.ddz.DDZGameOperStartSyn)
    }

    static {
      defaultInstance = new DDZGameOperStartSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.ddz.DDZGameOperStartSyn)
  }

  public interface DDZPlayerCardOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // required sint32 cardNum = 2;
    /**
     * <code>required sint32 cardNum = 2;</code>
     */
    boolean hasCardNum();
    /**
     * <code>required sint32 cardNum = 2;</code>
     */
    int getCardNum();

    // required sint32 jiaBei = 3;
    /**
     * <code>required sint32 jiaBei = 3;</code>
     *
     * <pre>
     *1不加倍,2加倍
     * </pre>
     */
    boolean hasJiaBei();
    /**
     * <code>required sint32 jiaBei = 3;</code>
     *
     * <pre>
     *1不加倍,2加倍
     * </pre>
     */
    int getJiaBei();
  }
  /**
   * Protobuf type {@code packet.ddz.DDZPlayerCard}
   */
  public static final class DDZPlayerCard extends
      com.google.protobuf.GeneratedMessage
      implements DDZPlayerCardOrBuilder {
    // Use DDZPlayerCard.newBuilder() to construct.
    private DDZPlayerCard(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DDZPlayerCard(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DDZPlayerCard defaultInstance;
    public static DDZPlayerCard getDefaultInstance() {
      return defaultInstance;
    }

    public DDZPlayerCard getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DDZPlayerCard(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              cardNum_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              jiaBei_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZPlayerCard_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZPlayerCard_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.ddz.DDZ.DDZPlayerCard.class, packet.ddz.DDZ.DDZPlayerCard.Builder.class);
    }

    public static com.google.protobuf.Parser<DDZPlayerCard> PARSER =
        new com.google.protobuf.AbstractParser<DDZPlayerCard>() {
      public DDZPlayerCard parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DDZPlayerCard(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DDZPlayerCard> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // required sint32 cardNum = 2;
    public static final int CARDNUM_FIELD_NUMBER = 2;
    private int cardNum_;
    /**
     * <code>required sint32 cardNum = 2;</code>
     */
    public boolean hasCardNum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 cardNum = 2;</code>
     */
    public int getCardNum() {
      return cardNum_;
    }

    // required sint32 jiaBei = 3;
    public static final int JIABEI_FIELD_NUMBER = 3;
    private int jiaBei_;
    /**
     * <code>required sint32 jiaBei = 3;</code>
     *
     * <pre>
     *1不加倍,2加倍
     * </pre>
     */
    public boolean hasJiaBei() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required sint32 jiaBei = 3;</code>
     *
     * <pre>
     *1不加倍,2加倍
     * </pre>
     */
    public int getJiaBei() {
      return jiaBei_;
    }

    private void initFields() {
      position_ = 0;
      cardNum_ = 0;
      jiaBei_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCardNum()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasJiaBei()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, cardNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, jiaBei_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, cardNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, jiaBei_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.ddz.DDZ.DDZPlayerCard parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZPlayerCard parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZPlayerCard parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZPlayerCard parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZPlayerCard parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZPlayerCard parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZPlayerCard parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.ddz.DDZ.DDZPlayerCard parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZPlayerCard parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZPlayerCard parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.ddz.DDZ.DDZPlayerCard prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.ddz.DDZPlayerCard}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.ddz.DDZ.DDZPlayerCardOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZPlayerCard_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZPlayerCard_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.ddz.DDZ.DDZPlayerCard.class, packet.ddz.DDZ.DDZPlayerCard.Builder.class);
      }

      // Construct using packet.ddz.DDZ.DDZPlayerCard.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        jiaBei_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZPlayerCard_descriptor;
      }

      public packet.ddz.DDZ.DDZPlayerCard getDefaultInstanceForType() {
        return packet.ddz.DDZ.DDZPlayerCard.getDefaultInstance();
      }

      public packet.ddz.DDZ.DDZPlayerCard build() {
        packet.ddz.DDZ.DDZPlayerCard result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.ddz.DDZ.DDZPlayerCard buildPartial() {
        packet.ddz.DDZ.DDZPlayerCard result = new packet.ddz.DDZ.DDZPlayerCard(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardNum_ = cardNum_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.jiaBei_ = jiaBei_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.ddz.DDZ.DDZPlayerCard) {
          return mergeFrom((packet.ddz.DDZ.DDZPlayerCard)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.ddz.DDZ.DDZPlayerCard other) {
        if (other == packet.ddz.DDZ.DDZPlayerCard.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasCardNum()) {
          setCardNum(other.getCardNum());
        }
        if (other.hasJiaBei()) {
          setJiaBei(other.getJiaBei());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasCardNum()) {
          
          return false;
        }
        if (!hasJiaBei()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.ddz.DDZ.DDZPlayerCard parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.ddz.DDZ.DDZPlayerCard) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // required sint32 cardNum = 2;
      private int cardNum_ ;
      /**
       * <code>required sint32 cardNum = 2;</code>
       */
      public boolean hasCardNum() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 cardNum = 2;</code>
       */
      public int getCardNum() {
        return cardNum_;
      }
      /**
       * <code>required sint32 cardNum = 2;</code>
       */
      public Builder setCardNum(int value) {
        bitField0_ |= 0x00000002;
        cardNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 cardNum = 2;</code>
       */
      public Builder clearCardNum() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cardNum_ = 0;
        onChanged();
        return this;
      }

      // required sint32 jiaBei = 3;
      private int jiaBei_ ;
      /**
       * <code>required sint32 jiaBei = 3;</code>
       *
       * <pre>
       *1不加倍,2加倍
       * </pre>
       */
      public boolean hasJiaBei() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required sint32 jiaBei = 3;</code>
       *
       * <pre>
       *1不加倍,2加倍
       * </pre>
       */
      public int getJiaBei() {
        return jiaBei_;
      }
      /**
       * <code>required sint32 jiaBei = 3;</code>
       *
       * <pre>
       *1不加倍,2加倍
       * </pre>
       */
      public Builder setJiaBei(int value) {
        bitField0_ |= 0x00000004;
        jiaBei_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 jiaBei = 3;</code>
       *
       * <pre>
       *1不加倍,2加倍
       * </pre>
       */
      public Builder clearJiaBei() {
        bitField0_ = (bitField0_ & ~0x00000004);
        jiaBei_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.ddz.DDZPlayerCard)
    }

    static {
      defaultInstance = new DDZPlayerCard(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.ddz.DDZPlayerCard)
  }

  public interface DDZGameOperHandCardSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // repeated sint32 handCards = 2;
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardsList();
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    int getHandCardsCount();
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    int getHandCards(int index);

    // repeated sint32 cardsBefore = 3;
    /**
     * <code>repeated sint32 cardsBefore = 3;</code>
     *
     * <pre>
     *打出的牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsBeforeList();
    /**
     * <code>repeated sint32 cardsBefore = 3;</code>
     *
     * <pre>
     *打出的牌
     * </pre>
     */
    int getCardsBeforeCount();
    /**
     * <code>repeated sint32 cardsBefore = 3;</code>
     *
     * <pre>
     *打出的牌
     * </pre>
     */
    int getCardsBefore(int index);

    // optional sint32 cardNum = 4;
    /**
     * <code>optional sint32 cardNum = 4;</code>
     *
     * <pre>
     *玩家剩余牌数
     * </pre>
     */
    boolean hasCardNum();
    /**
     * <code>optional sint32 cardNum = 4;</code>
     *
     * <pre>
     *玩家剩余牌数
     * </pre>
     */
    int getCardNum();

    // optional sint32 socre = 5;
    /**
     * <code>optional sint32 socre = 5;</code>
     *
     * <pre>
     *玩家自己的分数
     * </pre>
     */
    boolean hasSocre();
    /**
     * <code>optional sint32 socre = 5;</code>
     *
     * <pre>
     *玩家自己的分数
     * </pre>
     */
    int getSocre();

    // optional sint32 needFenCha = 6;
    /**
     * <code>optional sint32 needFenCha = 6;</code>
     *
     * <pre>
     *是否需要分叉,重连时候用,0/不传:不需要,1:需要
     * </pre>
     */
    boolean hasNeedFenCha();
    /**
     * <code>optional sint32 needFenCha = 6;</code>
     *
     * <pre>
     *是否需要分叉,重连时候用,0/不传:不需要,1:需要
     * </pre>
     */
    int getNeedFenCha();
  }
  /**
   * Protobuf type {@code packet.ddz.DDZGameOperHandCardSyn}
   *
   * <pre>
   *同步某个的玩家手牌, operType=HANDCARDS
   * </pre>
   */
  public static final class DDZGameOperHandCardSyn extends
      com.google.protobuf.GeneratedMessage
      implements DDZGameOperHandCardSynOrBuilder {
    // Use DDZGameOperHandCardSyn.newBuilder() to construct.
    private DDZGameOperHandCardSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DDZGameOperHandCardSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DDZGameOperHandCardSyn defaultInstance;
    public static DDZGameOperHandCardSyn getDefaultInstance() {
      return defaultInstance;
    }

    public DDZGameOperHandCardSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DDZGameOperHandCardSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                handCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              handCards_.add(input.readSInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                handCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCards_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardsBefore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardsBefore_.add(input.readSInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                cardsBefore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsBefore_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              cardNum_ = input.readSInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              socre_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              needFenCha_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          handCards_ = java.util.Collections.unmodifiableList(handCards_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardsBefore_ = java.util.Collections.unmodifiableList(cardsBefore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperHandCardSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperHandCardSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.ddz.DDZ.DDZGameOperHandCardSyn.class, packet.ddz.DDZ.DDZGameOperHandCardSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<DDZGameOperHandCardSyn> PARSER =
        new com.google.protobuf.AbstractParser<DDZGameOperHandCardSyn>() {
      public DDZGameOperHandCardSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DDZGameOperHandCardSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DDZGameOperHandCardSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // repeated sint32 handCards = 2;
    public static final int HANDCARDS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> handCards_;
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardsList() {
      return handCards_;
    }
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    public int getHandCardsCount() {
      return handCards_.size();
    }
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    public int getHandCards(int index) {
      return handCards_.get(index);
    }

    // repeated sint32 cardsBefore = 3;
    public static final int CARDSBEFORE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> cardsBefore_;
    /**
     * <code>repeated sint32 cardsBefore = 3;</code>
     *
     * <pre>
     *打出的牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsBeforeList() {
      return cardsBefore_;
    }
    /**
     * <code>repeated sint32 cardsBefore = 3;</code>
     *
     * <pre>
     *打出的牌
     * </pre>
     */
    public int getCardsBeforeCount() {
      return cardsBefore_.size();
    }
    /**
     * <code>repeated sint32 cardsBefore = 3;</code>
     *
     * <pre>
     *打出的牌
     * </pre>
     */
    public int getCardsBefore(int index) {
      return cardsBefore_.get(index);
    }

    // optional sint32 cardNum = 4;
    public static final int CARDNUM_FIELD_NUMBER = 4;
    private int cardNum_;
    /**
     * <code>optional sint32 cardNum = 4;</code>
     *
     * <pre>
     *玩家剩余牌数
     * </pre>
     */
    public boolean hasCardNum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 cardNum = 4;</code>
     *
     * <pre>
     *玩家剩余牌数
     * </pre>
     */
    public int getCardNum() {
      return cardNum_;
    }

    // optional sint32 socre = 5;
    public static final int SOCRE_FIELD_NUMBER = 5;
    private int socre_;
    /**
     * <code>optional sint32 socre = 5;</code>
     *
     * <pre>
     *玩家自己的分数
     * </pre>
     */
    public boolean hasSocre() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 socre = 5;</code>
     *
     * <pre>
     *玩家自己的分数
     * </pre>
     */
    public int getSocre() {
      return socre_;
    }

    // optional sint32 needFenCha = 6;
    public static final int NEEDFENCHA_FIELD_NUMBER = 6;
    private int needFenCha_;
    /**
     * <code>optional sint32 needFenCha = 6;</code>
     *
     * <pre>
     *是否需要分叉,重连时候用,0/不传:不需要,1:需要
     * </pre>
     */
    public boolean hasNeedFenCha() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 needFenCha = 6;</code>
     *
     * <pre>
     *是否需要分叉,重连时候用,0/不传:不需要,1:需要
     * </pre>
     */
    public int getNeedFenCha() {
      return needFenCha_;
    }

    private void initFields() {
      position_ = 0;
      handCards_ = java.util.Collections.emptyList();
      cardsBefore_ = java.util.Collections.emptyList();
      cardNum_ = 0;
      socre_ = 0;
      needFenCha_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      for (int i = 0; i < handCards_.size(); i++) {
        output.writeSInt32(2, handCards_.get(i));
      }
      for (int i = 0; i < cardsBefore_.size(); i++) {
        output.writeSInt32(3, cardsBefore_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(4, cardNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(5, socre_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(6, needFenCha_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(handCards_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsBefore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(cardsBefore_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsBeforeList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, cardNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, socre_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, needFenCha_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.ddz.DDZ.DDZGameOperHandCardSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperHandCardSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperHandCardSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperHandCardSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperHandCardSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperHandCardSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperHandCardSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperHandCardSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperHandCardSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperHandCardSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.ddz.DDZ.DDZGameOperHandCardSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.ddz.DDZGameOperHandCardSyn}
     *
     * <pre>
     *同步某个的玩家手牌, operType=HANDCARDS
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.ddz.DDZ.DDZGameOperHandCardSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperHandCardSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperHandCardSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.ddz.DDZ.DDZGameOperHandCardSyn.class, packet.ddz.DDZ.DDZGameOperHandCardSyn.Builder.class);
      }

      // Construct using packet.ddz.DDZ.DDZGameOperHandCardSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        handCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        cardsBefore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        cardNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        socre_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        needFenCha_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperHandCardSyn_descriptor;
      }

      public packet.ddz.DDZ.DDZGameOperHandCardSyn getDefaultInstanceForType() {
        return packet.ddz.DDZ.DDZGameOperHandCardSyn.getDefaultInstance();
      }

      public packet.ddz.DDZ.DDZGameOperHandCardSyn build() {
        packet.ddz.DDZ.DDZGameOperHandCardSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.ddz.DDZ.DDZGameOperHandCardSyn buildPartial() {
        packet.ddz.DDZ.DDZGameOperHandCardSyn result = new packet.ddz.DDZ.DDZGameOperHandCardSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          handCards_ = java.util.Collections.unmodifiableList(handCards_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.handCards_ = handCards_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsBefore_ = java.util.Collections.unmodifiableList(cardsBefore_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.cardsBefore_ = cardsBefore_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardNum_ = cardNum_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.socre_ = socre_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.needFenCha_ = needFenCha_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.ddz.DDZ.DDZGameOperHandCardSyn) {
          return mergeFrom((packet.ddz.DDZ.DDZGameOperHandCardSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.ddz.DDZ.DDZGameOperHandCardSyn other) {
        if (other == packet.ddz.DDZ.DDZGameOperHandCardSyn.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (!other.handCards_.isEmpty()) {
          if (handCards_.isEmpty()) {
            handCards_ = other.handCards_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureHandCardsIsMutable();
            handCards_.addAll(other.handCards_);
          }
          onChanged();
        }
        if (!other.cardsBefore_.isEmpty()) {
          if (cardsBefore_.isEmpty()) {
            cardsBefore_ = other.cardsBefore_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureCardsBeforeIsMutable();
            cardsBefore_.addAll(other.cardsBefore_);
          }
          onChanged();
        }
        if (other.hasCardNum()) {
          setCardNum(other.getCardNum());
        }
        if (other.hasSocre()) {
          setSocre(other.getSocre());
        }
        if (other.hasNeedFenCha()) {
          setNeedFenCha(other.getNeedFenCha());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.ddz.DDZ.DDZGameOperHandCardSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.ddz.DDZ.DDZGameOperHandCardSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // repeated sint32 handCards = 2;
      private java.util.List<java.lang.Integer> handCards_ = java.util.Collections.emptyList();
      private void ensureHandCardsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          handCards_ = new java.util.ArrayList<java.lang.Integer>(handCards_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardsList() {
        return java.util.Collections.unmodifiableList(handCards_);
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public int getHandCardsCount() {
        return handCards_.size();
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public int getHandCards(int index) {
        return handCards_.get(index);
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public Builder setHandCards(
          int index, int value) {
        ensureHandCardsIsMutable();
        handCards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public Builder addHandCards(int value) {
        ensureHandCardsIsMutable();
        handCards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public Builder addAllHandCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardsIsMutable();
        super.addAll(values, handCards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public Builder clearHandCards() {
        handCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated sint32 cardsBefore = 3;
      private java.util.List<java.lang.Integer> cardsBefore_ = java.util.Collections.emptyList();
      private void ensureCardsBeforeIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsBefore_ = new java.util.ArrayList<java.lang.Integer>(cardsBefore_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated sint32 cardsBefore = 3;</code>
       *
       * <pre>
       *打出的牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsBeforeList() {
        return java.util.Collections.unmodifiableList(cardsBefore_);
      }
      /**
       * <code>repeated sint32 cardsBefore = 3;</code>
       *
       * <pre>
       *打出的牌
       * </pre>
       */
      public int getCardsBeforeCount() {
        return cardsBefore_.size();
      }
      /**
       * <code>repeated sint32 cardsBefore = 3;</code>
       *
       * <pre>
       *打出的牌
       * </pre>
       */
      public int getCardsBefore(int index) {
        return cardsBefore_.get(index);
      }
      /**
       * <code>repeated sint32 cardsBefore = 3;</code>
       *
       * <pre>
       *打出的牌
       * </pre>
       */
      public Builder setCardsBefore(
          int index, int value) {
        ensureCardsBeforeIsMutable();
        cardsBefore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardsBefore = 3;</code>
       *
       * <pre>
       *打出的牌
       * </pre>
       */
      public Builder addCardsBefore(int value) {
        ensureCardsBeforeIsMutable();
        cardsBefore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardsBefore = 3;</code>
       *
       * <pre>
       *打出的牌
       * </pre>
       */
      public Builder addAllCardsBefore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsBeforeIsMutable();
        super.addAll(values, cardsBefore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardsBefore = 3;</code>
       *
       * <pre>
       *打出的牌
       * </pre>
       */
      public Builder clearCardsBefore() {
        cardsBefore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional sint32 cardNum = 4;
      private int cardNum_ ;
      /**
       * <code>optional sint32 cardNum = 4;</code>
       *
       * <pre>
       *玩家剩余牌数
       * </pre>
       */
      public boolean hasCardNum() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 cardNum = 4;</code>
       *
       * <pre>
       *玩家剩余牌数
       * </pre>
       */
      public int getCardNum() {
        return cardNum_;
      }
      /**
       * <code>optional sint32 cardNum = 4;</code>
       *
       * <pre>
       *玩家剩余牌数
       * </pre>
       */
      public Builder setCardNum(int value) {
        bitField0_ |= 0x00000008;
        cardNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 cardNum = 4;</code>
       *
       * <pre>
       *玩家剩余牌数
       * </pre>
       */
      public Builder clearCardNum() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardNum_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 socre = 5;
      private int socre_ ;
      /**
       * <code>optional sint32 socre = 5;</code>
       *
       * <pre>
       *玩家自己的分数
       * </pre>
       */
      public boolean hasSocre() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 socre = 5;</code>
       *
       * <pre>
       *玩家自己的分数
       * </pre>
       */
      public int getSocre() {
        return socre_;
      }
      /**
       * <code>optional sint32 socre = 5;</code>
       *
       * <pre>
       *玩家自己的分数
       * </pre>
       */
      public Builder setSocre(int value) {
        bitField0_ |= 0x00000010;
        socre_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 socre = 5;</code>
       *
       * <pre>
       *玩家自己的分数
       * </pre>
       */
      public Builder clearSocre() {
        bitField0_ = (bitField0_ & ~0x00000010);
        socre_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 needFenCha = 6;
      private int needFenCha_ ;
      /**
       * <code>optional sint32 needFenCha = 6;</code>
       *
       * <pre>
       *是否需要分叉,重连时候用,0/不传:不需要,1:需要
       * </pre>
       */
      public boolean hasNeedFenCha() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 needFenCha = 6;</code>
       *
       * <pre>
       *是否需要分叉,重连时候用,0/不传:不需要,1:需要
       * </pre>
       */
      public int getNeedFenCha() {
        return needFenCha_;
      }
      /**
       * <code>optional sint32 needFenCha = 6;</code>
       *
       * <pre>
       *是否需要分叉,重连时候用,0/不传:不需要,1:需要
       * </pre>
       */
      public Builder setNeedFenCha(int value) {
        bitField0_ |= 0x00000020;
        needFenCha_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 needFenCha = 6;</code>
       *
       * <pre>
       *是否需要分叉,重连时候用,0/不传:不需要,1:需要
       * </pre>
       */
      public Builder clearNeedFenCha() {
        bitField0_ = (bitField0_ & ~0x00000020);
        needFenCha_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.ddz.DDZGameOperHandCardSyn)
    }

    static {
      defaultInstance = new DDZGameOperHandCardSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.ddz.DDZGameOperHandCardSyn)
  }

  public interface DDZGameOperPublicInfoSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated sint32 cardLeft = 1;
    /**
     * <code>repeated sint32 cardLeft = 1;</code>
     *
     * <pre>
     *地主牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardLeftList();
    /**
     * <code>repeated sint32 cardLeft = 1;</code>
     *
     * <pre>
     *地主牌
     * </pre>
     */
    int getCardLeftCount();
    /**
     * <code>repeated sint32 cardLeft = 1;</code>
     *
     * <pre>
     *地主牌
     * </pre>
     */
    int getCardLeft(int index);
  }
  /**
   * Protobuf type {@code packet.ddz.DDZGameOperPublicInfoSyn}
   */
  public static final class DDZGameOperPublicInfoSyn extends
      com.google.protobuf.GeneratedMessage
      implements DDZGameOperPublicInfoSynOrBuilder {
    // Use DDZGameOperPublicInfoSyn.newBuilder() to construct.
    private DDZGameOperPublicInfoSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DDZGameOperPublicInfoSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DDZGameOperPublicInfoSyn defaultInstance;
    public static DDZGameOperPublicInfoSyn getDefaultInstance() {
      return defaultInstance;
    }

    public DDZGameOperPublicInfoSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DDZGameOperPublicInfoSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardLeft_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardLeft_.add(input.readSInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardLeft_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardLeft_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardLeft_ = java.util.Collections.unmodifiableList(cardLeft_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPublicInfoSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPublicInfoSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.ddz.DDZ.DDZGameOperPublicInfoSyn.class, packet.ddz.DDZ.DDZGameOperPublicInfoSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<DDZGameOperPublicInfoSyn> PARSER =
        new com.google.protobuf.AbstractParser<DDZGameOperPublicInfoSyn>() {
      public DDZGameOperPublicInfoSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DDZGameOperPublicInfoSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DDZGameOperPublicInfoSyn> getParserForType() {
      return PARSER;
    }

    // repeated sint32 cardLeft = 1;
    public static final int CARDLEFT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardLeft_;
    /**
     * <code>repeated sint32 cardLeft = 1;</code>
     *
     * <pre>
     *地主牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardLeftList() {
      return cardLeft_;
    }
    /**
     * <code>repeated sint32 cardLeft = 1;</code>
     *
     * <pre>
     *地主牌
     * </pre>
     */
    public int getCardLeftCount() {
      return cardLeft_.size();
    }
    /**
     * <code>repeated sint32 cardLeft = 1;</code>
     *
     * <pre>
     *地主牌
     * </pre>
     */
    public int getCardLeft(int index) {
      return cardLeft_.get(index);
    }

    private void initFields() {
      cardLeft_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardLeft_.size(); i++) {
        output.writeSInt32(1, cardLeft_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardLeft_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(cardLeft_.get(i));
        }
        size += dataSize;
        size += 1 * getCardLeftList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.ddz.DDZ.DDZGameOperPublicInfoSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperPublicInfoSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPublicInfoSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperPublicInfoSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPublicInfoSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPublicInfoSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPublicInfoSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPublicInfoSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPublicInfoSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPublicInfoSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.ddz.DDZ.DDZGameOperPublicInfoSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.ddz.DDZGameOperPublicInfoSyn}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.ddz.DDZ.DDZGameOperPublicInfoSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPublicInfoSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPublicInfoSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.ddz.DDZ.DDZGameOperPublicInfoSyn.class, packet.ddz.DDZ.DDZGameOperPublicInfoSyn.Builder.class);
      }

      // Construct using packet.ddz.DDZ.DDZGameOperPublicInfoSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardLeft_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPublicInfoSyn_descriptor;
      }

      public packet.ddz.DDZ.DDZGameOperPublicInfoSyn getDefaultInstanceForType() {
        return packet.ddz.DDZ.DDZGameOperPublicInfoSyn.getDefaultInstance();
      }

      public packet.ddz.DDZ.DDZGameOperPublicInfoSyn build() {
        packet.ddz.DDZ.DDZGameOperPublicInfoSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.ddz.DDZ.DDZGameOperPublicInfoSyn buildPartial() {
        packet.ddz.DDZ.DDZGameOperPublicInfoSyn result = new packet.ddz.DDZ.DDZGameOperPublicInfoSyn(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardLeft_ = java.util.Collections.unmodifiableList(cardLeft_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardLeft_ = cardLeft_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.ddz.DDZ.DDZGameOperPublicInfoSyn) {
          return mergeFrom((packet.ddz.DDZ.DDZGameOperPublicInfoSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.ddz.DDZ.DDZGameOperPublicInfoSyn other) {
        if (other == packet.ddz.DDZ.DDZGameOperPublicInfoSyn.getDefaultInstance()) return this;
        if (!other.cardLeft_.isEmpty()) {
          if (cardLeft_.isEmpty()) {
            cardLeft_ = other.cardLeft_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardLeftIsMutable();
            cardLeft_.addAll(other.cardLeft_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.ddz.DDZ.DDZGameOperPublicInfoSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.ddz.DDZ.DDZGameOperPublicInfoSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated sint32 cardLeft = 1;
      private java.util.List<java.lang.Integer> cardLeft_ = java.util.Collections.emptyList();
      private void ensureCardLeftIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardLeft_ = new java.util.ArrayList<java.lang.Integer>(cardLeft_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated sint32 cardLeft = 1;</code>
       *
       * <pre>
       *地主牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardLeftList() {
        return java.util.Collections.unmodifiableList(cardLeft_);
      }
      /**
       * <code>repeated sint32 cardLeft = 1;</code>
       *
       * <pre>
       *地主牌
       * </pre>
       */
      public int getCardLeftCount() {
        return cardLeft_.size();
      }
      /**
       * <code>repeated sint32 cardLeft = 1;</code>
       *
       * <pre>
       *地主牌
       * </pre>
       */
      public int getCardLeft(int index) {
        return cardLeft_.get(index);
      }
      /**
       * <code>repeated sint32 cardLeft = 1;</code>
       *
       * <pre>
       *地主牌
       * </pre>
       */
      public Builder setCardLeft(
          int index, int value) {
        ensureCardLeftIsMutable();
        cardLeft_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardLeft = 1;</code>
       *
       * <pre>
       *地主牌
       * </pre>
       */
      public Builder addCardLeft(int value) {
        ensureCardLeftIsMutable();
        cardLeft_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardLeft = 1;</code>
       *
       * <pre>
       *地主牌
       * </pre>
       */
      public Builder addAllCardLeft(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardLeftIsMutable();
        super.addAll(values, cardLeft_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardLeft = 1;</code>
       *
       * <pre>
       *地主牌
       * </pre>
       */
      public Builder clearCardLeft() {
        cardLeft_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.ddz.DDZGameOperPublicInfoSyn)
    }

    static {
      defaultInstance = new DDZGameOperPublicInfoSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.ddz.DDZGameOperPublicInfoSyn)
  }

  public interface DDZGameOperActorSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // required sint32 timeLeft = 2;
    /**
     * <code>required sint32 timeLeft = 2;</code>
     *
     * <pre>
     *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
     * </pre>
     */
    boolean hasTimeLeft();
    /**
     * <code>required sint32 timeLeft = 2;</code>
     *
     * <pre>
     *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
     * </pre>
     */
    int getTimeLeft();
  }
  /**
   * Protobuf type {@code packet.ddz.DDZGameOperActorSyn}
   *
   * <pre>
   *同步行动者信息 operType=ACTSYN
   * </pre>
   */
  public static final class DDZGameOperActorSyn extends
      com.google.protobuf.GeneratedMessage
      implements DDZGameOperActorSynOrBuilder {
    // Use DDZGameOperActorSyn.newBuilder() to construct.
    private DDZGameOperActorSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DDZGameOperActorSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DDZGameOperActorSyn defaultInstance;
    public static DDZGameOperActorSyn getDefaultInstance() {
      return defaultInstance;
    }

    public DDZGameOperActorSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DDZGameOperActorSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              timeLeft_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperActorSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperActorSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.ddz.DDZ.DDZGameOperActorSyn.class, packet.ddz.DDZ.DDZGameOperActorSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<DDZGameOperActorSyn> PARSER =
        new com.google.protobuf.AbstractParser<DDZGameOperActorSyn>() {
      public DDZGameOperActorSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DDZGameOperActorSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DDZGameOperActorSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // required sint32 timeLeft = 2;
    public static final int TIMELEFT_FIELD_NUMBER = 2;
    private int timeLeft_;
    /**
     * <code>required sint32 timeLeft = 2;</code>
     *
     * <pre>
     *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
     * </pre>
     */
    public boolean hasTimeLeft() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 timeLeft = 2;</code>
     *
     * <pre>
     *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
     * </pre>
     */
    public int getTimeLeft() {
      return timeLeft_;
    }

    private void initFields() {
      position_ = 0;
      timeLeft_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTimeLeft()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, timeLeft_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, timeLeft_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.ddz.DDZ.DDZGameOperActorSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperActorSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperActorSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperActorSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperActorSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperActorSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperActorSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperActorSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperActorSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperActorSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.ddz.DDZ.DDZGameOperActorSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.ddz.DDZGameOperActorSyn}
     *
     * <pre>
     *同步行动者信息 operType=ACTSYN
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.ddz.DDZ.DDZGameOperActorSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperActorSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperActorSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.ddz.DDZ.DDZGameOperActorSyn.class, packet.ddz.DDZ.DDZGameOperActorSyn.Builder.class);
      }

      // Construct using packet.ddz.DDZ.DDZGameOperActorSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        timeLeft_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperActorSyn_descriptor;
      }

      public packet.ddz.DDZ.DDZGameOperActorSyn getDefaultInstanceForType() {
        return packet.ddz.DDZ.DDZGameOperActorSyn.getDefaultInstance();
      }

      public packet.ddz.DDZ.DDZGameOperActorSyn build() {
        packet.ddz.DDZ.DDZGameOperActorSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.ddz.DDZ.DDZGameOperActorSyn buildPartial() {
        packet.ddz.DDZ.DDZGameOperActorSyn result = new packet.ddz.DDZ.DDZGameOperActorSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.timeLeft_ = timeLeft_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.ddz.DDZ.DDZGameOperActorSyn) {
          return mergeFrom((packet.ddz.DDZ.DDZGameOperActorSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.ddz.DDZ.DDZGameOperActorSyn other) {
        if (other == packet.ddz.DDZ.DDZGameOperActorSyn.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasTimeLeft()) {
          setTimeLeft(other.getTimeLeft());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasTimeLeft()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.ddz.DDZ.DDZGameOperActorSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.ddz.DDZ.DDZGameOperActorSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // required sint32 timeLeft = 2;
      private int timeLeft_ ;
      /**
       * <code>required sint32 timeLeft = 2;</code>
       *
       * <pre>
       *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
       * </pre>
       */
      public boolean hasTimeLeft() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 timeLeft = 2;</code>
       *
       * <pre>
       *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
       * </pre>
       */
      public int getTimeLeft() {
        return timeLeft_;
      }
      /**
       * <code>required sint32 timeLeft = 2;</code>
       *
       * <pre>
       *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
       * </pre>
       */
      public Builder setTimeLeft(int value) {
        bitField0_ |= 0x00000002;
        timeLeft_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 timeLeft = 2;</code>
       *
       * <pre>
       *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
       * </pre>
       */
      public Builder clearTimeLeft() {
        bitField0_ = (bitField0_ & ~0x00000002);
        timeLeft_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.ddz.DDZGameOperActorSyn)
    }

    static {
      defaultInstance = new DDZGameOperActorSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.ddz.DDZGameOperActorSyn)
  }

  public interface DDZGameOperPlayerActionSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // required sint32 action = 2;
    /**
     * <code>required sint32 action = 2;</code>
     *
     * <pre>
     *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
     * </pre>
     */
    boolean hasAction();
    /**
     * <code>required sint32 action = 2;</code>
     *
     * <pre>
     *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
     * </pre>
     */
    int getAction();

    // repeated sint32 cardValue = 3;
    /**
     * <code>repeated sint32 cardValue = 3;</code>
     *
     * <pre>
     *出牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardValueList();
    /**
     * <code>repeated sint32 cardValue = 3;</code>
     *
     * <pre>
     *出牌
     * </pre>
     */
    int getCardValueCount();
    /**
     * <code>repeated sint32 cardValue = 3;</code>
     *
     * <pre>
     *出牌
     * </pre>
     */
    int getCardValue(int index);

    // optional sint32 robNum = 4;
    /**
     * <code>optional sint32 robNum = 4;</code>
     *
     * <pre>
     *抢地主的分数
     * </pre>
     */
    boolean hasRobNum();
    /**
     * <code>optional sint32 robNum = 4;</code>
     *
     * <pre>
     *抢地主的分数
     * </pre>
     */
    int getRobNum();

    // optional sint32 jiabei = 5;
    /**
     * <code>optional sint32 jiabei = 5;</code>
     *
     * <pre>
     *能不能加倍
     * </pre>
     */
    boolean hasJiabei();
    /**
     * <code>optional sint32 jiabei = 5;</code>
     *
     * <pre>
     *能不能加倍
     * </pre>
     */
    int getJiabei();

    // optional sint32 canOut = 6;
    /**
     * <code>optional sint32 canOut = 6;</code>
     *
     * <pre>
     *出牌的类型 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
     * </pre>
     */
    boolean hasCanOut();
    /**
     * <code>optional sint32 canOut = 6;</code>
     *
     * <pre>
     *出牌的类型 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
     * </pre>
     */
    int getCanOut();

    // optional sint32 cardType = 7;
    /**
     * <code>optional sint32 cardType = 7;</code>
     *
     * <pre>
     *牌型 飞机 连队 王炸 还是什么
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional sint32 cardType = 7;</code>
     *
     * <pre>
     *牌型 飞机 连队 王炸 还是什么
     * </pre>
     */
    int getCardType();

    // optional sint32 cardNum = 8;
    /**
     * <code>optional sint32 cardNum = 8;</code>
     *
     * <pre>
     *玩家剩余牌数
     * </pre>
     */
    boolean hasCardNum();
    /**
     * <code>optional sint32 cardNum = 8;</code>
     *
     * <pre>
     *玩家剩余牌数
     * </pre>
     */
    int getCardNum();

    // repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    java.util.List<packet.ddz.DDZ.DDZGameCardInDesk> 
        getCardInDeskList();
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    packet.ddz.DDZ.DDZGameCardInDesk getCardInDesk(int index);
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    int getCardInDeskCount();
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    java.util.List<? extends packet.ddz.DDZ.DDZGameCardInDeskOrBuilder> 
        getCardInDeskOrBuilderList();
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    packet.ddz.DDZ.DDZGameCardInDeskOrBuilder getCardInDeskOrBuilder(
        int index);

    // optional sint32 rangPaiNum = 10;
    /**
     * <code>optional sint32 rangPaiNum = 10;</code>
     *
     * <pre>
     *让牌数(二人斗地主)
     * </pre>
     */
    boolean hasRangPaiNum();
    /**
     * <code>optional sint32 rangPaiNum = 10;</code>
     *
     * <pre>
     *让牌数(二人斗地主)
     * </pre>
     */
    int getRangPaiNum();

    // optional sint32 seq = 100;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    boolean hasSeq();
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    int getSeq();
  }
  /**
   * Protobuf type {@code packet.ddz.DDZGameOperPlayerActionSyn}
   *
   * <pre>
   *玩家操作同步operType=ACTIONSYN, 前端通过此包告诉后端玩家进行了什么操作，后端通过此包将操作告诉其它玩家
   * </pre>
   */
  public static final class DDZGameOperPlayerActionSyn extends
      com.google.protobuf.GeneratedMessage
      implements DDZGameOperPlayerActionSynOrBuilder {
    // Use DDZGameOperPlayerActionSyn.newBuilder() to construct.
    private DDZGameOperPlayerActionSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DDZGameOperPlayerActionSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DDZGameOperPlayerActionSyn defaultInstance;
    public static DDZGameOperPlayerActionSyn getDefaultInstance() {
      return defaultInstance;
    }

    public DDZGameOperPlayerActionSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DDZGameOperPlayerActionSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              action_ = input.readSInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardValue_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardValue_.add(input.readSInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                cardValue_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardValue_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              robNum_ = input.readSInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              jiabei_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              canOut_ = input.readSInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              cardType_ = input.readSInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              cardNum_ = input.readSInt32();
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                cardInDesk_ = new java.util.ArrayList<packet.ddz.DDZ.DDZGameCardInDesk>();
                mutable_bitField0_ |= 0x00000100;
              }
              cardInDesk_.add(input.readMessage(packet.ddz.DDZ.DDZGameCardInDesk.PARSER, extensionRegistry));
              break;
            }
            case 80: {
              bitField0_ |= 0x00000080;
              rangPaiNum_ = input.readSInt32();
              break;
            }
            case 800: {
              bitField0_ |= 0x00000100;
              seq_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardValue_ = java.util.Collections.unmodifiableList(cardValue_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          cardInDesk_ = java.util.Collections.unmodifiableList(cardInDesk_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerActionSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerActionSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.ddz.DDZ.DDZGameOperPlayerActionSyn.class, packet.ddz.DDZ.DDZGameOperPlayerActionSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<DDZGameOperPlayerActionSyn> PARSER =
        new com.google.protobuf.AbstractParser<DDZGameOperPlayerActionSyn>() {
      public DDZGameOperPlayerActionSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DDZGameOperPlayerActionSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DDZGameOperPlayerActionSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // required sint32 action = 2;
    public static final int ACTION_FIELD_NUMBER = 2;
    private int action_;
    /**
     * <code>required sint32 action = 2;</code>
     *
     * <pre>
     *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
     * </pre>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 action = 2;</code>
     *
     * <pre>
     *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
     * </pre>
     */
    public int getAction() {
      return action_;
    }

    // repeated sint32 cardValue = 3;
    public static final int CARDVALUE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> cardValue_;
    /**
     * <code>repeated sint32 cardValue = 3;</code>
     *
     * <pre>
     *出牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardValueList() {
      return cardValue_;
    }
    /**
     * <code>repeated sint32 cardValue = 3;</code>
     *
     * <pre>
     *出牌
     * </pre>
     */
    public int getCardValueCount() {
      return cardValue_.size();
    }
    /**
     * <code>repeated sint32 cardValue = 3;</code>
     *
     * <pre>
     *出牌
     * </pre>
     */
    public int getCardValue(int index) {
      return cardValue_.get(index);
    }

    // optional sint32 robNum = 4;
    public static final int ROBNUM_FIELD_NUMBER = 4;
    private int robNum_;
    /**
     * <code>optional sint32 robNum = 4;</code>
     *
     * <pre>
     *抢地主的分数
     * </pre>
     */
    public boolean hasRobNum() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 robNum = 4;</code>
     *
     * <pre>
     *抢地主的分数
     * </pre>
     */
    public int getRobNum() {
      return robNum_;
    }

    // optional sint32 jiabei = 5;
    public static final int JIABEI_FIELD_NUMBER = 5;
    private int jiabei_;
    /**
     * <code>optional sint32 jiabei = 5;</code>
     *
     * <pre>
     *能不能加倍
     * </pre>
     */
    public boolean hasJiabei() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 jiabei = 5;</code>
     *
     * <pre>
     *能不能加倍
     * </pre>
     */
    public int getJiabei() {
      return jiabei_;
    }

    // optional sint32 canOut = 6;
    public static final int CANOUT_FIELD_NUMBER = 6;
    private int canOut_;
    /**
     * <code>optional sint32 canOut = 6;</code>
     *
     * <pre>
     *出牌的类型 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
     * </pre>
     */
    public boolean hasCanOut() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 canOut = 6;</code>
     *
     * <pre>
     *出牌的类型 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
     * </pre>
     */
    public int getCanOut() {
      return canOut_;
    }

    // optional sint32 cardType = 7;
    public static final int CARDTYPE_FIELD_NUMBER = 7;
    private int cardType_;
    /**
     * <code>optional sint32 cardType = 7;</code>
     *
     * <pre>
     *牌型 飞机 连队 王炸 还是什么
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 cardType = 7;</code>
     *
     * <pre>
     *牌型 飞机 连队 王炸 还是什么
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional sint32 cardNum = 8;
    public static final int CARDNUM_FIELD_NUMBER = 8;
    private int cardNum_;
    /**
     * <code>optional sint32 cardNum = 8;</code>
     *
     * <pre>
     *玩家剩余牌数
     * </pre>
     */
    public boolean hasCardNum() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 cardNum = 8;</code>
     *
     * <pre>
     *玩家剩余牌数
     * </pre>
     */
    public int getCardNum() {
      return cardNum_;
    }

    // repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;
    public static final int CARDINDESK_FIELD_NUMBER = 9;
    private java.util.List<packet.ddz.DDZ.DDZGameCardInDesk> cardInDesk_;
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    public java.util.List<packet.ddz.DDZ.DDZGameCardInDesk> getCardInDeskList() {
      return cardInDesk_;
    }
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    public java.util.List<? extends packet.ddz.DDZ.DDZGameCardInDeskOrBuilder> 
        getCardInDeskOrBuilderList() {
      return cardInDesk_;
    }
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    public int getCardInDeskCount() {
      return cardInDesk_.size();
    }
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    public packet.ddz.DDZ.DDZGameCardInDesk getCardInDesk(int index) {
      return cardInDesk_.get(index);
    }
    /**
     * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
     *
     * <pre>
     *桌子上的牌
     * </pre>
     */
    public packet.ddz.DDZ.DDZGameCardInDeskOrBuilder getCardInDeskOrBuilder(
        int index) {
      return cardInDesk_.get(index);
    }

    // optional sint32 rangPaiNum = 10;
    public static final int RANGPAINUM_FIELD_NUMBER = 10;
    private int rangPaiNum_;
    /**
     * <code>optional sint32 rangPaiNum = 10;</code>
     *
     * <pre>
     *让牌数(二人斗地主)
     * </pre>
     */
    public boolean hasRangPaiNum() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional sint32 rangPaiNum = 10;</code>
     *
     * <pre>
     *让牌数(二人斗地主)
     * </pre>
     */
    public int getRangPaiNum() {
      return rangPaiNum_;
    }

    // optional sint32 seq = 100;
    public static final int SEQ_FIELD_NUMBER = 100;
    private int seq_;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    public boolean hasSeq() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    public int getSeq() {
      return seq_;
    }

    private void initFields() {
      position_ = 0;
      action_ = 0;
      cardValue_ = java.util.Collections.emptyList();
      robNum_ = 0;
      jiabei_ = 0;
      canOut_ = 0;
      cardType_ = 0;
      cardNum_ = 0;
      cardInDesk_ = java.util.Collections.emptyList();
      rangPaiNum_ = 0;
      seq_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAction()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getCardInDeskCount(); i++) {
        if (!getCardInDesk(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, action_);
      }
      for (int i = 0; i < cardValue_.size(); i++) {
        output.writeSInt32(3, cardValue_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(4, robNum_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(5, jiabei_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(6, canOut_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(7, cardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(8, cardNum_);
      }
      for (int i = 0; i < cardInDesk_.size(); i++) {
        output.writeMessage(9, cardInDesk_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeSInt32(10, rangPaiNum_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeSInt32(100, seq_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, action_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardValue_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(cardValue_.get(i));
        }
        size += dataSize;
        size += 1 * getCardValueList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, robNum_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, jiabei_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, canOut_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, cardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(8, cardNum_);
      }
      for (int i = 0; i < cardInDesk_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, cardInDesk_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(10, rangPaiNum_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(100, seq_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.ddz.DDZ.DDZGameOperPlayerActionSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.ddz.DDZ.DDZGameOperPlayerActionSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.ddz.DDZGameOperPlayerActionSyn}
     *
     * <pre>
     *玩家操作同步operType=ACTIONSYN, 前端通过此包告诉后端玩家进行了什么操作，后端通过此包将操作告诉其它玩家
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.ddz.DDZ.DDZGameOperPlayerActionSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerActionSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerActionSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.ddz.DDZ.DDZGameOperPlayerActionSyn.class, packet.ddz.DDZ.DDZGameOperPlayerActionSyn.Builder.class);
      }

      // Construct using packet.ddz.DDZ.DDZGameOperPlayerActionSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardInDeskFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        action_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        cardValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        robNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        jiabei_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        canOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        cardNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        if (cardInDeskBuilder_ == null) {
          cardInDesk_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          cardInDeskBuilder_.clear();
        }
        rangPaiNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        seq_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerActionSyn_descriptor;
      }

      public packet.ddz.DDZ.DDZGameOperPlayerActionSyn getDefaultInstanceForType() {
        return packet.ddz.DDZ.DDZGameOperPlayerActionSyn.getDefaultInstance();
      }

      public packet.ddz.DDZ.DDZGameOperPlayerActionSyn build() {
        packet.ddz.DDZ.DDZGameOperPlayerActionSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.ddz.DDZ.DDZGameOperPlayerActionSyn buildPartial() {
        packet.ddz.DDZ.DDZGameOperPlayerActionSyn result = new packet.ddz.DDZ.DDZGameOperPlayerActionSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.action_ = action_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          cardValue_ = java.util.Collections.unmodifiableList(cardValue_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.cardValue_ = cardValue_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.robNum_ = robNum_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.jiabei_ = jiabei_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.canOut_ = canOut_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.cardNum_ = cardNum_;
        if (cardInDeskBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            cardInDesk_ = java.util.Collections.unmodifiableList(cardInDesk_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.cardInDesk_ = cardInDesk_;
        } else {
          result.cardInDesk_ = cardInDeskBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000080;
        }
        result.rangPaiNum_ = rangPaiNum_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000100;
        }
        result.seq_ = seq_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.ddz.DDZ.DDZGameOperPlayerActionSyn) {
          return mergeFrom((packet.ddz.DDZ.DDZGameOperPlayerActionSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.ddz.DDZ.DDZGameOperPlayerActionSyn other) {
        if (other == packet.ddz.DDZ.DDZGameOperPlayerActionSyn.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        if (!other.cardValue_.isEmpty()) {
          if (cardValue_.isEmpty()) {
            cardValue_ = other.cardValue_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureCardValueIsMutable();
            cardValue_.addAll(other.cardValue_);
          }
          onChanged();
        }
        if (other.hasRobNum()) {
          setRobNum(other.getRobNum());
        }
        if (other.hasJiabei()) {
          setJiabei(other.getJiabei());
        }
        if (other.hasCanOut()) {
          setCanOut(other.getCanOut());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCardNum()) {
          setCardNum(other.getCardNum());
        }
        if (cardInDeskBuilder_ == null) {
          if (!other.cardInDesk_.isEmpty()) {
            if (cardInDesk_.isEmpty()) {
              cardInDesk_ = other.cardInDesk_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureCardInDeskIsMutable();
              cardInDesk_.addAll(other.cardInDesk_);
            }
            onChanged();
          }
        } else {
          if (!other.cardInDesk_.isEmpty()) {
            if (cardInDeskBuilder_.isEmpty()) {
              cardInDeskBuilder_.dispose();
              cardInDeskBuilder_ = null;
              cardInDesk_ = other.cardInDesk_;
              bitField0_ = (bitField0_ & ~0x00000100);
              cardInDeskBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardInDeskFieldBuilder() : null;
            } else {
              cardInDeskBuilder_.addAllMessages(other.cardInDesk_);
            }
          }
        }
        if (other.hasRangPaiNum()) {
          setRangPaiNum(other.getRangPaiNum());
        }
        if (other.hasSeq()) {
          setSeq(other.getSeq());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasAction()) {
          
          return false;
        }
        for (int i = 0; i < getCardInDeskCount(); i++) {
          if (!getCardInDesk(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.ddz.DDZ.DDZGameOperPlayerActionSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.ddz.DDZ.DDZGameOperPlayerActionSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // required sint32 action = 2;
      private int action_ ;
      /**
       * <code>required sint32 action = 2;</code>
       *
       * <pre>
       *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
       * </pre>
       */
      public boolean hasAction() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 action = 2;</code>
       *
       * <pre>
       *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
       * </pre>
       */
      public int getAction() {
        return action_;
      }
      /**
       * <code>required sint32 action = 2;</code>
       *
       * <pre>
       *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
       * </pre>
       */
      public Builder setAction(int value) {
        bitField0_ |= 0x00000002;
        action_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 action = 2;</code>
       *
       * <pre>
       *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
       * </pre>
       */
      public Builder clearAction() {
        bitField0_ = (bitField0_ & ~0x00000002);
        action_ = 0;
        onChanged();
        return this;
      }

      // repeated sint32 cardValue = 3;
      private java.util.List<java.lang.Integer> cardValue_ = java.util.Collections.emptyList();
      private void ensureCardValueIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardValue_ = new java.util.ArrayList<java.lang.Integer>(cardValue_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated sint32 cardValue = 3;</code>
       *
       * <pre>
       *出牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardValueList() {
        return java.util.Collections.unmodifiableList(cardValue_);
      }
      /**
       * <code>repeated sint32 cardValue = 3;</code>
       *
       * <pre>
       *出牌
       * </pre>
       */
      public int getCardValueCount() {
        return cardValue_.size();
      }
      /**
       * <code>repeated sint32 cardValue = 3;</code>
       *
       * <pre>
       *出牌
       * </pre>
       */
      public int getCardValue(int index) {
        return cardValue_.get(index);
      }
      /**
       * <code>repeated sint32 cardValue = 3;</code>
       *
       * <pre>
       *出牌
       * </pre>
       */
      public Builder setCardValue(
          int index, int value) {
        ensureCardValueIsMutable();
        cardValue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardValue = 3;</code>
       *
       * <pre>
       *出牌
       * </pre>
       */
      public Builder addCardValue(int value) {
        ensureCardValueIsMutable();
        cardValue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardValue = 3;</code>
       *
       * <pre>
       *出牌
       * </pre>
       */
      public Builder addAllCardValue(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardValueIsMutable();
        super.addAll(values, cardValue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardValue = 3;</code>
       *
       * <pre>
       *出牌
       * </pre>
       */
      public Builder clearCardValue() {
        cardValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional sint32 robNum = 4;
      private int robNum_ ;
      /**
       * <code>optional sint32 robNum = 4;</code>
       *
       * <pre>
       *抢地主的分数
       * </pre>
       */
      public boolean hasRobNum() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 robNum = 4;</code>
       *
       * <pre>
       *抢地主的分数
       * </pre>
       */
      public int getRobNum() {
        return robNum_;
      }
      /**
       * <code>optional sint32 robNum = 4;</code>
       *
       * <pre>
       *抢地主的分数
       * </pre>
       */
      public Builder setRobNum(int value) {
        bitField0_ |= 0x00000008;
        robNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 robNum = 4;</code>
       *
       * <pre>
       *抢地主的分数
       * </pre>
       */
      public Builder clearRobNum() {
        bitField0_ = (bitField0_ & ~0x00000008);
        robNum_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 jiabei = 5;
      private int jiabei_ ;
      /**
       * <code>optional sint32 jiabei = 5;</code>
       *
       * <pre>
       *能不能加倍
       * </pre>
       */
      public boolean hasJiabei() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 jiabei = 5;</code>
       *
       * <pre>
       *能不能加倍
       * </pre>
       */
      public int getJiabei() {
        return jiabei_;
      }
      /**
       * <code>optional sint32 jiabei = 5;</code>
       *
       * <pre>
       *能不能加倍
       * </pre>
       */
      public Builder setJiabei(int value) {
        bitField0_ |= 0x00000010;
        jiabei_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 jiabei = 5;</code>
       *
       * <pre>
       *能不能加倍
       * </pre>
       */
      public Builder clearJiabei() {
        bitField0_ = (bitField0_ & ~0x00000010);
        jiabei_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 canOut = 6;
      private int canOut_ ;
      /**
       * <code>optional sint32 canOut = 6;</code>
       *
       * <pre>
       *出牌的类型 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
       * </pre>
       */
      public boolean hasCanOut() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 canOut = 6;</code>
       *
       * <pre>
       *出牌的类型 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
       * </pre>
       */
      public int getCanOut() {
        return canOut_;
      }
      /**
       * <code>optional sint32 canOut = 6;</code>
       *
       * <pre>
       *出牌的类型 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
       * </pre>
       */
      public Builder setCanOut(int value) {
        bitField0_ |= 0x00000020;
        canOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 canOut = 6;</code>
       *
       * <pre>
       *出牌的类型 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
       * </pre>
       */
      public Builder clearCanOut() {
        bitField0_ = (bitField0_ & ~0x00000020);
        canOut_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 cardType = 7;
      private int cardType_ ;
      /**
       * <code>optional sint32 cardType = 7;</code>
       *
       * <pre>
       *牌型 飞机 连队 王炸 还是什么
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional sint32 cardType = 7;</code>
       *
       * <pre>
       *牌型 飞机 连队 王炸 还是什么
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional sint32 cardType = 7;</code>
       *
       * <pre>
       *牌型 飞机 连队 王炸 还是什么
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000040;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 cardType = 7;</code>
       *
       * <pre>
       *牌型 飞机 连队 王炸 还是什么
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000040);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 cardNum = 8;
      private int cardNum_ ;
      /**
       * <code>optional sint32 cardNum = 8;</code>
       *
       * <pre>
       *玩家剩余牌数
       * </pre>
       */
      public boolean hasCardNum() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional sint32 cardNum = 8;</code>
       *
       * <pre>
       *玩家剩余牌数
       * </pre>
       */
      public int getCardNum() {
        return cardNum_;
      }
      /**
       * <code>optional sint32 cardNum = 8;</code>
       *
       * <pre>
       *玩家剩余牌数
       * </pre>
       */
      public Builder setCardNum(int value) {
        bitField0_ |= 0x00000080;
        cardNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 cardNum = 8;</code>
       *
       * <pre>
       *玩家剩余牌数
       * </pre>
       */
      public Builder clearCardNum() {
        bitField0_ = (bitField0_ & ~0x00000080);
        cardNum_ = 0;
        onChanged();
        return this;
      }

      // repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;
      private java.util.List<packet.ddz.DDZ.DDZGameCardInDesk> cardInDesk_ =
        java.util.Collections.emptyList();
      private void ensureCardInDeskIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          cardInDesk_ = new java.util.ArrayList<packet.ddz.DDZ.DDZGameCardInDesk>(cardInDesk_);
          bitField0_ |= 0x00000100;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZGameCardInDesk, packet.ddz.DDZ.DDZGameCardInDesk.Builder, packet.ddz.DDZ.DDZGameCardInDeskOrBuilder> cardInDeskBuilder_;

      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZGameCardInDesk> getCardInDeskList() {
        if (cardInDeskBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardInDesk_);
        } else {
          return cardInDeskBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public int getCardInDeskCount() {
        if (cardInDeskBuilder_ == null) {
          return cardInDesk_.size();
        } else {
          return cardInDeskBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameCardInDesk getCardInDesk(int index) {
        if (cardInDeskBuilder_ == null) {
          return cardInDesk_.get(index);
        } else {
          return cardInDeskBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder setCardInDesk(
          int index, packet.ddz.DDZ.DDZGameCardInDesk value) {
        if (cardInDeskBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardInDeskIsMutable();
          cardInDesk_.set(index, value);
          onChanged();
        } else {
          cardInDeskBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder setCardInDesk(
          int index, packet.ddz.DDZ.DDZGameCardInDesk.Builder builderForValue) {
        if (cardInDeskBuilder_ == null) {
          ensureCardInDeskIsMutable();
          cardInDesk_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardInDeskBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder addCardInDesk(packet.ddz.DDZ.DDZGameCardInDesk value) {
        if (cardInDeskBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardInDeskIsMutable();
          cardInDesk_.add(value);
          onChanged();
        } else {
          cardInDeskBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder addCardInDesk(
          int index, packet.ddz.DDZ.DDZGameCardInDesk value) {
        if (cardInDeskBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardInDeskIsMutable();
          cardInDesk_.add(index, value);
          onChanged();
        } else {
          cardInDeskBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder addCardInDesk(
          packet.ddz.DDZ.DDZGameCardInDesk.Builder builderForValue) {
        if (cardInDeskBuilder_ == null) {
          ensureCardInDeskIsMutable();
          cardInDesk_.add(builderForValue.build());
          onChanged();
        } else {
          cardInDeskBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder addCardInDesk(
          int index, packet.ddz.DDZ.DDZGameCardInDesk.Builder builderForValue) {
        if (cardInDeskBuilder_ == null) {
          ensureCardInDeskIsMutable();
          cardInDesk_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardInDeskBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder addAllCardInDesk(
          java.lang.Iterable<? extends packet.ddz.DDZ.DDZGameCardInDesk> values) {
        if (cardInDeskBuilder_ == null) {
          ensureCardInDeskIsMutable();
          super.addAll(values, cardInDesk_);
          onChanged();
        } else {
          cardInDeskBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder clearCardInDesk() {
        if (cardInDeskBuilder_ == null) {
          cardInDesk_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          cardInDeskBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public Builder removeCardInDesk(int index) {
        if (cardInDeskBuilder_ == null) {
          ensureCardInDeskIsMutable();
          cardInDesk_.remove(index);
          onChanged();
        } else {
          cardInDeskBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameCardInDesk.Builder getCardInDeskBuilder(
          int index) {
        return getCardInDeskFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameCardInDeskOrBuilder getCardInDeskOrBuilder(
          int index) {
        if (cardInDeskBuilder_ == null) {
          return cardInDesk_.get(index);  } else {
          return cardInDeskBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public java.util.List<? extends packet.ddz.DDZ.DDZGameCardInDeskOrBuilder> 
           getCardInDeskOrBuilderList() {
        if (cardInDeskBuilder_ != null) {
          return cardInDeskBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardInDesk_);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameCardInDesk.Builder addCardInDeskBuilder() {
        return getCardInDeskFieldBuilder().addBuilder(
            packet.ddz.DDZ.DDZGameCardInDesk.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameCardInDesk.Builder addCardInDeskBuilder(
          int index) {
        return getCardInDeskFieldBuilder().addBuilder(
            index, packet.ddz.DDZ.DDZGameCardInDesk.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZGameCardInDesk cardInDesk = 9;</code>
       *
       * <pre>
       *桌子上的牌
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZGameCardInDesk.Builder> 
           getCardInDeskBuilderList() {
        return getCardInDeskFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZGameCardInDesk, packet.ddz.DDZ.DDZGameCardInDesk.Builder, packet.ddz.DDZ.DDZGameCardInDeskOrBuilder> 
          getCardInDeskFieldBuilder() {
        if (cardInDeskBuilder_ == null) {
          cardInDeskBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.ddz.DDZ.DDZGameCardInDesk, packet.ddz.DDZ.DDZGameCardInDesk.Builder, packet.ddz.DDZ.DDZGameCardInDeskOrBuilder>(
                  cardInDesk_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          cardInDesk_ = null;
        }
        return cardInDeskBuilder_;
      }

      // optional sint32 rangPaiNum = 10;
      private int rangPaiNum_ ;
      /**
       * <code>optional sint32 rangPaiNum = 10;</code>
       *
       * <pre>
       *让牌数(二人斗地主)
       * </pre>
       */
      public boolean hasRangPaiNum() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional sint32 rangPaiNum = 10;</code>
       *
       * <pre>
       *让牌数(二人斗地主)
       * </pre>
       */
      public int getRangPaiNum() {
        return rangPaiNum_;
      }
      /**
       * <code>optional sint32 rangPaiNum = 10;</code>
       *
       * <pre>
       *让牌数(二人斗地主)
       * </pre>
       */
      public Builder setRangPaiNum(int value) {
        bitField0_ |= 0x00000200;
        rangPaiNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 rangPaiNum = 10;</code>
       *
       * <pre>
       *让牌数(二人斗地主)
       * </pre>
       */
      public Builder clearRangPaiNum() {
        bitField0_ = (bitField0_ & ~0x00000200);
        rangPaiNum_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 seq = 100;
      private int seq_ ;
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public boolean hasSeq() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public int getSeq() {
        return seq_;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public Builder setSeq(int value) {
        bitField0_ |= 0x00000400;
        seq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public Builder clearSeq() {
        bitField0_ = (bitField0_ & ~0x00000400);
        seq_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.ddz.DDZGameOperPlayerActionSyn)
    }

    static {
      defaultInstance = new DDZGameOperPlayerActionSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.ddz.DDZGameOperPlayerActionSyn)
  }

  public interface DDZGameCardInDeskOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // repeated sint32 cardValue = 2;
    /**
     * <code>repeated sint32 cardValue = 2;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardValueList();
    /**
     * <code>repeated sint32 cardValue = 2;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    int getCardValueCount();
    /**
     * <code>repeated sint32 cardValue = 2;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    int getCardValue(int index);
  }
  /**
   * Protobuf type {@code packet.ddz.DDZGameCardInDesk}
   */
  public static final class DDZGameCardInDesk extends
      com.google.protobuf.GeneratedMessage
      implements DDZGameCardInDeskOrBuilder {
    // Use DDZGameCardInDesk.newBuilder() to construct.
    private DDZGameCardInDesk(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DDZGameCardInDesk(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DDZGameCardInDesk defaultInstance;
    public static DDZGameCardInDesk getDefaultInstance() {
      return defaultInstance;
    }

    public DDZGameCardInDesk getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DDZGameCardInDesk(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardValue_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardValue_.add(input.readSInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardValue_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardValue_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardValue_ = java.util.Collections.unmodifiableList(cardValue_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameCardInDesk_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameCardInDesk_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.ddz.DDZ.DDZGameCardInDesk.class, packet.ddz.DDZ.DDZGameCardInDesk.Builder.class);
    }

    public static com.google.protobuf.Parser<DDZGameCardInDesk> PARSER =
        new com.google.protobuf.AbstractParser<DDZGameCardInDesk>() {
      public DDZGameCardInDesk parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DDZGameCardInDesk(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DDZGameCardInDesk> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // repeated sint32 cardValue = 2;
    public static final int CARDVALUE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardValue_;
    /**
     * <code>repeated sint32 cardValue = 2;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardValueList() {
      return cardValue_;
    }
    /**
     * <code>repeated sint32 cardValue = 2;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    public int getCardValueCount() {
      return cardValue_.size();
    }
    /**
     * <code>repeated sint32 cardValue = 2;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    public int getCardValue(int index) {
      return cardValue_.get(index);
    }

    private void initFields() {
      position_ = 0;
      cardValue_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      for (int i = 0; i < cardValue_.size(); i++) {
        output.writeSInt32(2, cardValue_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardValue_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(cardValue_.get(i));
        }
        size += dataSize;
        size += 1 * getCardValueList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.ddz.DDZ.DDZGameCardInDesk parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameCardInDesk parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameCardInDesk parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameCardInDesk parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameCardInDesk parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameCardInDesk parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameCardInDesk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameCardInDesk parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameCardInDesk parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameCardInDesk parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.ddz.DDZ.DDZGameCardInDesk prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.ddz.DDZGameCardInDesk}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.ddz.DDZ.DDZGameCardInDeskOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameCardInDesk_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameCardInDesk_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.ddz.DDZ.DDZGameCardInDesk.class, packet.ddz.DDZ.DDZGameCardInDesk.Builder.class);
      }

      // Construct using packet.ddz.DDZ.DDZGameCardInDesk.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameCardInDesk_descriptor;
      }

      public packet.ddz.DDZ.DDZGameCardInDesk getDefaultInstanceForType() {
        return packet.ddz.DDZ.DDZGameCardInDesk.getDefaultInstance();
      }

      public packet.ddz.DDZ.DDZGameCardInDesk build() {
        packet.ddz.DDZ.DDZGameCardInDesk result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.ddz.DDZ.DDZGameCardInDesk buildPartial() {
        packet.ddz.DDZ.DDZGameCardInDesk result = new packet.ddz.DDZ.DDZGameCardInDesk(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardValue_ = java.util.Collections.unmodifiableList(cardValue_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardValue_ = cardValue_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.ddz.DDZ.DDZGameCardInDesk) {
          return mergeFrom((packet.ddz.DDZ.DDZGameCardInDesk)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.ddz.DDZ.DDZGameCardInDesk other) {
        if (other == packet.ddz.DDZ.DDZGameCardInDesk.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (!other.cardValue_.isEmpty()) {
          if (cardValue_.isEmpty()) {
            cardValue_ = other.cardValue_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardValueIsMutable();
            cardValue_.addAll(other.cardValue_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.ddz.DDZ.DDZGameCardInDesk parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.ddz.DDZ.DDZGameCardInDesk) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // repeated sint32 cardValue = 2;
      private java.util.List<java.lang.Integer> cardValue_ = java.util.Collections.emptyList();
      private void ensureCardValueIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardValue_ = new java.util.ArrayList<java.lang.Integer>(cardValue_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated sint32 cardValue = 2;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardValueList() {
        return java.util.Collections.unmodifiableList(cardValue_);
      }
      /**
       * <code>repeated sint32 cardValue = 2;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public int getCardValueCount() {
        return cardValue_.size();
      }
      /**
       * <code>repeated sint32 cardValue = 2;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public int getCardValue(int index) {
        return cardValue_.get(index);
      }
      /**
       * <code>repeated sint32 cardValue = 2;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public Builder setCardValue(
          int index, int value) {
        ensureCardValueIsMutable();
        cardValue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardValue = 2;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public Builder addCardValue(int value) {
        ensureCardValueIsMutable();
        cardValue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardValue = 2;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public Builder addAllCardValue(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardValueIsMutable();
        super.addAll(values, cardValue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardValue = 2;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public Builder clearCardValue() {
        cardValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.ddz.DDZGameCardInDesk)
    }

    static {
      defaultInstance = new DDZGameCardInDesk(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.ddz.DDZGameCardInDesk)
  }

  public interface DDZGameOperPlayerActionNotifyOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // required sint32 actions = 2;
    /**
     * <code>required sint32 actions = 2;</code>
     *
     * <pre>
     * 可选操作列表(位与):(0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
     * </pre>
     */
    boolean hasActions();
    /**
     * <code>required sint32 actions = 2;</code>
     *
     * <pre>
     * 可选操作列表(位与):(0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
     * </pre>
     */
    int getActions();

    // repeated sint32 robNum = 3;
    /**
     * <code>repeated sint32 robNum = 3;</code>
     *
     * <pre>
     *抢地主能喊的分数
     * </pre>
     */
    java.util.List<java.lang.Integer> getRobNumList();
    /**
     * <code>repeated sint32 robNum = 3;</code>
     *
     * <pre>
     *抢地主能喊的分数
     * </pre>
     */
    int getRobNumCount();
    /**
     * <code>repeated sint32 robNum = 3;</code>
     *
     * <pre>
     *抢地主能喊的分数
     * </pre>
     */
    int getRobNum(int index);

    // optional sint32 double = 4;
    /**
     * <code>optional sint32 double = 4;</code>
     *
     * <pre>
     *能不能加倍
     * </pre>
     */
    boolean hasDouble();
    /**
     * <code>optional sint32 double = 4;</code>
     *
     * <pre>
     *能不能加倍
     * </pre>
     */
    int getDouble();

    // optional sint32 lastActionPosition = 5;
    /**
     * <code>optional sint32 lastActionPosition = 5;</code>
     *
     * <pre>
     *上一个行动的玩家位置
     * </pre>
     */
    boolean hasLastActionPosition();
    /**
     * <code>optional sint32 lastActionPosition = 5;</code>
     *
     * <pre>
     *上一个行动的玩家位置
     * </pre>
     */
    int getLastActionPosition();

    // optional sint32 lastActionCardType = 6;
    /**
     * <code>optional sint32 lastActionCardType = 6;</code>
     *
     * <pre>
     *上一个玩家的牌型
     * </pre>
     */
    boolean hasLastActionCardType();
    /**
     * <code>optional sint32 lastActionCardType = 6;</code>
     *
     * <pre>
     *上一个玩家的牌型
     * </pre>
     */
    int getLastActionCardType();

    // repeated sint32 lastPeopleCards = 7;
    /**
     * <code>repeated sint32 lastPeopleCards = 7;</code>
     *
     * <pre>
     *上一个玩家的牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getLastPeopleCardsList();
    /**
     * <code>repeated sint32 lastPeopleCards = 7;</code>
     *
     * <pre>
     *上一个玩家的牌
     * </pre>
     */
    int getLastPeopleCardsCount();
    /**
     * <code>repeated sint32 lastPeopleCards = 7;</code>
     *
     * <pre>
     *上一个玩家的牌
     * </pre>
     */
    int getLastPeopleCards(int index);

    // repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;
    /**
     * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
     *
     * <pre>
     *提示可以出的牌
     * </pre>
     */
    java.util.List<packet.ddz.DDZ.DDZGameOperPrompt> 
        getPromptCardsList();
    /**
     * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
     *
     * <pre>
     *提示可以出的牌
     * </pre>
     */
    packet.ddz.DDZ.DDZGameOperPrompt getPromptCards(int index);
    /**
     * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
     *
     * <pre>
     *提示可以出的牌
     * </pre>
     */
    int getPromptCardsCount();
    /**
     * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
     *
     * <pre>
     *提示可以出的牌
     * </pre>
     */
    java.util.List<? extends packet.ddz.DDZ.DDZGameOperPromptOrBuilder> 
        getPromptCardsOrBuilderList();
    /**
     * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
     *
     * <pre>
     *提示可以出的牌
     * </pre>
     */
    packet.ddz.DDZ.DDZGameOperPromptOrBuilder getPromptCardsOrBuilder(
        int index);

    // optional sint32 canOut = 9;
    /**
     * <code>optional sint32 canOut = 9;</code>
     *
     * <pre>
     *能不能出 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
     * </pre>
     */
    boolean hasCanOut();
    /**
     * <code>optional sint32 canOut = 9;</code>
     *
     * <pre>
     *能不能出 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
     * </pre>
     */
    int getCanOut();

    // repeated .packet.ddz.DDZGameOperOver otherCard = 10;
    /**
     * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
     *
     * <pre>
     *其他两家的牌用于结算时推送其他玩家的手牌
     * </pre>
     */
    java.util.List<packet.ddz.DDZ.DDZGameOperOver> 
        getOtherCardList();
    /**
     * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
     *
     * <pre>
     *其他两家的牌用于结算时推送其他玩家的手牌
     * </pre>
     */
    packet.ddz.DDZ.DDZGameOperOver getOtherCard(int index);
    /**
     * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
     *
     * <pre>
     *其他两家的牌用于结算时推送其他玩家的手牌
     * </pre>
     */
    int getOtherCardCount();
    /**
     * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
     *
     * <pre>
     *其他两家的牌用于结算时推送其他玩家的手牌
     * </pre>
     */
    java.util.List<? extends packet.ddz.DDZ.DDZGameOperOverOrBuilder> 
        getOtherCardOrBuilderList();
    /**
     * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
     *
     * <pre>
     *其他两家的牌用于结算时推送其他玩家的手牌
     * </pre>
     */
    packet.ddz.DDZ.DDZGameOperOverOrBuilder getOtherCardOrBuilder(
        int index);

    // optional sint32 spring = 11;
    /**
     * <code>optional sint32 spring = 11;</code>
     *
     * <pre>
     * 1代表春天 2代表反春 0表示啥也不是
     * </pre>
     */
    boolean hasSpring();
    /**
     * <code>optional sint32 spring = 11;</code>
     *
     * <pre>
     * 1代表春天 2代表反春 0表示啥也不是
     * </pre>
     */
    int getSpring();

    // optional sint32 seq = 100;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    boolean hasSeq();
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    int getSeq();
  }
  /**
   * Protobuf type {@code packet.ddz.DDZGameOperPlayerActionNotify}
   *
   * <pre>
   *服务器提示玩家操作 operType=ACTNOTIFY
   * </pre>
   */
  public static final class DDZGameOperPlayerActionNotify extends
      com.google.protobuf.GeneratedMessage
      implements DDZGameOperPlayerActionNotifyOrBuilder {
    // Use DDZGameOperPlayerActionNotify.newBuilder() to construct.
    private DDZGameOperPlayerActionNotify(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DDZGameOperPlayerActionNotify(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DDZGameOperPlayerActionNotify defaultInstance;
    public static DDZGameOperPlayerActionNotify getDefaultInstance() {
      return defaultInstance;
    }

    public DDZGameOperPlayerActionNotify getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DDZGameOperPlayerActionNotify(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              actions_ = input.readSInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                robNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              robNum_.add(input.readSInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                robNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                robNum_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              double_ = input.readSInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              lastActionPosition_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              lastActionCardType_ = input.readSInt32();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                lastPeopleCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              lastPeopleCards_.add(input.readSInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                lastPeopleCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                lastPeopleCards_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                promptCards_ = new java.util.ArrayList<packet.ddz.DDZ.DDZGameOperPrompt>();
                mutable_bitField0_ |= 0x00000080;
              }
              promptCards_.add(input.readMessage(packet.ddz.DDZ.DDZGameOperPrompt.PARSER, extensionRegistry));
              break;
            }
            case 72: {
              bitField0_ |= 0x00000020;
              canOut_ = input.readSInt32();
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                otherCard_ = new java.util.ArrayList<packet.ddz.DDZ.DDZGameOperOver>();
                mutable_bitField0_ |= 0x00000200;
              }
              otherCard_.add(input.readMessage(packet.ddz.DDZ.DDZGameOperOver.PARSER, extensionRegistry));
              break;
            }
            case 88: {
              bitField0_ |= 0x00000040;
              spring_ = input.readSInt32();
              break;
            }
            case 800: {
              bitField0_ |= 0x00000080;
              seq_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          robNum_ = java.util.Collections.unmodifiableList(robNum_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          lastPeopleCards_ = java.util.Collections.unmodifiableList(lastPeopleCards_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          promptCards_ = java.util.Collections.unmodifiableList(promptCards_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          otherCard_ = java.util.Collections.unmodifiableList(otherCard_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerActionNotify_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerActionNotify_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.ddz.DDZ.DDZGameOperPlayerActionNotify.class, packet.ddz.DDZ.DDZGameOperPlayerActionNotify.Builder.class);
    }

    public static com.google.protobuf.Parser<DDZGameOperPlayerActionNotify> PARSER =
        new com.google.protobuf.AbstractParser<DDZGameOperPlayerActionNotify>() {
      public DDZGameOperPlayerActionNotify parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DDZGameOperPlayerActionNotify(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DDZGameOperPlayerActionNotify> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // required sint32 actions = 2;
    public static final int ACTIONS_FIELD_NUMBER = 2;
    private int actions_;
    /**
     * <code>required sint32 actions = 2;</code>
     *
     * <pre>
     * 可选操作列表(位与):(0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
     * </pre>
     */
    public boolean hasActions() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 actions = 2;</code>
     *
     * <pre>
     * 可选操作列表(位与):(0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
     * </pre>
     */
    public int getActions() {
      return actions_;
    }

    // repeated sint32 robNum = 3;
    public static final int ROBNUM_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> robNum_;
    /**
     * <code>repeated sint32 robNum = 3;</code>
     *
     * <pre>
     *抢地主能喊的分数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRobNumList() {
      return robNum_;
    }
    /**
     * <code>repeated sint32 robNum = 3;</code>
     *
     * <pre>
     *抢地主能喊的分数
     * </pre>
     */
    public int getRobNumCount() {
      return robNum_.size();
    }
    /**
     * <code>repeated sint32 robNum = 3;</code>
     *
     * <pre>
     *抢地主能喊的分数
     * </pre>
     */
    public int getRobNum(int index) {
      return robNum_.get(index);
    }

    // optional sint32 double = 4;
    public static final int DOUBLE_FIELD_NUMBER = 4;
    private int double_;
    /**
     * <code>optional sint32 double = 4;</code>
     *
     * <pre>
     *能不能加倍
     * </pre>
     */
    public boolean hasDouble() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 double = 4;</code>
     *
     * <pre>
     *能不能加倍
     * </pre>
     */
    public int getDouble() {
      return double_;
    }

    // optional sint32 lastActionPosition = 5;
    public static final int LASTACTIONPOSITION_FIELD_NUMBER = 5;
    private int lastActionPosition_;
    /**
     * <code>optional sint32 lastActionPosition = 5;</code>
     *
     * <pre>
     *上一个行动的玩家位置
     * </pre>
     */
    public boolean hasLastActionPosition() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 lastActionPosition = 5;</code>
     *
     * <pre>
     *上一个行动的玩家位置
     * </pre>
     */
    public int getLastActionPosition() {
      return lastActionPosition_;
    }

    // optional sint32 lastActionCardType = 6;
    public static final int LASTACTIONCARDTYPE_FIELD_NUMBER = 6;
    private int lastActionCardType_;
    /**
     * <code>optional sint32 lastActionCardType = 6;</code>
     *
     * <pre>
     *上一个玩家的牌型
     * </pre>
     */
    public boolean hasLastActionCardType() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 lastActionCardType = 6;</code>
     *
     * <pre>
     *上一个玩家的牌型
     * </pre>
     */
    public int getLastActionCardType() {
      return lastActionCardType_;
    }

    // repeated sint32 lastPeopleCards = 7;
    public static final int LASTPEOPLECARDS_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> lastPeopleCards_;
    /**
     * <code>repeated sint32 lastPeopleCards = 7;</code>
     *
     * <pre>
     *上一个玩家的牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getLastPeopleCardsList() {
      return lastPeopleCards_;
    }
    /**
     * <code>repeated sint32 lastPeopleCards = 7;</code>
     *
     * <pre>
     *上一个玩家的牌
     * </pre>
     */
    public int getLastPeopleCardsCount() {
      return lastPeopleCards_.size();
    }
    /**
     * <code>repeated sint32 lastPeopleCards = 7;</code>
     *
     * <pre>
     *上一个玩家的牌
     * </pre>
     */
    public int getLastPeopleCards(int index) {
      return lastPeopleCards_.get(index);
    }

    // repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;
    public static final int PROMPTCARDS_FIELD_NUMBER = 8;
    private java.util.List<packet.ddz.DDZ.DDZGameOperPrompt> promptCards_;
    /**
     * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
     *
     * <pre>
     *提示可以出的牌
     * </pre>
     */
    public java.util.List<packet.ddz.DDZ.DDZGameOperPrompt> getPromptCardsList() {
      return promptCards_;
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
     *
     * <pre>
     *提示可以出的牌
     * </pre>
     */
    public java.util.List<? extends packet.ddz.DDZ.DDZGameOperPromptOrBuilder> 
        getPromptCardsOrBuilderList() {
      return promptCards_;
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
     *
     * <pre>
     *提示可以出的牌
     * </pre>
     */
    public int getPromptCardsCount() {
      return promptCards_.size();
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
     *
     * <pre>
     *提示可以出的牌
     * </pre>
     */
    public packet.ddz.DDZ.DDZGameOperPrompt getPromptCards(int index) {
      return promptCards_.get(index);
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
     *
     * <pre>
     *提示可以出的牌
     * </pre>
     */
    public packet.ddz.DDZ.DDZGameOperPromptOrBuilder getPromptCardsOrBuilder(
        int index) {
      return promptCards_.get(index);
    }

    // optional sint32 canOut = 9;
    public static final int CANOUT_FIELD_NUMBER = 9;
    private int canOut_;
    /**
     * <code>optional sint32 canOut = 9;</code>
     *
     * <pre>
     *能不能出 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
     * </pre>
     */
    public boolean hasCanOut() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 canOut = 9;</code>
     *
     * <pre>
     *能不能出 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
     * </pre>
     */
    public int getCanOut() {
      return canOut_;
    }

    // repeated .packet.ddz.DDZGameOperOver otherCard = 10;
    public static final int OTHERCARD_FIELD_NUMBER = 10;
    private java.util.List<packet.ddz.DDZ.DDZGameOperOver> otherCard_;
    /**
     * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
     *
     * <pre>
     *其他两家的牌用于结算时推送其他玩家的手牌
     * </pre>
     */
    public java.util.List<packet.ddz.DDZ.DDZGameOperOver> getOtherCardList() {
      return otherCard_;
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
     *
     * <pre>
     *其他两家的牌用于结算时推送其他玩家的手牌
     * </pre>
     */
    public java.util.List<? extends packet.ddz.DDZ.DDZGameOperOverOrBuilder> 
        getOtherCardOrBuilderList() {
      return otherCard_;
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
     *
     * <pre>
     *其他两家的牌用于结算时推送其他玩家的手牌
     * </pre>
     */
    public int getOtherCardCount() {
      return otherCard_.size();
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
     *
     * <pre>
     *其他两家的牌用于结算时推送其他玩家的手牌
     * </pre>
     */
    public packet.ddz.DDZ.DDZGameOperOver getOtherCard(int index) {
      return otherCard_.get(index);
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
     *
     * <pre>
     *其他两家的牌用于结算时推送其他玩家的手牌
     * </pre>
     */
    public packet.ddz.DDZ.DDZGameOperOverOrBuilder getOtherCardOrBuilder(
        int index) {
      return otherCard_.get(index);
    }

    // optional sint32 spring = 11;
    public static final int SPRING_FIELD_NUMBER = 11;
    private int spring_;
    /**
     * <code>optional sint32 spring = 11;</code>
     *
     * <pre>
     * 1代表春天 2代表反春 0表示啥也不是
     * </pre>
     */
    public boolean hasSpring() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 spring = 11;</code>
     *
     * <pre>
     * 1代表春天 2代表反春 0表示啥也不是
     * </pre>
     */
    public int getSpring() {
      return spring_;
    }

    // optional sint32 seq = 100;
    public static final int SEQ_FIELD_NUMBER = 100;
    private int seq_;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    public boolean hasSeq() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    public int getSeq() {
      return seq_;
    }

    private void initFields() {
      position_ = 0;
      actions_ = 0;
      robNum_ = java.util.Collections.emptyList();
      double_ = 0;
      lastActionPosition_ = 0;
      lastActionCardType_ = 0;
      lastPeopleCards_ = java.util.Collections.emptyList();
      promptCards_ = java.util.Collections.emptyList();
      canOut_ = 0;
      otherCard_ = java.util.Collections.emptyList();
      spring_ = 0;
      seq_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasActions()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getOtherCardCount(); i++) {
        if (!getOtherCard(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, actions_);
      }
      for (int i = 0; i < robNum_.size(); i++) {
        output.writeSInt32(3, robNum_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(4, double_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(5, lastActionPosition_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(6, lastActionCardType_);
      }
      for (int i = 0; i < lastPeopleCards_.size(); i++) {
        output.writeSInt32(7, lastPeopleCards_.get(i));
      }
      for (int i = 0; i < promptCards_.size(); i++) {
        output.writeMessage(8, promptCards_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(9, canOut_);
      }
      for (int i = 0; i < otherCard_.size(); i++) {
        output.writeMessage(10, otherCard_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(11, spring_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeSInt32(100, seq_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, actions_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < robNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(robNum_.get(i));
        }
        size += dataSize;
        size += 1 * getRobNumList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, double_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, lastActionPosition_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, lastActionCardType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < lastPeopleCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(lastPeopleCards_.get(i));
        }
        size += dataSize;
        size += 1 * getLastPeopleCardsList().size();
      }
      for (int i = 0; i < promptCards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, promptCards_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(9, canOut_);
      }
      for (int i = 0; i < otherCard_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, otherCard_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(11, spring_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(100, seq_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.ddz.DDZ.DDZGameOperPlayerActionNotify parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionNotify parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionNotify parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionNotify parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionNotify parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionNotify parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionNotify parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionNotify parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionNotify parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerActionNotify parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.ddz.DDZ.DDZGameOperPlayerActionNotify prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.ddz.DDZGameOperPlayerActionNotify}
     *
     * <pre>
     *服务器提示玩家操作 operType=ACTNOTIFY
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.ddz.DDZ.DDZGameOperPlayerActionNotifyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerActionNotify_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerActionNotify_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.ddz.DDZ.DDZGameOperPlayerActionNotify.class, packet.ddz.DDZ.DDZGameOperPlayerActionNotify.Builder.class);
      }

      // Construct using packet.ddz.DDZ.DDZGameOperPlayerActionNotify.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPromptCardsFieldBuilder();
          getOtherCardFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        actions_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        robNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        double_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        lastActionPosition_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        lastActionCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        lastPeopleCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        if (promptCardsBuilder_ == null) {
          promptCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          promptCardsBuilder_.clear();
        }
        canOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        if (otherCardBuilder_ == null) {
          otherCard_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          otherCardBuilder_.clear();
        }
        spring_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        seq_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerActionNotify_descriptor;
      }

      public packet.ddz.DDZ.DDZGameOperPlayerActionNotify getDefaultInstanceForType() {
        return packet.ddz.DDZ.DDZGameOperPlayerActionNotify.getDefaultInstance();
      }

      public packet.ddz.DDZ.DDZGameOperPlayerActionNotify build() {
        packet.ddz.DDZ.DDZGameOperPlayerActionNotify result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.ddz.DDZ.DDZGameOperPlayerActionNotify buildPartial() {
        packet.ddz.DDZ.DDZGameOperPlayerActionNotify result = new packet.ddz.DDZ.DDZGameOperPlayerActionNotify(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.actions_ = actions_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          robNum_ = java.util.Collections.unmodifiableList(robNum_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.robNum_ = robNum_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.double_ = double_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.lastActionPosition_ = lastActionPosition_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.lastActionCardType_ = lastActionCardType_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          lastPeopleCards_ = java.util.Collections.unmodifiableList(lastPeopleCards_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.lastPeopleCards_ = lastPeopleCards_;
        if (promptCardsBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            promptCards_ = java.util.Collections.unmodifiableList(promptCards_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.promptCards_ = promptCards_;
        } else {
          result.promptCards_ = promptCardsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000020;
        }
        result.canOut_ = canOut_;
        if (otherCardBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            otherCard_ = java.util.Collections.unmodifiableList(otherCard_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.otherCard_ = otherCard_;
        } else {
          result.otherCard_ = otherCardBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000040;
        }
        result.spring_ = spring_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.seq_ = seq_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.ddz.DDZ.DDZGameOperPlayerActionNotify) {
          return mergeFrom((packet.ddz.DDZ.DDZGameOperPlayerActionNotify)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.ddz.DDZ.DDZGameOperPlayerActionNotify other) {
        if (other == packet.ddz.DDZ.DDZGameOperPlayerActionNotify.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasActions()) {
          setActions(other.getActions());
        }
        if (!other.robNum_.isEmpty()) {
          if (robNum_.isEmpty()) {
            robNum_ = other.robNum_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureRobNumIsMutable();
            robNum_.addAll(other.robNum_);
          }
          onChanged();
        }
        if (other.hasDouble()) {
          setDouble(other.getDouble());
        }
        if (other.hasLastActionPosition()) {
          setLastActionPosition(other.getLastActionPosition());
        }
        if (other.hasLastActionCardType()) {
          setLastActionCardType(other.getLastActionCardType());
        }
        if (!other.lastPeopleCards_.isEmpty()) {
          if (lastPeopleCards_.isEmpty()) {
            lastPeopleCards_ = other.lastPeopleCards_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureLastPeopleCardsIsMutable();
            lastPeopleCards_.addAll(other.lastPeopleCards_);
          }
          onChanged();
        }
        if (promptCardsBuilder_ == null) {
          if (!other.promptCards_.isEmpty()) {
            if (promptCards_.isEmpty()) {
              promptCards_ = other.promptCards_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensurePromptCardsIsMutable();
              promptCards_.addAll(other.promptCards_);
            }
            onChanged();
          }
        } else {
          if (!other.promptCards_.isEmpty()) {
            if (promptCardsBuilder_.isEmpty()) {
              promptCardsBuilder_.dispose();
              promptCardsBuilder_ = null;
              promptCards_ = other.promptCards_;
              bitField0_ = (bitField0_ & ~0x00000080);
              promptCardsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPromptCardsFieldBuilder() : null;
            } else {
              promptCardsBuilder_.addAllMessages(other.promptCards_);
            }
          }
        }
        if (other.hasCanOut()) {
          setCanOut(other.getCanOut());
        }
        if (otherCardBuilder_ == null) {
          if (!other.otherCard_.isEmpty()) {
            if (otherCard_.isEmpty()) {
              otherCard_ = other.otherCard_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureOtherCardIsMutable();
              otherCard_.addAll(other.otherCard_);
            }
            onChanged();
          }
        } else {
          if (!other.otherCard_.isEmpty()) {
            if (otherCardBuilder_.isEmpty()) {
              otherCardBuilder_.dispose();
              otherCardBuilder_ = null;
              otherCard_ = other.otherCard_;
              bitField0_ = (bitField0_ & ~0x00000200);
              otherCardBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOtherCardFieldBuilder() : null;
            } else {
              otherCardBuilder_.addAllMessages(other.otherCard_);
            }
          }
        }
        if (other.hasSpring()) {
          setSpring(other.getSpring());
        }
        if (other.hasSeq()) {
          setSeq(other.getSeq());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasActions()) {
          
          return false;
        }
        for (int i = 0; i < getOtherCardCount(); i++) {
          if (!getOtherCard(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.ddz.DDZ.DDZGameOperPlayerActionNotify parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.ddz.DDZ.DDZGameOperPlayerActionNotify) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // required sint32 actions = 2;
      private int actions_ ;
      /**
       * <code>required sint32 actions = 2;</code>
       *
       * <pre>
       * 可选操作列表(位与):(0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
       * </pre>
       */
      public boolean hasActions() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 actions = 2;</code>
       *
       * <pre>
       * 可选操作列表(位与):(0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
       * </pre>
       */
      public int getActions() {
        return actions_;
      }
      /**
       * <code>required sint32 actions = 2;</code>
       *
       * <pre>
       * 可选操作列表(位与):(0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
       * </pre>
       */
      public Builder setActions(int value) {
        bitField0_ |= 0x00000002;
        actions_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 actions = 2;</code>
       *
       * <pre>
       * 可选操作列表(位与):(0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
       * </pre>
       */
      public Builder clearActions() {
        bitField0_ = (bitField0_ & ~0x00000002);
        actions_ = 0;
        onChanged();
        return this;
      }

      // repeated sint32 robNum = 3;
      private java.util.List<java.lang.Integer> robNum_ = java.util.Collections.emptyList();
      private void ensureRobNumIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          robNum_ = new java.util.ArrayList<java.lang.Integer>(robNum_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated sint32 robNum = 3;</code>
       *
       * <pre>
       *抢地主能喊的分数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRobNumList() {
        return java.util.Collections.unmodifiableList(robNum_);
      }
      /**
       * <code>repeated sint32 robNum = 3;</code>
       *
       * <pre>
       *抢地主能喊的分数
       * </pre>
       */
      public int getRobNumCount() {
        return robNum_.size();
      }
      /**
       * <code>repeated sint32 robNum = 3;</code>
       *
       * <pre>
       *抢地主能喊的分数
       * </pre>
       */
      public int getRobNum(int index) {
        return robNum_.get(index);
      }
      /**
       * <code>repeated sint32 robNum = 3;</code>
       *
       * <pre>
       *抢地主能喊的分数
       * </pre>
       */
      public Builder setRobNum(
          int index, int value) {
        ensureRobNumIsMutable();
        robNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 robNum = 3;</code>
       *
       * <pre>
       *抢地主能喊的分数
       * </pre>
       */
      public Builder addRobNum(int value) {
        ensureRobNumIsMutable();
        robNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 robNum = 3;</code>
       *
       * <pre>
       *抢地主能喊的分数
       * </pre>
       */
      public Builder addAllRobNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRobNumIsMutable();
        super.addAll(values, robNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 robNum = 3;</code>
       *
       * <pre>
       *抢地主能喊的分数
       * </pre>
       */
      public Builder clearRobNum() {
        robNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional sint32 double = 4;
      private int double_ ;
      /**
       * <code>optional sint32 double = 4;</code>
       *
       * <pre>
       *能不能加倍
       * </pre>
       */
      public boolean hasDouble() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 double = 4;</code>
       *
       * <pre>
       *能不能加倍
       * </pre>
       */
      public int getDouble() {
        return double_;
      }
      /**
       * <code>optional sint32 double = 4;</code>
       *
       * <pre>
       *能不能加倍
       * </pre>
       */
      public Builder setDouble(int value) {
        bitField0_ |= 0x00000008;
        double_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 double = 4;</code>
       *
       * <pre>
       *能不能加倍
       * </pre>
       */
      public Builder clearDouble() {
        bitField0_ = (bitField0_ & ~0x00000008);
        double_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 lastActionPosition = 5;
      private int lastActionPosition_ ;
      /**
       * <code>optional sint32 lastActionPosition = 5;</code>
       *
       * <pre>
       *上一个行动的玩家位置
       * </pre>
       */
      public boolean hasLastActionPosition() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 lastActionPosition = 5;</code>
       *
       * <pre>
       *上一个行动的玩家位置
       * </pre>
       */
      public int getLastActionPosition() {
        return lastActionPosition_;
      }
      /**
       * <code>optional sint32 lastActionPosition = 5;</code>
       *
       * <pre>
       *上一个行动的玩家位置
       * </pre>
       */
      public Builder setLastActionPosition(int value) {
        bitField0_ |= 0x00000010;
        lastActionPosition_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 lastActionPosition = 5;</code>
       *
       * <pre>
       *上一个行动的玩家位置
       * </pre>
       */
      public Builder clearLastActionPosition() {
        bitField0_ = (bitField0_ & ~0x00000010);
        lastActionPosition_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 lastActionCardType = 6;
      private int lastActionCardType_ ;
      /**
       * <code>optional sint32 lastActionCardType = 6;</code>
       *
       * <pre>
       *上一个玩家的牌型
       * </pre>
       */
      public boolean hasLastActionCardType() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 lastActionCardType = 6;</code>
       *
       * <pre>
       *上一个玩家的牌型
       * </pre>
       */
      public int getLastActionCardType() {
        return lastActionCardType_;
      }
      /**
       * <code>optional sint32 lastActionCardType = 6;</code>
       *
       * <pre>
       *上一个玩家的牌型
       * </pre>
       */
      public Builder setLastActionCardType(int value) {
        bitField0_ |= 0x00000020;
        lastActionCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 lastActionCardType = 6;</code>
       *
       * <pre>
       *上一个玩家的牌型
       * </pre>
       */
      public Builder clearLastActionCardType() {
        bitField0_ = (bitField0_ & ~0x00000020);
        lastActionCardType_ = 0;
        onChanged();
        return this;
      }

      // repeated sint32 lastPeopleCards = 7;
      private java.util.List<java.lang.Integer> lastPeopleCards_ = java.util.Collections.emptyList();
      private void ensureLastPeopleCardsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          lastPeopleCards_ = new java.util.ArrayList<java.lang.Integer>(lastPeopleCards_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated sint32 lastPeopleCards = 7;</code>
       *
       * <pre>
       *上一个玩家的牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getLastPeopleCardsList() {
        return java.util.Collections.unmodifiableList(lastPeopleCards_);
      }
      /**
       * <code>repeated sint32 lastPeopleCards = 7;</code>
       *
       * <pre>
       *上一个玩家的牌
       * </pre>
       */
      public int getLastPeopleCardsCount() {
        return lastPeopleCards_.size();
      }
      /**
       * <code>repeated sint32 lastPeopleCards = 7;</code>
       *
       * <pre>
       *上一个玩家的牌
       * </pre>
       */
      public int getLastPeopleCards(int index) {
        return lastPeopleCards_.get(index);
      }
      /**
       * <code>repeated sint32 lastPeopleCards = 7;</code>
       *
       * <pre>
       *上一个玩家的牌
       * </pre>
       */
      public Builder setLastPeopleCards(
          int index, int value) {
        ensureLastPeopleCardsIsMutable();
        lastPeopleCards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 lastPeopleCards = 7;</code>
       *
       * <pre>
       *上一个玩家的牌
       * </pre>
       */
      public Builder addLastPeopleCards(int value) {
        ensureLastPeopleCardsIsMutable();
        lastPeopleCards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 lastPeopleCards = 7;</code>
       *
       * <pre>
       *上一个玩家的牌
       * </pre>
       */
      public Builder addAllLastPeopleCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLastPeopleCardsIsMutable();
        super.addAll(values, lastPeopleCards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 lastPeopleCards = 7;</code>
       *
       * <pre>
       *上一个玩家的牌
       * </pre>
       */
      public Builder clearLastPeopleCards() {
        lastPeopleCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;
      private java.util.List<packet.ddz.DDZ.DDZGameOperPrompt> promptCards_ =
        java.util.Collections.emptyList();
      private void ensurePromptCardsIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          promptCards_ = new java.util.ArrayList<packet.ddz.DDZ.DDZGameOperPrompt>(promptCards_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZGameOperPrompt, packet.ddz.DDZ.DDZGameOperPrompt.Builder, packet.ddz.DDZ.DDZGameOperPromptOrBuilder> promptCardsBuilder_;

      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZGameOperPrompt> getPromptCardsList() {
        if (promptCardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(promptCards_);
        } else {
          return promptCardsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public int getPromptCardsCount() {
        if (promptCardsBuilder_ == null) {
          return promptCards_.size();
        } else {
          return promptCardsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperPrompt getPromptCards(int index) {
        if (promptCardsBuilder_ == null) {
          return promptCards_.get(index);
        } else {
          return promptCardsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public Builder setPromptCards(
          int index, packet.ddz.DDZ.DDZGameOperPrompt value) {
        if (promptCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePromptCardsIsMutable();
          promptCards_.set(index, value);
          onChanged();
        } else {
          promptCardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public Builder setPromptCards(
          int index, packet.ddz.DDZ.DDZGameOperPrompt.Builder builderForValue) {
        if (promptCardsBuilder_ == null) {
          ensurePromptCardsIsMutable();
          promptCards_.set(index, builderForValue.build());
          onChanged();
        } else {
          promptCardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public Builder addPromptCards(packet.ddz.DDZ.DDZGameOperPrompt value) {
        if (promptCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePromptCardsIsMutable();
          promptCards_.add(value);
          onChanged();
        } else {
          promptCardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public Builder addPromptCards(
          int index, packet.ddz.DDZ.DDZGameOperPrompt value) {
        if (promptCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePromptCardsIsMutable();
          promptCards_.add(index, value);
          onChanged();
        } else {
          promptCardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public Builder addPromptCards(
          packet.ddz.DDZ.DDZGameOperPrompt.Builder builderForValue) {
        if (promptCardsBuilder_ == null) {
          ensurePromptCardsIsMutable();
          promptCards_.add(builderForValue.build());
          onChanged();
        } else {
          promptCardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public Builder addPromptCards(
          int index, packet.ddz.DDZ.DDZGameOperPrompt.Builder builderForValue) {
        if (promptCardsBuilder_ == null) {
          ensurePromptCardsIsMutable();
          promptCards_.add(index, builderForValue.build());
          onChanged();
        } else {
          promptCardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public Builder addAllPromptCards(
          java.lang.Iterable<? extends packet.ddz.DDZ.DDZGameOperPrompt> values) {
        if (promptCardsBuilder_ == null) {
          ensurePromptCardsIsMutable();
          super.addAll(values, promptCards_);
          onChanged();
        } else {
          promptCardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public Builder clearPromptCards() {
        if (promptCardsBuilder_ == null) {
          promptCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          promptCardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public Builder removePromptCards(int index) {
        if (promptCardsBuilder_ == null) {
          ensurePromptCardsIsMutable();
          promptCards_.remove(index);
          onChanged();
        } else {
          promptCardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperPrompt.Builder getPromptCardsBuilder(
          int index) {
        return getPromptCardsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperPromptOrBuilder getPromptCardsOrBuilder(
          int index) {
        if (promptCardsBuilder_ == null) {
          return promptCards_.get(index);  } else {
          return promptCardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public java.util.List<? extends packet.ddz.DDZ.DDZGameOperPromptOrBuilder> 
           getPromptCardsOrBuilderList() {
        if (promptCardsBuilder_ != null) {
          return promptCardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(promptCards_);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperPrompt.Builder addPromptCardsBuilder() {
        return getPromptCardsFieldBuilder().addBuilder(
            packet.ddz.DDZ.DDZGameOperPrompt.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperPrompt.Builder addPromptCardsBuilder(
          int index) {
        return getPromptCardsFieldBuilder().addBuilder(
            index, packet.ddz.DDZ.DDZGameOperPrompt.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPrompt promptCards = 8;</code>
       *
       * <pre>
       *提示可以出的牌
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZGameOperPrompt.Builder> 
           getPromptCardsBuilderList() {
        return getPromptCardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZGameOperPrompt, packet.ddz.DDZ.DDZGameOperPrompt.Builder, packet.ddz.DDZ.DDZGameOperPromptOrBuilder> 
          getPromptCardsFieldBuilder() {
        if (promptCardsBuilder_ == null) {
          promptCardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.ddz.DDZ.DDZGameOperPrompt, packet.ddz.DDZ.DDZGameOperPrompt.Builder, packet.ddz.DDZ.DDZGameOperPromptOrBuilder>(
                  promptCards_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          promptCards_ = null;
        }
        return promptCardsBuilder_;
      }

      // optional sint32 canOut = 9;
      private int canOut_ ;
      /**
       * <code>optional sint32 canOut = 9;</code>
       *
       * <pre>
       *能不能出 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
       * </pre>
       */
      public boolean hasCanOut() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional sint32 canOut = 9;</code>
       *
       * <pre>
       *能不能出 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
       * </pre>
       */
      public int getCanOut() {
        return canOut_;
      }
      /**
       * <code>optional sint32 canOut = 9;</code>
       *
       * <pre>
       *能不能出 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
       * </pre>
       */
      public Builder setCanOut(int value) {
        bitField0_ |= 0x00000100;
        canOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 canOut = 9;</code>
       *
       * <pre>
       *能不能出 1代表随便出 2代表能出 3表示不能出(没有牌大过上家) 4表示当前牌型不符合(重新出牌)
       * </pre>
       */
      public Builder clearCanOut() {
        bitField0_ = (bitField0_ & ~0x00000100);
        canOut_ = 0;
        onChanged();
        return this;
      }

      // repeated .packet.ddz.DDZGameOperOver otherCard = 10;
      private java.util.List<packet.ddz.DDZ.DDZGameOperOver> otherCard_ =
        java.util.Collections.emptyList();
      private void ensureOtherCardIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          otherCard_ = new java.util.ArrayList<packet.ddz.DDZ.DDZGameOperOver>(otherCard_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZGameOperOver, packet.ddz.DDZ.DDZGameOperOver.Builder, packet.ddz.DDZ.DDZGameOperOverOrBuilder> otherCardBuilder_;

      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZGameOperOver> getOtherCardList() {
        if (otherCardBuilder_ == null) {
          return java.util.Collections.unmodifiableList(otherCard_);
        } else {
          return otherCardBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public int getOtherCardCount() {
        if (otherCardBuilder_ == null) {
          return otherCard_.size();
        } else {
          return otherCardBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperOver getOtherCard(int index) {
        if (otherCardBuilder_ == null) {
          return otherCard_.get(index);
        } else {
          return otherCardBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public Builder setOtherCard(
          int index, packet.ddz.DDZ.DDZGameOperOver value) {
        if (otherCardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOtherCardIsMutable();
          otherCard_.set(index, value);
          onChanged();
        } else {
          otherCardBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public Builder setOtherCard(
          int index, packet.ddz.DDZ.DDZGameOperOver.Builder builderForValue) {
        if (otherCardBuilder_ == null) {
          ensureOtherCardIsMutable();
          otherCard_.set(index, builderForValue.build());
          onChanged();
        } else {
          otherCardBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public Builder addOtherCard(packet.ddz.DDZ.DDZGameOperOver value) {
        if (otherCardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOtherCardIsMutable();
          otherCard_.add(value);
          onChanged();
        } else {
          otherCardBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public Builder addOtherCard(
          int index, packet.ddz.DDZ.DDZGameOperOver value) {
        if (otherCardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOtherCardIsMutable();
          otherCard_.add(index, value);
          onChanged();
        } else {
          otherCardBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public Builder addOtherCard(
          packet.ddz.DDZ.DDZGameOperOver.Builder builderForValue) {
        if (otherCardBuilder_ == null) {
          ensureOtherCardIsMutable();
          otherCard_.add(builderForValue.build());
          onChanged();
        } else {
          otherCardBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public Builder addOtherCard(
          int index, packet.ddz.DDZ.DDZGameOperOver.Builder builderForValue) {
        if (otherCardBuilder_ == null) {
          ensureOtherCardIsMutable();
          otherCard_.add(index, builderForValue.build());
          onChanged();
        } else {
          otherCardBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public Builder addAllOtherCard(
          java.lang.Iterable<? extends packet.ddz.DDZ.DDZGameOperOver> values) {
        if (otherCardBuilder_ == null) {
          ensureOtherCardIsMutable();
          super.addAll(values, otherCard_);
          onChanged();
        } else {
          otherCardBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public Builder clearOtherCard() {
        if (otherCardBuilder_ == null) {
          otherCard_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          otherCardBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public Builder removeOtherCard(int index) {
        if (otherCardBuilder_ == null) {
          ensureOtherCardIsMutable();
          otherCard_.remove(index);
          onChanged();
        } else {
          otherCardBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperOver.Builder getOtherCardBuilder(
          int index) {
        return getOtherCardFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperOverOrBuilder getOtherCardOrBuilder(
          int index) {
        if (otherCardBuilder_ == null) {
          return otherCard_.get(index);  } else {
          return otherCardBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public java.util.List<? extends packet.ddz.DDZ.DDZGameOperOverOrBuilder> 
           getOtherCardOrBuilderList() {
        if (otherCardBuilder_ != null) {
          return otherCardBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(otherCard_);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperOver.Builder addOtherCardBuilder() {
        return getOtherCardFieldBuilder().addBuilder(
            packet.ddz.DDZ.DDZGameOperOver.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperOver.Builder addOtherCardBuilder(
          int index) {
        return getOtherCardFieldBuilder().addBuilder(
            index, packet.ddz.DDZ.DDZGameOperOver.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperOver otherCard = 10;</code>
       *
       * <pre>
       *其他两家的牌用于结算时推送其他玩家的手牌
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZGameOperOver.Builder> 
           getOtherCardBuilderList() {
        return getOtherCardFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZGameOperOver, packet.ddz.DDZ.DDZGameOperOver.Builder, packet.ddz.DDZ.DDZGameOperOverOrBuilder> 
          getOtherCardFieldBuilder() {
        if (otherCardBuilder_ == null) {
          otherCardBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.ddz.DDZ.DDZGameOperOver, packet.ddz.DDZ.DDZGameOperOver.Builder, packet.ddz.DDZ.DDZGameOperOverOrBuilder>(
                  otherCard_,
                  ((bitField0_ & 0x00000200) == 0x00000200),
                  getParentForChildren(),
                  isClean());
          otherCard_ = null;
        }
        return otherCardBuilder_;
      }

      // optional sint32 spring = 11;
      private int spring_ ;
      /**
       * <code>optional sint32 spring = 11;</code>
       *
       * <pre>
       * 1代表春天 2代表反春 0表示啥也不是
       * </pre>
       */
      public boolean hasSpring() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional sint32 spring = 11;</code>
       *
       * <pre>
       * 1代表春天 2代表反春 0表示啥也不是
       * </pre>
       */
      public int getSpring() {
        return spring_;
      }
      /**
       * <code>optional sint32 spring = 11;</code>
       *
       * <pre>
       * 1代表春天 2代表反春 0表示啥也不是
       * </pre>
       */
      public Builder setSpring(int value) {
        bitField0_ |= 0x00000400;
        spring_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 spring = 11;</code>
       *
       * <pre>
       * 1代表春天 2代表反春 0表示啥也不是
       * </pre>
       */
      public Builder clearSpring() {
        bitField0_ = (bitField0_ & ~0x00000400);
        spring_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 seq = 100;
      private int seq_ ;
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public boolean hasSeq() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public int getSeq() {
        return seq_;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public Builder setSeq(int value) {
        bitField0_ |= 0x00000800;
        seq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public Builder clearSeq() {
        bitField0_ = (bitField0_ & ~0x00000800);
        seq_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.ddz.DDZGameOperPlayerActionNotify)
    }

    static {
      defaultInstance = new DDZGameOperPlayerActionNotify(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.ddz.DDZGameOperPlayerActionNotify)
  }

  public interface DDZGameOperOverOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // repeated sint32 cards = 2;
    /**
     * <code>repeated sint32 cards = 2;</code>
     */
    java.util.List<java.lang.Integer> getCardsList();
    /**
     * <code>repeated sint32 cards = 2;</code>
     */
    int getCardsCount();
    /**
     * <code>repeated sint32 cards = 2;</code>
     */
    int getCards(int index);
  }
  /**
   * Protobuf type {@code packet.ddz.DDZGameOperOver}
   */
  public static final class DDZGameOperOver extends
      com.google.protobuf.GeneratedMessage
      implements DDZGameOperOverOrBuilder {
    // Use DDZGameOperOver.newBuilder() to construct.
    private DDZGameOperOver(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DDZGameOperOver(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DDZGameOperOver defaultInstance;
    public static DDZGameOperOver getDefaultInstance() {
      return defaultInstance;
    }

    public DDZGameOperOver getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DDZGameOperOver(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cards_.add(input.readSInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cards_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperOver_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperOver_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.ddz.DDZ.DDZGameOperOver.class, packet.ddz.DDZ.DDZGameOperOver.Builder.class);
    }

    public static com.google.protobuf.Parser<DDZGameOperOver> PARSER =
        new com.google.protobuf.AbstractParser<DDZGameOperOver>() {
      public DDZGameOperOver parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DDZGameOperOver(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DDZGameOperOver> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // repeated sint32 cards = 2;
    public static final int CARDS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cards_;
    /**
     * <code>repeated sint32 cards = 2;</code>
     */
    public java.util.List<java.lang.Integer>
        getCardsList() {
      return cards_;
    }
    /**
     * <code>repeated sint32 cards = 2;</code>
     */
    public int getCardsCount() {
      return cards_.size();
    }
    /**
     * <code>repeated sint32 cards = 2;</code>
     */
    public int getCards(int index) {
      return cards_.get(index);
    }

    private void initFields() {
      position_ = 0;
      cards_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      for (int i = 0; i < cards_.size(); i++) {
        output.writeSInt32(2, cards_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(cards_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.ddz.DDZ.DDZGameOperOver parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperOver parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperOver parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperOver parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperOver parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperOver parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperOver parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperOver parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperOver parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperOver parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.ddz.DDZ.DDZGameOperOver prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.ddz.DDZGameOperOver}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.ddz.DDZ.DDZGameOperOverOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperOver_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperOver_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.ddz.DDZ.DDZGameOperOver.class, packet.ddz.DDZ.DDZGameOperOver.Builder.class);
      }

      // Construct using packet.ddz.DDZ.DDZGameOperOver.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperOver_descriptor;
      }

      public packet.ddz.DDZ.DDZGameOperOver getDefaultInstanceForType() {
        return packet.ddz.DDZ.DDZGameOperOver.getDefaultInstance();
      }

      public packet.ddz.DDZ.DDZGameOperOver build() {
        packet.ddz.DDZ.DDZGameOperOver result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.ddz.DDZ.DDZGameOperOver buildPartial() {
        packet.ddz.DDZ.DDZGameOperOver result = new packet.ddz.DDZ.DDZGameOperOver(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cards_ = cards_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.ddz.DDZ.DDZGameOperOver) {
          return mergeFrom((packet.ddz.DDZ.DDZGameOperOver)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.ddz.DDZ.DDZGameOperOver other) {
        if (other == packet.ddz.DDZ.DDZGameOperOver.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (!other.cards_.isEmpty()) {
          if (cards_.isEmpty()) {
            cards_ = other.cards_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsIsMutable();
            cards_.addAll(other.cards_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.ddz.DDZ.DDZGameOperOver parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.ddz.DDZ.DDZGameOperOver) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // repeated sint32 cards = 2;
      private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();
      private void ensureCardsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated sint32 cards = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getCardsList() {
        return java.util.Collections.unmodifiableList(cards_);
      }
      /**
       * <code>repeated sint32 cards = 2;</code>
       */
      public int getCardsCount() {
        return cards_.size();
      }
      /**
       * <code>repeated sint32 cards = 2;</code>
       */
      public int getCards(int index) {
        return cards_.get(index);
      }
      /**
       * <code>repeated sint32 cards = 2;</code>
       */
      public Builder setCards(
          int index, int value) {
        ensureCardsIsMutable();
        cards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cards = 2;</code>
       */
      public Builder addCards(int value) {
        ensureCardsIsMutable();
        cards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cards = 2;</code>
       */
      public Builder addAllCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsIsMutable();
        super.addAll(values, cards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cards = 2;</code>
       */
      public Builder clearCards() {
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.ddz.DDZGameOperOver)
    }

    static {
      defaultInstance = new DDZGameOperOver(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.ddz.DDZGameOperOver)
  }

  public interface DDZGameOperPromptOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated sint32 cards = 1;
    /**
     * <code>repeated sint32 cards = 1;</code>
     */
    java.util.List<java.lang.Integer> getCardsList();
    /**
     * <code>repeated sint32 cards = 1;</code>
     */
    int getCardsCount();
    /**
     * <code>repeated sint32 cards = 1;</code>
     */
    int getCards(int index);
  }
  /**
   * Protobuf type {@code packet.ddz.DDZGameOperPrompt}
   *
   * <pre>
   *那些牌可以出
   * </pre>
   */
  public static final class DDZGameOperPrompt extends
      com.google.protobuf.GeneratedMessage
      implements DDZGameOperPromptOrBuilder {
    // Use DDZGameOperPrompt.newBuilder() to construct.
    private DDZGameOperPrompt(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DDZGameOperPrompt(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DDZGameOperPrompt defaultInstance;
    public static DDZGameOperPrompt getDefaultInstance() {
      return defaultInstance;
    }

    public DDZGameOperPrompt getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DDZGameOperPrompt(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cards_.add(input.readSInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cards_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPrompt_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPrompt_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.ddz.DDZ.DDZGameOperPrompt.class, packet.ddz.DDZ.DDZGameOperPrompt.Builder.class);
    }

    public static com.google.protobuf.Parser<DDZGameOperPrompt> PARSER =
        new com.google.protobuf.AbstractParser<DDZGameOperPrompt>() {
      public DDZGameOperPrompt parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DDZGameOperPrompt(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DDZGameOperPrompt> getParserForType() {
      return PARSER;
    }

    // repeated sint32 cards = 1;
    public static final int CARDS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cards_;
    /**
     * <code>repeated sint32 cards = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getCardsList() {
      return cards_;
    }
    /**
     * <code>repeated sint32 cards = 1;</code>
     */
    public int getCardsCount() {
      return cards_.size();
    }
    /**
     * <code>repeated sint32 cards = 1;</code>
     */
    public int getCards(int index) {
      return cards_.get(index);
    }

    private void initFields() {
      cards_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cards_.size(); i++) {
        output.writeSInt32(1, cards_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(cards_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.ddz.DDZ.DDZGameOperPrompt parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperPrompt parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPrompt parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperPrompt parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPrompt parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPrompt parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPrompt parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPrompt parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPrompt parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPrompt parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.ddz.DDZ.DDZGameOperPrompt prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.ddz.DDZGameOperPrompt}
     *
     * <pre>
     *那些牌可以出
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.ddz.DDZ.DDZGameOperPromptOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPrompt_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPrompt_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.ddz.DDZ.DDZGameOperPrompt.class, packet.ddz.DDZ.DDZGameOperPrompt.Builder.class);
      }

      // Construct using packet.ddz.DDZ.DDZGameOperPrompt.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPrompt_descriptor;
      }

      public packet.ddz.DDZ.DDZGameOperPrompt getDefaultInstanceForType() {
        return packet.ddz.DDZ.DDZGameOperPrompt.getDefaultInstance();
      }

      public packet.ddz.DDZ.DDZGameOperPrompt build() {
        packet.ddz.DDZ.DDZGameOperPrompt result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.ddz.DDZ.DDZGameOperPrompt buildPartial() {
        packet.ddz.DDZ.DDZGameOperPrompt result = new packet.ddz.DDZ.DDZGameOperPrompt(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cards_ = cards_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.ddz.DDZ.DDZGameOperPrompt) {
          return mergeFrom((packet.ddz.DDZ.DDZGameOperPrompt)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.ddz.DDZ.DDZGameOperPrompt other) {
        if (other == packet.ddz.DDZ.DDZGameOperPrompt.getDefaultInstance()) return this;
        if (!other.cards_.isEmpty()) {
          if (cards_.isEmpty()) {
            cards_ = other.cards_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardsIsMutable();
            cards_.addAll(other.cards_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.ddz.DDZ.DDZGameOperPrompt parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.ddz.DDZ.DDZGameOperPrompt) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated sint32 cards = 1;
      private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();
      private void ensureCardsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated sint32 cards = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getCardsList() {
        return java.util.Collections.unmodifiableList(cards_);
      }
      /**
       * <code>repeated sint32 cards = 1;</code>
       */
      public int getCardsCount() {
        return cards_.size();
      }
      /**
       * <code>repeated sint32 cards = 1;</code>
       */
      public int getCards(int index) {
        return cards_.get(index);
      }
      /**
       * <code>repeated sint32 cards = 1;</code>
       */
      public Builder setCards(
          int index, int value) {
        ensureCardsIsMutable();
        cards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cards = 1;</code>
       */
      public Builder addCards(int value) {
        ensureCardsIsMutable();
        cards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cards = 1;</code>
       */
      public Builder addAllCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsIsMutable();
        super.addAll(values, cards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cards = 1;</code>
       */
      public Builder clearCards() {
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.ddz.DDZGameOperPrompt)
    }

    static {
      defaultInstance = new DDZGameOperPrompt(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.ddz.DDZGameOperPrompt)
  }

  public interface DDZGameOperPlayerHuSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *胡牌玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *胡牌玩家位置
     * </pre>
     */
    int getPosition();

    // optional sint32 friedKing = 2;
    /**
     * <code>optional sint32 friedKing = 2;</code>
     *
     * <pre>
     *王炸次数
     * </pre>
     */
    boolean hasFriedKing();
    /**
     * <code>optional sint32 friedKing = 2;</code>
     *
     * <pre>
     *王炸次数
     * </pre>
     */
    int getFriedKing();

    // optional sint32 bomb = 3;
    /**
     * <code>optional sint32 bomb = 3;</code>
     *
     * <pre>
     *炸弹次数
     * </pre>
     */
    boolean hasBomb();
    /**
     * <code>optional sint32 bomb = 3;</code>
     *
     * <pre>
     *炸弹次数
     * </pre>
     */
    int getBomb();

    // repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;
    /**
     * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    java.util.List<packet.ddz.DDZ.DDZGameOperPlayerSettle> 
        getDetailList();
    /**
     * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    packet.ddz.DDZ.DDZGameOperPlayerSettle getDetail(int index);
    /**
     * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    int getDetailCount();
    /**
     * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    java.util.List<? extends packet.ddz.DDZ.DDZGameOperPlayerSettleOrBuilder> 
        getDetailOrBuilderList();
    /**
     * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    packet.ddz.DDZ.DDZGameOperPlayerSettleOrBuilder getDetailOrBuilder(
        int index);

    // optional sint32 spring = 5;
    /**
     * <code>optional sint32 spring = 5;</code>
     *
     * <pre>
     *春天次数
     * </pre>
     */
    boolean hasSpring();
    /**
     * <code>optional sint32 spring = 5;</code>
     *
     * <pre>
     *春天次数
     * </pre>
     */
    int getSpring();

    // optional sint32 endPoints = 6;
    /**
     * <code>optional sint32 endPoints = 6;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    boolean hasEndPoints();
    /**
     * <code>optional sint32 endPoints = 6;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    int getEndPoints();

    // optional sint32 innings = 7;
    /**
     * <code>optional sint32 innings = 7;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    boolean hasInnings();
    /**
     * <code>optional sint32 innings = 7;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    int getInnings();

    // repeated sint32 diPai = 8;
    /**
     * <code>repeated sint32 diPai = 8;</code>
     *
     * <pre>
     *三张底牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getDiPaiList();
    /**
     * <code>repeated sint32 diPai = 8;</code>
     *
     * <pre>
     *三张底牌
     * </pre>
     */
    int getDiPaiCount();
    /**
     * <code>repeated sint32 diPai = 8;</code>
     *
     * <pre>
     *三张底牌
     * </pre>
     */
    int getDiPai(int index);
  }
  /**
   * Protobuf type {@code packet.ddz.DDZGameOperPlayerHuSyn}
   */
  public static final class DDZGameOperPlayerHuSyn extends
      com.google.protobuf.GeneratedMessage
      implements DDZGameOperPlayerHuSynOrBuilder {
    // Use DDZGameOperPlayerHuSyn.newBuilder() to construct.
    private DDZGameOperPlayerHuSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DDZGameOperPlayerHuSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DDZGameOperPlayerHuSyn defaultInstance;
    public static DDZGameOperPlayerHuSyn getDefaultInstance() {
      return defaultInstance;
    }

    public DDZGameOperPlayerHuSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DDZGameOperPlayerHuSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              friedKing_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              bomb_ = input.readSInt32();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                detail_ = new java.util.ArrayList<packet.ddz.DDZ.DDZGameOperPlayerSettle>();
                mutable_bitField0_ |= 0x00000008;
              }
              detail_.add(input.readMessage(packet.ddz.DDZ.DDZGameOperPlayerSettle.PARSER, extensionRegistry));
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              spring_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              endPoints_ = input.readSInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              innings_ = input.readSInt32();
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                diPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              diPai_.add(input.readSInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                diPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                diPai_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          detail_ = java.util.Collections.unmodifiableList(detail_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          diPai_ = java.util.Collections.unmodifiableList(diPai_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerHuSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerHuSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.ddz.DDZ.DDZGameOperPlayerHuSyn.class, packet.ddz.DDZ.DDZGameOperPlayerHuSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<DDZGameOperPlayerHuSyn> PARSER =
        new com.google.protobuf.AbstractParser<DDZGameOperPlayerHuSyn>() {
      public DDZGameOperPlayerHuSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DDZGameOperPlayerHuSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DDZGameOperPlayerHuSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *胡牌玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *胡牌玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // optional sint32 friedKing = 2;
    public static final int FRIEDKING_FIELD_NUMBER = 2;
    private int friedKing_;
    /**
     * <code>optional sint32 friedKing = 2;</code>
     *
     * <pre>
     *王炸次数
     * </pre>
     */
    public boolean hasFriedKing() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 friedKing = 2;</code>
     *
     * <pre>
     *王炸次数
     * </pre>
     */
    public int getFriedKing() {
      return friedKing_;
    }

    // optional sint32 bomb = 3;
    public static final int BOMB_FIELD_NUMBER = 3;
    private int bomb_;
    /**
     * <code>optional sint32 bomb = 3;</code>
     *
     * <pre>
     *炸弹次数
     * </pre>
     */
    public boolean hasBomb() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 bomb = 3;</code>
     *
     * <pre>
     *炸弹次数
     * </pre>
     */
    public int getBomb() {
      return bomb_;
    }

    // repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;
    public static final int DETAIL_FIELD_NUMBER = 4;
    private java.util.List<packet.ddz.DDZ.DDZGameOperPlayerSettle> detail_;
    /**
     * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    public java.util.List<packet.ddz.DDZ.DDZGameOperPlayerSettle> getDetailList() {
      return detail_;
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    public java.util.List<? extends packet.ddz.DDZ.DDZGameOperPlayerSettleOrBuilder> 
        getDetailOrBuilderList() {
      return detail_;
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    public int getDetailCount() {
      return detail_.size();
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    public packet.ddz.DDZ.DDZGameOperPlayerSettle getDetail(int index) {
      return detail_.get(index);
    }
    /**
     * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    public packet.ddz.DDZ.DDZGameOperPlayerSettleOrBuilder getDetailOrBuilder(
        int index) {
      return detail_.get(index);
    }

    // optional sint32 spring = 5;
    public static final int SPRING_FIELD_NUMBER = 5;
    private int spring_;
    /**
     * <code>optional sint32 spring = 5;</code>
     *
     * <pre>
     *春天次数
     * </pre>
     */
    public boolean hasSpring() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 spring = 5;</code>
     *
     * <pre>
     *春天次数
     * </pre>
     */
    public int getSpring() {
      return spring_;
    }

    // optional sint32 endPoints = 6;
    public static final int ENDPOINTS_FIELD_NUMBER = 6;
    private int endPoints_;
    /**
     * <code>optional sint32 endPoints = 6;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public boolean hasEndPoints() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 endPoints = 6;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public int getEndPoints() {
      return endPoints_;
    }

    // optional sint32 innings = 7;
    public static final int INNINGS_FIELD_NUMBER = 7;
    private int innings_;
    /**
     * <code>optional sint32 innings = 7;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    public boolean hasInnings() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 innings = 7;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    public int getInnings() {
      return innings_;
    }

    // repeated sint32 diPai = 8;
    public static final int DIPAI_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> diPai_;
    /**
     * <code>repeated sint32 diPai = 8;</code>
     *
     * <pre>
     *三张底牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDiPaiList() {
      return diPai_;
    }
    /**
     * <code>repeated sint32 diPai = 8;</code>
     *
     * <pre>
     *三张底牌
     * </pre>
     */
    public int getDiPaiCount() {
      return diPai_.size();
    }
    /**
     * <code>repeated sint32 diPai = 8;</code>
     *
     * <pre>
     *三张底牌
     * </pre>
     */
    public int getDiPai(int index) {
      return diPai_.get(index);
    }

    private void initFields() {
      position_ = 0;
      friedKing_ = 0;
      bomb_ = 0;
      detail_ = java.util.Collections.emptyList();
      spring_ = 0;
      endPoints_ = 0;
      innings_ = 0;
      diPai_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getDetailCount(); i++) {
        if (!getDetail(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, friedKing_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, bomb_);
      }
      for (int i = 0; i < detail_.size(); i++) {
        output.writeMessage(4, detail_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(5, spring_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(6, endPoints_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(7, innings_);
      }
      for (int i = 0; i < diPai_.size(); i++) {
        output.writeSInt32(8, diPai_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, friedKing_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, bomb_);
      }
      for (int i = 0; i < detail_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, detail_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, spring_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, endPoints_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, innings_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < diPai_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(diPai_.get(i));
        }
        size += dataSize;
        size += 1 * getDiPaiList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.ddz.DDZ.DDZGameOperPlayerHuSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerHuSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerHuSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerHuSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerHuSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerHuSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerHuSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerHuSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerHuSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerHuSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.ddz.DDZ.DDZGameOperPlayerHuSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.ddz.DDZGameOperPlayerHuSyn}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.ddz.DDZ.DDZGameOperPlayerHuSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerHuSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerHuSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.ddz.DDZ.DDZGameOperPlayerHuSyn.class, packet.ddz.DDZ.DDZGameOperPlayerHuSyn.Builder.class);
      }

      // Construct using packet.ddz.DDZ.DDZGameOperPlayerHuSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDetailFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        friedKing_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        bomb_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (detailBuilder_ == null) {
          detail_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          detailBuilder_.clear();
        }
        spring_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        endPoints_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        innings_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        diPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerHuSyn_descriptor;
      }

      public packet.ddz.DDZ.DDZGameOperPlayerHuSyn getDefaultInstanceForType() {
        return packet.ddz.DDZ.DDZGameOperPlayerHuSyn.getDefaultInstance();
      }

      public packet.ddz.DDZ.DDZGameOperPlayerHuSyn build() {
        packet.ddz.DDZ.DDZGameOperPlayerHuSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.ddz.DDZ.DDZGameOperPlayerHuSyn buildPartial() {
        packet.ddz.DDZ.DDZGameOperPlayerHuSyn result = new packet.ddz.DDZ.DDZGameOperPlayerHuSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.friedKing_ = friedKing_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.bomb_ = bomb_;
        if (detailBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            detail_ = java.util.Collections.unmodifiableList(detail_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.detail_ = detail_;
        } else {
          result.detail_ = detailBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.spring_ = spring_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.endPoints_ = endPoints_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.innings_ = innings_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          diPai_ = java.util.Collections.unmodifiableList(diPai_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.diPai_ = diPai_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.ddz.DDZ.DDZGameOperPlayerHuSyn) {
          return mergeFrom((packet.ddz.DDZ.DDZGameOperPlayerHuSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.ddz.DDZ.DDZGameOperPlayerHuSyn other) {
        if (other == packet.ddz.DDZ.DDZGameOperPlayerHuSyn.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasFriedKing()) {
          setFriedKing(other.getFriedKing());
        }
        if (other.hasBomb()) {
          setBomb(other.getBomb());
        }
        if (detailBuilder_ == null) {
          if (!other.detail_.isEmpty()) {
            if (detail_.isEmpty()) {
              detail_ = other.detail_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureDetailIsMutable();
              detail_.addAll(other.detail_);
            }
            onChanged();
          }
        } else {
          if (!other.detail_.isEmpty()) {
            if (detailBuilder_.isEmpty()) {
              detailBuilder_.dispose();
              detailBuilder_ = null;
              detail_ = other.detail_;
              bitField0_ = (bitField0_ & ~0x00000008);
              detailBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDetailFieldBuilder() : null;
            } else {
              detailBuilder_.addAllMessages(other.detail_);
            }
          }
        }
        if (other.hasSpring()) {
          setSpring(other.getSpring());
        }
        if (other.hasEndPoints()) {
          setEndPoints(other.getEndPoints());
        }
        if (other.hasInnings()) {
          setInnings(other.getInnings());
        }
        if (!other.diPai_.isEmpty()) {
          if (diPai_.isEmpty()) {
            diPai_ = other.diPai_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureDiPaiIsMutable();
            diPai_.addAll(other.diPai_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        for (int i = 0; i < getDetailCount(); i++) {
          if (!getDetail(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.ddz.DDZ.DDZGameOperPlayerHuSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.ddz.DDZ.DDZGameOperPlayerHuSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *胡牌玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *胡牌玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *胡牌玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *胡牌玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 friedKing = 2;
      private int friedKing_ ;
      /**
       * <code>optional sint32 friedKing = 2;</code>
       *
       * <pre>
       *王炸次数
       * </pre>
       */
      public boolean hasFriedKing() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 friedKing = 2;</code>
       *
       * <pre>
       *王炸次数
       * </pre>
       */
      public int getFriedKing() {
        return friedKing_;
      }
      /**
       * <code>optional sint32 friedKing = 2;</code>
       *
       * <pre>
       *王炸次数
       * </pre>
       */
      public Builder setFriedKing(int value) {
        bitField0_ |= 0x00000002;
        friedKing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 friedKing = 2;</code>
       *
       * <pre>
       *王炸次数
       * </pre>
       */
      public Builder clearFriedKing() {
        bitField0_ = (bitField0_ & ~0x00000002);
        friedKing_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 bomb = 3;
      private int bomb_ ;
      /**
       * <code>optional sint32 bomb = 3;</code>
       *
       * <pre>
       *炸弹次数
       * </pre>
       */
      public boolean hasBomb() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 bomb = 3;</code>
       *
       * <pre>
       *炸弹次数
       * </pre>
       */
      public int getBomb() {
        return bomb_;
      }
      /**
       * <code>optional sint32 bomb = 3;</code>
       *
       * <pre>
       *炸弹次数
       * </pre>
       */
      public Builder setBomb(int value) {
        bitField0_ |= 0x00000004;
        bomb_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 bomb = 3;</code>
       *
       * <pre>
       *炸弹次数
       * </pre>
       */
      public Builder clearBomb() {
        bitField0_ = (bitField0_ & ~0x00000004);
        bomb_ = 0;
        onChanged();
        return this;
      }

      // repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;
      private java.util.List<packet.ddz.DDZ.DDZGameOperPlayerSettle> detail_ =
        java.util.Collections.emptyList();
      private void ensureDetailIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          detail_ = new java.util.ArrayList<packet.ddz.DDZ.DDZGameOperPlayerSettle>(detail_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZGameOperPlayerSettle, packet.ddz.DDZ.DDZGameOperPlayerSettle.Builder, packet.ddz.DDZ.DDZGameOperPlayerSettleOrBuilder> detailBuilder_;

      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZGameOperPlayerSettle> getDetailList() {
        if (detailBuilder_ == null) {
          return java.util.Collections.unmodifiableList(detail_);
        } else {
          return detailBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public int getDetailCount() {
        if (detailBuilder_ == null) {
          return detail_.size();
        } else {
          return detailBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperPlayerSettle getDetail(int index) {
        if (detailBuilder_ == null) {
          return detail_.get(index);
        } else {
          return detailBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder setDetail(
          int index, packet.ddz.DDZ.DDZGameOperPlayerSettle value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.set(index, value);
          onChanged();
        } else {
          detailBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder setDetail(
          int index, packet.ddz.DDZ.DDZGameOperPlayerSettle.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.set(index, builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder addDetail(packet.ddz.DDZ.DDZGameOperPlayerSettle value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.add(value);
          onChanged();
        } else {
          detailBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder addDetail(
          int index, packet.ddz.DDZ.DDZGameOperPlayerSettle value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.add(index, value);
          onChanged();
        } else {
          detailBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder addDetail(
          packet.ddz.DDZ.DDZGameOperPlayerSettle.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.add(builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder addDetail(
          int index, packet.ddz.DDZ.DDZGameOperPlayerSettle.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.add(index, builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder addAllDetail(
          java.lang.Iterable<? extends packet.ddz.DDZ.DDZGameOperPlayerSettle> values) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          super.addAll(values, detail_);
          onChanged();
        } else {
          detailBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder clearDetail() {
        if (detailBuilder_ == null) {
          detail_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          detailBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder removeDetail(int index) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.remove(index);
          onChanged();
        } else {
          detailBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperPlayerSettle.Builder getDetailBuilder(
          int index) {
        return getDetailFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperPlayerSettleOrBuilder getDetailOrBuilder(
          int index) {
        if (detailBuilder_ == null) {
          return detail_.get(index);  } else {
          return detailBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public java.util.List<? extends packet.ddz.DDZ.DDZGameOperPlayerSettleOrBuilder> 
           getDetailOrBuilderList() {
        if (detailBuilder_ != null) {
          return detailBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(detail_);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperPlayerSettle.Builder addDetailBuilder() {
        return getDetailFieldBuilder().addBuilder(
            packet.ddz.DDZ.DDZGameOperPlayerSettle.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public packet.ddz.DDZ.DDZGameOperPlayerSettle.Builder addDetailBuilder(
          int index) {
        return getDetailFieldBuilder().addBuilder(
            index, packet.ddz.DDZ.DDZGameOperPlayerSettle.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZGameOperPlayerSettle detail = 4;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZGameOperPlayerSettle.Builder> 
           getDetailBuilderList() {
        return getDetailFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZGameOperPlayerSettle, packet.ddz.DDZ.DDZGameOperPlayerSettle.Builder, packet.ddz.DDZ.DDZGameOperPlayerSettleOrBuilder> 
          getDetailFieldBuilder() {
        if (detailBuilder_ == null) {
          detailBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.ddz.DDZ.DDZGameOperPlayerSettle, packet.ddz.DDZ.DDZGameOperPlayerSettle.Builder, packet.ddz.DDZ.DDZGameOperPlayerSettleOrBuilder>(
                  detail_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          detail_ = null;
        }
        return detailBuilder_;
      }

      // optional sint32 spring = 5;
      private int spring_ ;
      /**
       * <code>optional sint32 spring = 5;</code>
       *
       * <pre>
       *春天次数
       * </pre>
       */
      public boolean hasSpring() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 spring = 5;</code>
       *
       * <pre>
       *春天次数
       * </pre>
       */
      public int getSpring() {
        return spring_;
      }
      /**
       * <code>optional sint32 spring = 5;</code>
       *
       * <pre>
       *春天次数
       * </pre>
       */
      public Builder setSpring(int value) {
        bitField0_ |= 0x00000010;
        spring_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 spring = 5;</code>
       *
       * <pre>
       *春天次数
       * </pre>
       */
      public Builder clearSpring() {
        bitField0_ = (bitField0_ & ~0x00000010);
        spring_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 endPoints = 6;
      private int endPoints_ ;
      /**
       * <code>optional sint32 endPoints = 6;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public boolean hasEndPoints() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 endPoints = 6;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public int getEndPoints() {
        return endPoints_;
      }
      /**
       * <code>optional sint32 endPoints = 6;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder setEndPoints(int value) {
        bitField0_ |= 0x00000020;
        endPoints_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 endPoints = 6;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder clearEndPoints() {
        bitField0_ = (bitField0_ & ~0x00000020);
        endPoints_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 innings = 7;
      private int innings_ ;
      /**
       * <code>optional sint32 innings = 7;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public boolean hasInnings() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional sint32 innings = 7;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public int getInnings() {
        return innings_;
      }
      /**
       * <code>optional sint32 innings = 7;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public Builder setInnings(int value) {
        bitField0_ |= 0x00000040;
        innings_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 innings = 7;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public Builder clearInnings() {
        bitField0_ = (bitField0_ & ~0x00000040);
        innings_ = 0;
        onChanged();
        return this;
      }

      // repeated sint32 diPai = 8;
      private java.util.List<java.lang.Integer> diPai_ = java.util.Collections.emptyList();
      private void ensureDiPaiIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          diPai_ = new java.util.ArrayList<java.lang.Integer>(diPai_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated sint32 diPai = 8;</code>
       *
       * <pre>
       *三张底牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDiPaiList() {
        return java.util.Collections.unmodifiableList(diPai_);
      }
      /**
       * <code>repeated sint32 diPai = 8;</code>
       *
       * <pre>
       *三张底牌
       * </pre>
       */
      public int getDiPaiCount() {
        return diPai_.size();
      }
      /**
       * <code>repeated sint32 diPai = 8;</code>
       *
       * <pre>
       *三张底牌
       * </pre>
       */
      public int getDiPai(int index) {
        return diPai_.get(index);
      }
      /**
       * <code>repeated sint32 diPai = 8;</code>
       *
       * <pre>
       *三张底牌
       * </pre>
       */
      public Builder setDiPai(
          int index, int value) {
        ensureDiPaiIsMutable();
        diPai_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 diPai = 8;</code>
       *
       * <pre>
       *三张底牌
       * </pre>
       */
      public Builder addDiPai(int value) {
        ensureDiPaiIsMutable();
        diPai_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 diPai = 8;</code>
       *
       * <pre>
       *三张底牌
       * </pre>
       */
      public Builder addAllDiPai(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDiPaiIsMutable();
        super.addAll(values, diPai_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 diPai = 8;</code>
       *
       * <pre>
       *三张底牌
       * </pre>
       */
      public Builder clearDiPai() {
        diPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.ddz.DDZGameOperPlayerHuSyn)
    }

    static {
      defaultInstance = new DDZGameOperPlayerHuSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.ddz.DDZGameOperPlayerHuSyn)
  }

  public interface DDZGameOperPlayerSettleOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    int getPosition();

    // optional sint32 playerId = 2;
    /**
     * <code>optional sint32 playerId = 2;</code>
     *
     * <pre>
     *ID
     * </pre>
     */
    boolean hasPlayerId();
    /**
     * <code>optional sint32 playerId = 2;</code>
     *
     * <pre>
     *ID
     * </pre>
     */
    int getPlayerId();

    // optional string playerName = 3;
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    boolean hasPlayerName();
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    java.lang.String getPlayerName();
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    com.google.protobuf.ByteString
        getPlayerNameBytes();

    // repeated sint32 handcard = 4;
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandcardList();
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    int getHandcardCount();
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    int getHandcard(int index);

    // optional sint32 isDouble = 5;
    /**
     * <code>optional sint32 isDouble = 5;</code>
     *
     * <pre>
     *是否加倍 0不加倍 1为加倍
     * </pre>
     */
    boolean hasIsDouble();
    /**
     * <code>optional sint32 isDouble = 5;</code>
     *
     * <pre>
     *是否加倍 0不加倍 1为加倍
     * </pre>
     */
    int getIsDouble();

    // optional sint32 multiple = 6;
    /**
     * <code>optional sint32 multiple = 6;</code>
     *
     * <pre>
     *总倍数
     * </pre>
     */
    boolean hasMultiple();
    /**
     * <code>optional sint32 multiple = 6;</code>
     *
     * <pre>
     *总倍数
     * </pre>
     */
    int getMultiple();

    // optional sint32 socre = 7;
    /**
     * <code>optional sint32 socre = 7;</code>
     *
     * <pre>
     *分数
     * </pre>
     */
    boolean hasSocre();
    /**
     * <code>optional sint32 socre = 7;</code>
     *
     * <pre>
     *分数
     * </pre>
     */
    int getSocre();

    // optional sint32 allSocre = 8;
    /**
     * <code>optional sint32 allSocre = 8;</code>
     *
     * <pre>
     *总分数
     * </pre>
     */
    boolean hasAllSocre();
    /**
     * <code>optional sint32 allSocre = 8;</code>
     *
     * <pre>
     *总分数
     * </pre>
     */
    int getAllSocre();

    // optional sint32 isDiZhu = 9;
    /**
     * <code>optional sint32 isDiZhu = 9;</code>
     *
     * <pre>
     *是否地主 0表示不是 1表示地主
     * </pre>
     */
    boolean hasIsDiZhu();
    /**
     * <code>optional sint32 isDiZhu = 9;</code>
     *
     * <pre>
     *是否地主 0表示不是 1表示地主
     * </pre>
     */
    int getIsDiZhu();

    // optional sint32 result = 10;
    /**
     * <code>optional sint32 result = 10;</code>
     *
     * <pre>
     * 1 win 2 lose 3 even
     * </pre>
     */
    boolean hasResult();
    /**
     * <code>optional sint32 result = 10;</code>
     *
     * <pre>
     * 1 win 2 lose 3 even
     * </pre>
     */
    int getResult();
  }
  /**
   * Protobuf type {@code packet.ddz.DDZGameOperPlayerSettle}
   */
  public static final class DDZGameOperPlayerSettle extends
      com.google.protobuf.GeneratedMessage
      implements DDZGameOperPlayerSettleOrBuilder {
    // Use DDZGameOperPlayerSettle.newBuilder() to construct.
    private DDZGameOperPlayerSettle(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DDZGameOperPlayerSettle(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DDZGameOperPlayerSettle defaultInstance;
    public static DDZGameOperPlayerSettle getDefaultInstance() {
      return defaultInstance;
    }

    public DDZGameOperPlayerSettle getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DDZGameOperPlayerSettle(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              playerId_ = input.readSInt32();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              playerName_ = input.readBytes();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                handcard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              handcard_.add(input.readSInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                handcard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                handcard_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              isDouble_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              multiple_ = input.readSInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              socre_ = input.readSInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              allSocre_ = input.readSInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000080;
              isDiZhu_ = input.readSInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              result_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          handcard_ = java.util.Collections.unmodifiableList(handcard_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerSettle_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerSettle_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.ddz.DDZ.DDZGameOperPlayerSettle.class, packet.ddz.DDZ.DDZGameOperPlayerSettle.Builder.class);
    }

    public static com.google.protobuf.Parser<DDZGameOperPlayerSettle> PARSER =
        new com.google.protobuf.AbstractParser<DDZGameOperPlayerSettle>() {
      public DDZGameOperPlayerSettle parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DDZGameOperPlayerSettle(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DDZGameOperPlayerSettle> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // optional sint32 playerId = 2;
    public static final int PLAYERID_FIELD_NUMBER = 2;
    private int playerId_;
    /**
     * <code>optional sint32 playerId = 2;</code>
     *
     * <pre>
     *ID
     * </pre>
     */
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 playerId = 2;</code>
     *
     * <pre>
     *ID
     * </pre>
     */
    public int getPlayerId() {
      return playerId_;
    }

    // optional string playerName = 3;
    public static final int PLAYERNAME_FIELD_NUMBER = 3;
    private java.lang.Object playerName_;
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    public boolean hasPlayerName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    public java.lang.String getPlayerName() {
      java.lang.Object ref = playerName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          playerName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPlayerNameBytes() {
      java.lang.Object ref = playerName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        playerName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated sint32 handcard = 4;
    public static final int HANDCARD_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> handcard_;
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandcardList() {
      return handcard_;
    }
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    public int getHandcardCount() {
      return handcard_.size();
    }
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    public int getHandcard(int index) {
      return handcard_.get(index);
    }

    // optional sint32 isDouble = 5;
    public static final int ISDOUBLE_FIELD_NUMBER = 5;
    private int isDouble_;
    /**
     * <code>optional sint32 isDouble = 5;</code>
     *
     * <pre>
     *是否加倍 0不加倍 1为加倍
     * </pre>
     */
    public boolean hasIsDouble() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 isDouble = 5;</code>
     *
     * <pre>
     *是否加倍 0不加倍 1为加倍
     * </pre>
     */
    public int getIsDouble() {
      return isDouble_;
    }

    // optional sint32 multiple = 6;
    public static final int MULTIPLE_FIELD_NUMBER = 6;
    private int multiple_;
    /**
     * <code>optional sint32 multiple = 6;</code>
     *
     * <pre>
     *总倍数
     * </pre>
     */
    public boolean hasMultiple() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 multiple = 6;</code>
     *
     * <pre>
     *总倍数
     * </pre>
     */
    public int getMultiple() {
      return multiple_;
    }

    // optional sint32 socre = 7;
    public static final int SOCRE_FIELD_NUMBER = 7;
    private int socre_;
    /**
     * <code>optional sint32 socre = 7;</code>
     *
     * <pre>
     *分数
     * </pre>
     */
    public boolean hasSocre() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 socre = 7;</code>
     *
     * <pre>
     *分数
     * </pre>
     */
    public int getSocre() {
      return socre_;
    }

    // optional sint32 allSocre = 8;
    public static final int ALLSOCRE_FIELD_NUMBER = 8;
    private int allSocre_;
    /**
     * <code>optional sint32 allSocre = 8;</code>
     *
     * <pre>
     *总分数
     * </pre>
     */
    public boolean hasAllSocre() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 allSocre = 8;</code>
     *
     * <pre>
     *总分数
     * </pre>
     */
    public int getAllSocre() {
      return allSocre_;
    }

    // optional sint32 isDiZhu = 9;
    public static final int ISDIZHU_FIELD_NUMBER = 9;
    private int isDiZhu_;
    /**
     * <code>optional sint32 isDiZhu = 9;</code>
     *
     * <pre>
     *是否地主 0表示不是 1表示地主
     * </pre>
     */
    public boolean hasIsDiZhu() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional sint32 isDiZhu = 9;</code>
     *
     * <pre>
     *是否地主 0表示不是 1表示地主
     * </pre>
     */
    public int getIsDiZhu() {
      return isDiZhu_;
    }

    // optional sint32 result = 10;
    public static final int RESULT_FIELD_NUMBER = 10;
    private int result_;
    /**
     * <code>optional sint32 result = 10;</code>
     *
     * <pre>
     * 1 win 2 lose 3 even
     * </pre>
     */
    public boolean hasResult() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional sint32 result = 10;</code>
     *
     * <pre>
     * 1 win 2 lose 3 even
     * </pre>
     */
    public int getResult() {
      return result_;
    }

    private void initFields() {
      position_ = 0;
      playerId_ = 0;
      playerName_ = "";
      handcard_ = java.util.Collections.emptyList();
      isDouble_ = 0;
      multiple_ = 0;
      socre_ = 0;
      allSocre_ = 0;
      isDiZhu_ = 0;
      result_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, playerId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getPlayerNameBytes());
      }
      for (int i = 0; i < handcard_.size(); i++) {
        output.writeSInt32(4, handcard_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(5, isDouble_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(6, multiple_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(7, socre_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(8, allSocre_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeSInt32(9, isDiZhu_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeSInt32(10, result_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, playerId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getPlayerNameBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handcard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(handcard_.get(i));
        }
        size += dataSize;
        size += 1 * getHandcardList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, isDouble_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, multiple_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, socre_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(8, allSocre_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(9, isDiZhu_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(10, result_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.ddz.DDZ.DDZGameOperPlayerSettle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerSettle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerSettle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerSettle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerSettle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerSettle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerSettle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerSettle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerSettle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperPlayerSettle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.ddz.DDZ.DDZGameOperPlayerSettle prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.ddz.DDZGameOperPlayerSettle}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.ddz.DDZ.DDZGameOperPlayerSettleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerSettle_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerSettle_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.ddz.DDZ.DDZGameOperPlayerSettle.class, packet.ddz.DDZ.DDZGameOperPlayerSettle.Builder.class);
      }

      // Construct using packet.ddz.DDZ.DDZGameOperPlayerSettle.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        playerId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        playerName_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        handcard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        isDouble_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        multiple_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        socre_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        allSocre_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        isDiZhu_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        result_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperPlayerSettle_descriptor;
      }

      public packet.ddz.DDZ.DDZGameOperPlayerSettle getDefaultInstanceForType() {
        return packet.ddz.DDZ.DDZGameOperPlayerSettle.getDefaultInstance();
      }

      public packet.ddz.DDZ.DDZGameOperPlayerSettle build() {
        packet.ddz.DDZ.DDZGameOperPlayerSettle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.ddz.DDZ.DDZGameOperPlayerSettle buildPartial() {
        packet.ddz.DDZ.DDZGameOperPlayerSettle result = new packet.ddz.DDZ.DDZGameOperPlayerSettle(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.playerId_ = playerId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.playerName_ = playerName_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          handcard_ = java.util.Collections.unmodifiableList(handcard_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.handcard_ = handcard_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.isDouble_ = isDouble_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.multiple_ = multiple_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.socre_ = socre_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.allSocre_ = allSocre_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.isDiZhu_ = isDiZhu_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.result_ = result_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.ddz.DDZ.DDZGameOperPlayerSettle) {
          return mergeFrom((packet.ddz.DDZ.DDZGameOperPlayerSettle)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.ddz.DDZ.DDZGameOperPlayerSettle other) {
        if (other == packet.ddz.DDZ.DDZGameOperPlayerSettle.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasPlayerId()) {
          setPlayerId(other.getPlayerId());
        }
        if (other.hasPlayerName()) {
          bitField0_ |= 0x00000004;
          playerName_ = other.playerName_;
          onChanged();
        }
        if (!other.handcard_.isEmpty()) {
          if (handcard_.isEmpty()) {
            handcard_ = other.handcard_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureHandcardIsMutable();
            handcard_.addAll(other.handcard_);
          }
          onChanged();
        }
        if (other.hasIsDouble()) {
          setIsDouble(other.getIsDouble());
        }
        if (other.hasMultiple()) {
          setMultiple(other.getMultiple());
        }
        if (other.hasSocre()) {
          setSocre(other.getSocre());
        }
        if (other.hasAllSocre()) {
          setAllSocre(other.getAllSocre());
        }
        if (other.hasIsDiZhu()) {
          setIsDiZhu(other.getIsDiZhu());
        }
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.ddz.DDZ.DDZGameOperPlayerSettle parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.ddz.DDZ.DDZGameOperPlayerSettle) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 playerId = 2;
      private int playerId_ ;
      /**
       * <code>optional sint32 playerId = 2;</code>
       *
       * <pre>
       *ID
       * </pre>
       */
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 playerId = 2;</code>
       *
       * <pre>
       *ID
       * </pre>
       */
      public int getPlayerId() {
        return playerId_;
      }
      /**
       * <code>optional sint32 playerId = 2;</code>
       *
       * <pre>
       *ID
       * </pre>
       */
      public Builder setPlayerId(int value) {
        bitField0_ |= 0x00000002;
        playerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 playerId = 2;</code>
       *
       * <pre>
       *ID
       * </pre>
       */
      public Builder clearPlayerId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        playerId_ = 0;
        onChanged();
        return this;
      }

      // optional string playerName = 3;
      private java.lang.Object playerName_ = "";
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public boolean hasPlayerName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public java.lang.String getPlayerName() {
        java.lang.Object ref = playerName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          playerName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPlayerNameBytes() {
        java.lang.Object ref = playerName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          playerName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public Builder setPlayerName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        playerName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public Builder clearPlayerName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        playerName_ = getDefaultInstance().getPlayerName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public Builder setPlayerNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        playerName_ = value;
        onChanged();
        return this;
      }

      // repeated sint32 handcard = 4;
      private java.util.List<java.lang.Integer> handcard_ = java.util.Collections.emptyList();
      private void ensureHandcardIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          handcard_ = new java.util.ArrayList<java.lang.Integer>(handcard_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandcardList() {
        return java.util.Collections.unmodifiableList(handcard_);
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public int getHandcardCount() {
        return handcard_.size();
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public int getHandcard(int index) {
        return handcard_.get(index);
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder setHandcard(
          int index, int value) {
        ensureHandcardIsMutable();
        handcard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder addHandcard(int value) {
        ensureHandcardIsMutable();
        handcard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder addAllHandcard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandcardIsMutable();
        super.addAll(values, handcard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder clearHandcard() {
        handcard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional sint32 isDouble = 5;
      private int isDouble_ ;
      /**
       * <code>optional sint32 isDouble = 5;</code>
       *
       * <pre>
       *是否加倍 0不加倍 1为加倍
       * </pre>
       */
      public boolean hasIsDouble() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 isDouble = 5;</code>
       *
       * <pre>
       *是否加倍 0不加倍 1为加倍
       * </pre>
       */
      public int getIsDouble() {
        return isDouble_;
      }
      /**
       * <code>optional sint32 isDouble = 5;</code>
       *
       * <pre>
       *是否加倍 0不加倍 1为加倍
       * </pre>
       */
      public Builder setIsDouble(int value) {
        bitField0_ |= 0x00000010;
        isDouble_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 isDouble = 5;</code>
       *
       * <pre>
       *是否加倍 0不加倍 1为加倍
       * </pre>
       */
      public Builder clearIsDouble() {
        bitField0_ = (bitField0_ & ~0x00000010);
        isDouble_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 multiple = 6;
      private int multiple_ ;
      /**
       * <code>optional sint32 multiple = 6;</code>
       *
       * <pre>
       *总倍数
       * </pre>
       */
      public boolean hasMultiple() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 multiple = 6;</code>
       *
       * <pre>
       *总倍数
       * </pre>
       */
      public int getMultiple() {
        return multiple_;
      }
      /**
       * <code>optional sint32 multiple = 6;</code>
       *
       * <pre>
       *总倍数
       * </pre>
       */
      public Builder setMultiple(int value) {
        bitField0_ |= 0x00000020;
        multiple_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 multiple = 6;</code>
       *
       * <pre>
       *总倍数
       * </pre>
       */
      public Builder clearMultiple() {
        bitField0_ = (bitField0_ & ~0x00000020);
        multiple_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 socre = 7;
      private int socre_ ;
      /**
       * <code>optional sint32 socre = 7;</code>
       *
       * <pre>
       *分数
       * </pre>
       */
      public boolean hasSocre() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional sint32 socre = 7;</code>
       *
       * <pre>
       *分数
       * </pre>
       */
      public int getSocre() {
        return socre_;
      }
      /**
       * <code>optional sint32 socre = 7;</code>
       *
       * <pre>
       *分数
       * </pre>
       */
      public Builder setSocre(int value) {
        bitField0_ |= 0x00000040;
        socre_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 socre = 7;</code>
       *
       * <pre>
       *分数
       * </pre>
       */
      public Builder clearSocre() {
        bitField0_ = (bitField0_ & ~0x00000040);
        socre_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 allSocre = 8;
      private int allSocre_ ;
      /**
       * <code>optional sint32 allSocre = 8;</code>
       *
       * <pre>
       *总分数
       * </pre>
       */
      public boolean hasAllSocre() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional sint32 allSocre = 8;</code>
       *
       * <pre>
       *总分数
       * </pre>
       */
      public int getAllSocre() {
        return allSocre_;
      }
      /**
       * <code>optional sint32 allSocre = 8;</code>
       *
       * <pre>
       *总分数
       * </pre>
       */
      public Builder setAllSocre(int value) {
        bitField0_ |= 0x00000080;
        allSocre_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 allSocre = 8;</code>
       *
       * <pre>
       *总分数
       * </pre>
       */
      public Builder clearAllSocre() {
        bitField0_ = (bitField0_ & ~0x00000080);
        allSocre_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 isDiZhu = 9;
      private int isDiZhu_ ;
      /**
       * <code>optional sint32 isDiZhu = 9;</code>
       *
       * <pre>
       *是否地主 0表示不是 1表示地主
       * </pre>
       */
      public boolean hasIsDiZhu() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional sint32 isDiZhu = 9;</code>
       *
       * <pre>
       *是否地主 0表示不是 1表示地主
       * </pre>
       */
      public int getIsDiZhu() {
        return isDiZhu_;
      }
      /**
       * <code>optional sint32 isDiZhu = 9;</code>
       *
       * <pre>
       *是否地主 0表示不是 1表示地主
       * </pre>
       */
      public Builder setIsDiZhu(int value) {
        bitField0_ |= 0x00000100;
        isDiZhu_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 isDiZhu = 9;</code>
       *
       * <pre>
       *是否地主 0表示不是 1表示地主
       * </pre>
       */
      public Builder clearIsDiZhu() {
        bitField0_ = (bitField0_ & ~0x00000100);
        isDiZhu_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 result = 10;
      private int result_ ;
      /**
       * <code>optional sint32 result = 10;</code>
       *
       * <pre>
       * 1 win 2 lose 3 even
       * </pre>
       */
      public boolean hasResult() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional sint32 result = 10;</code>
       *
       * <pre>
       * 1 win 2 lose 3 even
       * </pre>
       */
      public int getResult() {
        return result_;
      }
      /**
       * <code>optional sint32 result = 10;</code>
       *
       * <pre>
       * 1 win 2 lose 3 even
       * </pre>
       */
      public Builder setResult(int value) {
        bitField0_ |= 0x00000200;
        result_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 result = 10;</code>
       *
       * <pre>
       * 1 win 2 lose 3 even
       * </pre>
       */
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000200);
        result_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.ddz.DDZGameOperPlayerSettle)
    }

    static {
      defaultInstance = new DDZGameOperPlayerSettle(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.ddz.DDZGameOperPlayerSettle)
  }

  public interface DDZGameOperFinalSettleSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional sint32 roomId = 1;
    /**
     * <code>optional sint32 roomId = 1;</code>
     *
     * <pre>
     *房间ID
     * </pre>
     */
    boolean hasRoomId();
    /**
     * <code>optional sint32 roomId = 1;</code>
     *
     * <pre>
     *房间ID
     * </pre>
     */
    int getRoomId();

    // optional sint32 innings = 2;
    /**
     * <code>optional sint32 innings = 2;</code>
     *
     * <pre>
     *总局数
     * </pre>
     */
    boolean hasInnings();
    /**
     * <code>optional sint32 innings = 2;</code>
     *
     * <pre>
     *总局数
     * </pre>
     */
    int getInnings();

    // repeated .packet.ddz.DDZPlayerFinalResult detail = 3;
    /**
     * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    java.util.List<packet.ddz.DDZ.DDZPlayerFinalResult> 
        getDetailList();
    /**
     * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    packet.ddz.DDZ.DDZPlayerFinalResult getDetail(int index);
    /**
     * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    int getDetailCount();
    /**
     * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    java.util.List<? extends packet.ddz.DDZ.DDZPlayerFinalResultOrBuilder> 
        getDetailOrBuilderList();
    /**
     * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    packet.ddz.DDZ.DDZPlayerFinalResultOrBuilder getDetailOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code packet.ddz.DDZGameOperFinalSettleSyn}
   */
  public static final class DDZGameOperFinalSettleSyn extends
      com.google.protobuf.GeneratedMessage
      implements DDZGameOperFinalSettleSynOrBuilder {
    // Use DDZGameOperFinalSettleSyn.newBuilder() to construct.
    private DDZGameOperFinalSettleSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DDZGameOperFinalSettleSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DDZGameOperFinalSettleSyn defaultInstance;
    public static DDZGameOperFinalSettleSyn getDefaultInstance() {
      return defaultInstance;
    }

    public DDZGameOperFinalSettleSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DDZGameOperFinalSettleSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              roomId_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              innings_ = input.readSInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                detail_ = new java.util.ArrayList<packet.ddz.DDZ.DDZPlayerFinalResult>();
                mutable_bitField0_ |= 0x00000004;
              }
              detail_.add(input.readMessage(packet.ddz.DDZ.DDZPlayerFinalResult.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          detail_ = java.util.Collections.unmodifiableList(detail_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperFinalSettleSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperFinalSettleSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.ddz.DDZ.DDZGameOperFinalSettleSyn.class, packet.ddz.DDZ.DDZGameOperFinalSettleSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<DDZGameOperFinalSettleSyn> PARSER =
        new com.google.protobuf.AbstractParser<DDZGameOperFinalSettleSyn>() {
      public DDZGameOperFinalSettleSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DDZGameOperFinalSettleSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DDZGameOperFinalSettleSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional sint32 roomId = 1;
    public static final int ROOMID_FIELD_NUMBER = 1;
    private int roomId_;
    /**
     * <code>optional sint32 roomId = 1;</code>
     *
     * <pre>
     *房间ID
     * </pre>
     */
    public boolean hasRoomId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sint32 roomId = 1;</code>
     *
     * <pre>
     *房间ID
     * </pre>
     */
    public int getRoomId() {
      return roomId_;
    }

    // optional sint32 innings = 2;
    public static final int INNINGS_FIELD_NUMBER = 2;
    private int innings_;
    /**
     * <code>optional sint32 innings = 2;</code>
     *
     * <pre>
     *总局数
     * </pre>
     */
    public boolean hasInnings() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 innings = 2;</code>
     *
     * <pre>
     *总局数
     * </pre>
     */
    public int getInnings() {
      return innings_;
    }

    // repeated .packet.ddz.DDZPlayerFinalResult detail = 3;
    public static final int DETAIL_FIELD_NUMBER = 3;
    private java.util.List<packet.ddz.DDZ.DDZPlayerFinalResult> detail_;
    /**
     * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    public java.util.List<packet.ddz.DDZ.DDZPlayerFinalResult> getDetailList() {
      return detail_;
    }
    /**
     * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    public java.util.List<? extends packet.ddz.DDZ.DDZPlayerFinalResultOrBuilder> 
        getDetailOrBuilderList() {
      return detail_;
    }
    /**
     * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    public int getDetailCount() {
      return detail_.size();
    }
    /**
     * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    public packet.ddz.DDZ.DDZPlayerFinalResult getDetail(int index) {
      return detail_.get(index);
    }
    /**
     * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    public packet.ddz.DDZ.DDZPlayerFinalResultOrBuilder getDetailOrBuilder(
        int index) {
      return detail_.get(index);
    }

    private void initFields() {
      roomId_ = 0;
      innings_ = 0;
      detail_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, roomId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, innings_);
      }
      for (int i = 0; i < detail_.size(); i++) {
        output.writeMessage(3, detail_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, roomId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, innings_);
      }
      for (int i = 0; i < detail_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, detail_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.ddz.DDZ.DDZGameOperFinalSettleSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperFinalSettleSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperFinalSettleSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZGameOperFinalSettleSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperFinalSettleSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperFinalSettleSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperFinalSettleSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperFinalSettleSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZGameOperFinalSettleSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZGameOperFinalSettleSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.ddz.DDZ.DDZGameOperFinalSettleSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.ddz.DDZGameOperFinalSettleSyn}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.ddz.DDZ.DDZGameOperFinalSettleSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperFinalSettleSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperFinalSettleSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.ddz.DDZ.DDZGameOperFinalSettleSyn.class, packet.ddz.DDZ.DDZGameOperFinalSettleSyn.Builder.class);
      }

      // Construct using packet.ddz.DDZ.DDZGameOperFinalSettleSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDetailFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        roomId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        innings_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (detailBuilder_ == null) {
          detail_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          detailBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZGameOperFinalSettleSyn_descriptor;
      }

      public packet.ddz.DDZ.DDZGameOperFinalSettleSyn getDefaultInstanceForType() {
        return packet.ddz.DDZ.DDZGameOperFinalSettleSyn.getDefaultInstance();
      }

      public packet.ddz.DDZ.DDZGameOperFinalSettleSyn build() {
        packet.ddz.DDZ.DDZGameOperFinalSettleSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.ddz.DDZ.DDZGameOperFinalSettleSyn buildPartial() {
        packet.ddz.DDZ.DDZGameOperFinalSettleSyn result = new packet.ddz.DDZ.DDZGameOperFinalSettleSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.roomId_ = roomId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.innings_ = innings_;
        if (detailBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            detail_ = java.util.Collections.unmodifiableList(detail_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.detail_ = detail_;
        } else {
          result.detail_ = detailBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.ddz.DDZ.DDZGameOperFinalSettleSyn) {
          return mergeFrom((packet.ddz.DDZ.DDZGameOperFinalSettleSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.ddz.DDZ.DDZGameOperFinalSettleSyn other) {
        if (other == packet.ddz.DDZ.DDZGameOperFinalSettleSyn.getDefaultInstance()) return this;
        if (other.hasRoomId()) {
          setRoomId(other.getRoomId());
        }
        if (other.hasInnings()) {
          setInnings(other.getInnings());
        }
        if (detailBuilder_ == null) {
          if (!other.detail_.isEmpty()) {
            if (detail_.isEmpty()) {
              detail_ = other.detail_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureDetailIsMutable();
              detail_.addAll(other.detail_);
            }
            onChanged();
          }
        } else {
          if (!other.detail_.isEmpty()) {
            if (detailBuilder_.isEmpty()) {
              detailBuilder_.dispose();
              detailBuilder_ = null;
              detail_ = other.detail_;
              bitField0_ = (bitField0_ & ~0x00000004);
              detailBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDetailFieldBuilder() : null;
            } else {
              detailBuilder_.addAllMessages(other.detail_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.ddz.DDZ.DDZGameOperFinalSettleSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.ddz.DDZ.DDZGameOperFinalSettleSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional sint32 roomId = 1;
      private int roomId_ ;
      /**
       * <code>optional sint32 roomId = 1;</code>
       *
       * <pre>
       *房间ID
       * </pre>
       */
      public boolean hasRoomId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sint32 roomId = 1;</code>
       *
       * <pre>
       *房间ID
       * </pre>
       */
      public int getRoomId() {
        return roomId_;
      }
      /**
       * <code>optional sint32 roomId = 1;</code>
       *
       * <pre>
       *房间ID
       * </pre>
       */
      public Builder setRoomId(int value) {
        bitField0_ |= 0x00000001;
        roomId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 roomId = 1;</code>
       *
       * <pre>
       *房间ID
       * </pre>
       */
      public Builder clearRoomId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        roomId_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 innings = 2;
      private int innings_ ;
      /**
       * <code>optional sint32 innings = 2;</code>
       *
       * <pre>
       *总局数
       * </pre>
       */
      public boolean hasInnings() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 innings = 2;</code>
       *
       * <pre>
       *总局数
       * </pre>
       */
      public int getInnings() {
        return innings_;
      }
      /**
       * <code>optional sint32 innings = 2;</code>
       *
       * <pre>
       *总局数
       * </pre>
       */
      public Builder setInnings(int value) {
        bitField0_ |= 0x00000002;
        innings_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 innings = 2;</code>
       *
       * <pre>
       *总局数
       * </pre>
       */
      public Builder clearInnings() {
        bitField0_ = (bitField0_ & ~0x00000002);
        innings_ = 0;
        onChanged();
        return this;
      }

      // repeated .packet.ddz.DDZPlayerFinalResult detail = 3;
      private java.util.List<packet.ddz.DDZ.DDZPlayerFinalResult> detail_ =
        java.util.Collections.emptyList();
      private void ensureDetailIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          detail_ = new java.util.ArrayList<packet.ddz.DDZ.DDZPlayerFinalResult>(detail_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZPlayerFinalResult, packet.ddz.DDZ.DDZPlayerFinalResult.Builder, packet.ddz.DDZ.DDZPlayerFinalResultOrBuilder> detailBuilder_;

      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZPlayerFinalResult> getDetailList() {
        if (detailBuilder_ == null) {
          return java.util.Collections.unmodifiableList(detail_);
        } else {
          return detailBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public int getDetailCount() {
        if (detailBuilder_ == null) {
          return detail_.size();
        } else {
          return detailBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public packet.ddz.DDZ.DDZPlayerFinalResult getDetail(int index) {
        if (detailBuilder_ == null) {
          return detail_.get(index);
        } else {
          return detailBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder setDetail(
          int index, packet.ddz.DDZ.DDZPlayerFinalResult value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.set(index, value);
          onChanged();
        } else {
          detailBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder setDetail(
          int index, packet.ddz.DDZ.DDZPlayerFinalResult.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.set(index, builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder addDetail(packet.ddz.DDZ.DDZPlayerFinalResult value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.add(value);
          onChanged();
        } else {
          detailBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder addDetail(
          int index, packet.ddz.DDZ.DDZPlayerFinalResult value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.add(index, value);
          onChanged();
        } else {
          detailBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder addDetail(
          packet.ddz.DDZ.DDZPlayerFinalResult.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.add(builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder addDetail(
          int index, packet.ddz.DDZ.DDZPlayerFinalResult.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.add(index, builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder addAllDetail(
          java.lang.Iterable<? extends packet.ddz.DDZ.DDZPlayerFinalResult> values) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          super.addAll(values, detail_);
          onChanged();
        } else {
          detailBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder clearDetail() {
        if (detailBuilder_ == null) {
          detail_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          detailBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder removeDetail(int index) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.remove(index);
          onChanged();
        } else {
          detailBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public packet.ddz.DDZ.DDZPlayerFinalResult.Builder getDetailBuilder(
          int index) {
        return getDetailFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public packet.ddz.DDZ.DDZPlayerFinalResultOrBuilder getDetailOrBuilder(
          int index) {
        if (detailBuilder_ == null) {
          return detail_.get(index);  } else {
          return detailBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public java.util.List<? extends packet.ddz.DDZ.DDZPlayerFinalResultOrBuilder> 
           getDetailOrBuilderList() {
        if (detailBuilder_ != null) {
          return detailBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(detail_);
        }
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public packet.ddz.DDZ.DDZPlayerFinalResult.Builder addDetailBuilder() {
        return getDetailFieldBuilder().addBuilder(
            packet.ddz.DDZ.DDZPlayerFinalResult.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public packet.ddz.DDZ.DDZPlayerFinalResult.Builder addDetailBuilder(
          int index) {
        return getDetailFieldBuilder().addBuilder(
            index, packet.ddz.DDZ.DDZPlayerFinalResult.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.ddz.DDZPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public java.util.List<packet.ddz.DDZ.DDZPlayerFinalResult.Builder> 
           getDetailBuilderList() {
        return getDetailFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.ddz.DDZ.DDZPlayerFinalResult, packet.ddz.DDZ.DDZPlayerFinalResult.Builder, packet.ddz.DDZ.DDZPlayerFinalResultOrBuilder> 
          getDetailFieldBuilder() {
        if (detailBuilder_ == null) {
          detailBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.ddz.DDZ.DDZPlayerFinalResult, packet.ddz.DDZ.DDZPlayerFinalResult.Builder, packet.ddz.DDZ.DDZPlayerFinalResultOrBuilder>(
                  detail_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          detail_ = null;
        }
        return detailBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:packet.ddz.DDZGameOperFinalSettleSyn)
    }

    static {
      defaultInstance = new DDZGameOperFinalSettleSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.ddz.DDZGameOperFinalSettleSyn)
  }

  public interface DDZPlayerFinalResultOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional sint64 playerId = 1;
    /**
     * <code>optional sint64 playerId = 1;</code>
     *
     * <pre>
     *玩家ID
     * </pre>
     */
    boolean hasPlayerId();
    /**
     * <code>optional sint64 playerId = 1;</code>
     *
     * <pre>
     *玩家ID
     * </pre>
     */
    long getPlayerId();

    // optional string playerName = 2;
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    boolean hasPlayerName();
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    java.lang.String getPlayerName();
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    com.google.protobuf.ByteString
        getPlayerNameBytes();

    // optional sint32 position = 3;
    /**
     * <code>optional sint32 position = 3;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>optional sint32 position = 3;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // optional string headImage = 4;
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    boolean hasHeadImage();
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    java.lang.String getHeadImage();
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    com.google.protobuf.ByteString
        getHeadImageBytes();

    // optional sint32 allScore = 5;
    /**
     * <code>optional sint32 allScore = 5;</code>
     *
     * <pre>
     *玩家总分
     * </pre>
     */
    boolean hasAllScore();
    /**
     * <code>optional sint32 allScore = 5;</code>
     *
     * <pre>
     *玩家总分
     * </pre>
     */
    int getAllScore();

    // optional sint32 winInnings = 6;
    /**
     * <code>optional sint32 winInnings = 6;</code>
     *
     * <pre>
     *玩家赢的局数
     * </pre>
     */
    boolean hasWinInnings();
    /**
     * <code>optional sint32 winInnings = 6;</code>
     *
     * <pre>
     *玩家赢的局数
     * </pre>
     */
    int getWinInnings();

    // optional bool roomOwner = 12;
    /**
     * <code>optional bool roomOwner = 12;</code>
     *
     * <pre>
     *是否是否房主
     * </pre>
     */
    boolean hasRoomOwner();
    /**
     * <code>optional bool roomOwner = 12;</code>
     *
     * <pre>
     *是否是否房主
     * </pre>
     */
    boolean getRoomOwner();
  }
  /**
   * Protobuf type {@code packet.ddz.DDZPlayerFinalResult}
   */
  public static final class DDZPlayerFinalResult extends
      com.google.protobuf.GeneratedMessage
      implements DDZPlayerFinalResultOrBuilder {
    // Use DDZPlayerFinalResult.newBuilder() to construct.
    private DDZPlayerFinalResult(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DDZPlayerFinalResult(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DDZPlayerFinalResult defaultInstance;
    public static DDZPlayerFinalResult getDefaultInstance() {
      return defaultInstance;
    }

    public DDZPlayerFinalResult getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DDZPlayerFinalResult(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              playerId_ = input.readSInt64();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              playerName_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              position_ = input.readSInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              headImage_ = input.readBytes();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              allScore_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              winInnings_ = input.readSInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000040;
              roomOwner_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZPlayerFinalResult_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZPlayerFinalResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.ddz.DDZ.DDZPlayerFinalResult.class, packet.ddz.DDZ.DDZPlayerFinalResult.Builder.class);
    }

    public static com.google.protobuf.Parser<DDZPlayerFinalResult> PARSER =
        new com.google.protobuf.AbstractParser<DDZPlayerFinalResult>() {
      public DDZPlayerFinalResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DDZPlayerFinalResult(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DDZPlayerFinalResult> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional sint64 playerId = 1;
    public static final int PLAYERID_FIELD_NUMBER = 1;
    private long playerId_;
    /**
     * <code>optional sint64 playerId = 1;</code>
     *
     * <pre>
     *玩家ID
     * </pre>
     */
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sint64 playerId = 1;</code>
     *
     * <pre>
     *玩家ID
     * </pre>
     */
    public long getPlayerId() {
      return playerId_;
    }

    // optional string playerName = 2;
    public static final int PLAYERNAME_FIELD_NUMBER = 2;
    private java.lang.Object playerName_;
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    public boolean hasPlayerName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    public java.lang.String getPlayerName() {
      java.lang.Object ref = playerName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          playerName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPlayerNameBytes() {
      java.lang.Object ref = playerName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        playerName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional sint32 position = 3;
    public static final int POSITION_FIELD_NUMBER = 3;
    private int position_;
    /**
     * <code>optional sint32 position = 3;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 position = 3;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // optional string headImage = 4;
    public static final int HEADIMAGE_FIELD_NUMBER = 4;
    private java.lang.Object headImage_;
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public boolean hasHeadImage() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public java.lang.String getHeadImage() {
      java.lang.Object ref = headImage_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          headImage_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHeadImageBytes() {
      java.lang.Object ref = headImage_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        headImage_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional sint32 allScore = 5;
    public static final int ALLSCORE_FIELD_NUMBER = 5;
    private int allScore_;
    /**
     * <code>optional sint32 allScore = 5;</code>
     *
     * <pre>
     *玩家总分
     * </pre>
     */
    public boolean hasAllScore() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 allScore = 5;</code>
     *
     * <pre>
     *玩家总分
     * </pre>
     */
    public int getAllScore() {
      return allScore_;
    }

    // optional sint32 winInnings = 6;
    public static final int WININNINGS_FIELD_NUMBER = 6;
    private int winInnings_;
    /**
     * <code>optional sint32 winInnings = 6;</code>
     *
     * <pre>
     *玩家赢的局数
     * </pre>
     */
    public boolean hasWinInnings() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 winInnings = 6;</code>
     *
     * <pre>
     *玩家赢的局数
     * </pre>
     */
    public int getWinInnings() {
      return winInnings_;
    }

    // optional bool roomOwner = 12;
    public static final int ROOMOWNER_FIELD_NUMBER = 12;
    private boolean roomOwner_;
    /**
     * <code>optional bool roomOwner = 12;</code>
     *
     * <pre>
     *是否是否房主
     * </pre>
     */
    public boolean hasRoomOwner() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool roomOwner = 12;</code>
     *
     * <pre>
     *是否是否房主
     * </pre>
     */
    public boolean getRoomOwner() {
      return roomOwner_;
    }

    private void initFields() {
      playerId_ = 0L;
      playerName_ = "";
      position_ = 0;
      headImage_ = "";
      allScore_ = 0;
      winInnings_ = 0;
      roomOwner_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt64(1, playerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getPlayerNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, position_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getHeadImageBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, allScore_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(6, winInnings_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(12, roomOwner_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(1, playerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getPlayerNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, position_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getHeadImageBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, allScore_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, winInnings_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, roomOwner_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.ddz.DDZ.DDZPlayerFinalResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZPlayerFinalResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZPlayerFinalResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZPlayerFinalResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZPlayerFinalResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZPlayerFinalResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZPlayerFinalResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.ddz.DDZ.DDZPlayerFinalResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZPlayerFinalResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZPlayerFinalResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.ddz.DDZ.DDZPlayerFinalResult prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.ddz.DDZPlayerFinalResult}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.ddz.DDZ.DDZPlayerFinalResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZPlayerFinalResult_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZPlayerFinalResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.ddz.DDZ.DDZPlayerFinalResult.class, packet.ddz.DDZ.DDZPlayerFinalResult.Builder.class);
      }

      // Construct using packet.ddz.DDZ.DDZPlayerFinalResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        playerId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        playerName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        headImage_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        allScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        winInnings_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        roomOwner_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZPlayerFinalResult_descriptor;
      }

      public packet.ddz.DDZ.DDZPlayerFinalResult getDefaultInstanceForType() {
        return packet.ddz.DDZ.DDZPlayerFinalResult.getDefaultInstance();
      }

      public packet.ddz.DDZ.DDZPlayerFinalResult build() {
        packet.ddz.DDZ.DDZPlayerFinalResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.ddz.DDZ.DDZPlayerFinalResult buildPartial() {
        packet.ddz.DDZ.DDZPlayerFinalResult result = new packet.ddz.DDZ.DDZPlayerFinalResult(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.playerId_ = playerId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.playerName_ = playerName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.headImage_ = headImage_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.allScore_ = allScore_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.winInnings_ = winInnings_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.roomOwner_ = roomOwner_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.ddz.DDZ.DDZPlayerFinalResult) {
          return mergeFrom((packet.ddz.DDZ.DDZPlayerFinalResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.ddz.DDZ.DDZPlayerFinalResult other) {
        if (other == packet.ddz.DDZ.DDZPlayerFinalResult.getDefaultInstance()) return this;
        if (other.hasPlayerId()) {
          setPlayerId(other.getPlayerId());
        }
        if (other.hasPlayerName()) {
          bitField0_ |= 0x00000002;
          playerName_ = other.playerName_;
          onChanged();
        }
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasHeadImage()) {
          bitField0_ |= 0x00000008;
          headImage_ = other.headImage_;
          onChanged();
        }
        if (other.hasAllScore()) {
          setAllScore(other.getAllScore());
        }
        if (other.hasWinInnings()) {
          setWinInnings(other.getWinInnings());
        }
        if (other.hasRoomOwner()) {
          setRoomOwner(other.getRoomOwner());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.ddz.DDZ.DDZPlayerFinalResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.ddz.DDZ.DDZPlayerFinalResult) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional sint64 playerId = 1;
      private long playerId_ ;
      /**
       * <code>optional sint64 playerId = 1;</code>
       *
       * <pre>
       *玩家ID
       * </pre>
       */
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sint64 playerId = 1;</code>
       *
       * <pre>
       *玩家ID
       * </pre>
       */
      public long getPlayerId() {
        return playerId_;
      }
      /**
       * <code>optional sint64 playerId = 1;</code>
       *
       * <pre>
       *玩家ID
       * </pre>
       */
      public Builder setPlayerId(long value) {
        bitField0_ |= 0x00000001;
        playerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint64 playerId = 1;</code>
       *
       * <pre>
       *玩家ID
       * </pre>
       */
      public Builder clearPlayerId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        playerId_ = 0L;
        onChanged();
        return this;
      }

      // optional string playerName = 2;
      private java.lang.Object playerName_ = "";
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public boolean hasPlayerName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public java.lang.String getPlayerName() {
        java.lang.Object ref = playerName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          playerName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPlayerNameBytes() {
        java.lang.Object ref = playerName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          playerName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public Builder setPlayerName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        playerName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public Builder clearPlayerName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        playerName_ = getDefaultInstance().getPlayerName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public Builder setPlayerNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        playerName_ = value;
        onChanged();
        return this;
      }

      // optional sint32 position = 3;
      private int position_ ;
      /**
       * <code>optional sint32 position = 3;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 position = 3;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>optional sint32 position = 3;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000004;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 position = 3;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000004);
        position_ = 0;
        onChanged();
        return this;
      }

      // optional string headImage = 4;
      private java.lang.Object headImage_ = "";
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public boolean hasHeadImage() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public java.lang.String getHeadImage() {
        java.lang.Object ref = headImage_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          headImage_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHeadImageBytes() {
        java.lang.Object ref = headImage_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          headImage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        headImage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder clearHeadImage() {
        bitField0_ = (bitField0_ & ~0x00000008);
        headImage_ = getDefaultInstance().getHeadImage();
        onChanged();
        return this;
      }
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        headImage_ = value;
        onChanged();
        return this;
      }

      // optional sint32 allScore = 5;
      private int allScore_ ;
      /**
       * <code>optional sint32 allScore = 5;</code>
       *
       * <pre>
       *玩家总分
       * </pre>
       */
      public boolean hasAllScore() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 allScore = 5;</code>
       *
       * <pre>
       *玩家总分
       * </pre>
       */
      public int getAllScore() {
        return allScore_;
      }
      /**
       * <code>optional sint32 allScore = 5;</code>
       *
       * <pre>
       *玩家总分
       * </pre>
       */
      public Builder setAllScore(int value) {
        bitField0_ |= 0x00000010;
        allScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 allScore = 5;</code>
       *
       * <pre>
       *玩家总分
       * </pre>
       */
      public Builder clearAllScore() {
        bitField0_ = (bitField0_ & ~0x00000010);
        allScore_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 winInnings = 6;
      private int winInnings_ ;
      /**
       * <code>optional sint32 winInnings = 6;</code>
       *
       * <pre>
       *玩家赢的局数
       * </pre>
       */
      public boolean hasWinInnings() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 winInnings = 6;</code>
       *
       * <pre>
       *玩家赢的局数
       * </pre>
       */
      public int getWinInnings() {
        return winInnings_;
      }
      /**
       * <code>optional sint32 winInnings = 6;</code>
       *
       * <pre>
       *玩家赢的局数
       * </pre>
       */
      public Builder setWinInnings(int value) {
        bitField0_ |= 0x00000020;
        winInnings_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 winInnings = 6;</code>
       *
       * <pre>
       *玩家赢的局数
       * </pre>
       */
      public Builder clearWinInnings() {
        bitField0_ = (bitField0_ & ~0x00000020);
        winInnings_ = 0;
        onChanged();
        return this;
      }

      // optional bool roomOwner = 12;
      private boolean roomOwner_ ;
      /**
       * <code>optional bool roomOwner = 12;</code>
       *
       * <pre>
       *是否是否房主
       * </pre>
       */
      public boolean hasRoomOwner() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool roomOwner = 12;</code>
       *
       * <pre>
       *是否是否房主
       * </pre>
       */
      public boolean getRoomOwner() {
        return roomOwner_;
      }
      /**
       * <code>optional bool roomOwner = 12;</code>
       *
       * <pre>
       *是否是否房主
       * </pre>
       */
      public Builder setRoomOwner(boolean value) {
        bitField0_ |= 0x00000040;
        roomOwner_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool roomOwner = 12;</code>
       *
       * <pre>
       *是否是否房主
       * </pre>
       */
      public Builder clearRoomOwner() {
        bitField0_ = (bitField0_ & ~0x00000040);
        roomOwner_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.ddz.DDZPlayerFinalResult)
    }

    static {
      defaultInstance = new DDZPlayerFinalResult(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.ddz.DDZPlayerFinalResult)
  }

  public interface DDZClearCardInDeskOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code packet.ddz.DDZClearCardInDesk}
   *
   * <pre>
   *斗地主清除桌面牌
   * </pre>
   */
  public static final class DDZClearCardInDesk extends
      com.google.protobuf.GeneratedMessage
      implements DDZClearCardInDeskOrBuilder {
    // Use DDZClearCardInDesk.newBuilder() to construct.
    private DDZClearCardInDesk(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DDZClearCardInDesk(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DDZClearCardInDesk defaultInstance;
    public static DDZClearCardInDesk getDefaultInstance() {
      return defaultInstance;
    }

    public DDZClearCardInDesk getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DDZClearCardInDesk(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZClearCardInDesk_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.ddz.DDZ.internal_static_packet_ddz_DDZClearCardInDesk_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.ddz.DDZ.DDZClearCardInDesk.class, packet.ddz.DDZ.DDZClearCardInDesk.Builder.class);
    }

    public static com.google.protobuf.Parser<DDZClearCardInDesk> PARSER =
        new com.google.protobuf.AbstractParser<DDZClearCardInDesk>() {
      public DDZClearCardInDesk parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DDZClearCardInDesk(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DDZClearCardInDesk> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.ddz.DDZ.DDZClearCardInDesk parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZClearCardInDesk parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZClearCardInDesk parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.ddz.DDZ.DDZClearCardInDesk parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZClearCardInDesk parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZClearCardInDesk parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZClearCardInDesk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.ddz.DDZ.DDZClearCardInDesk parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.ddz.DDZ.DDZClearCardInDesk parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.ddz.DDZ.DDZClearCardInDesk parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.ddz.DDZ.DDZClearCardInDesk prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.ddz.DDZClearCardInDesk}
     *
     * <pre>
     *斗地主清除桌面牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.ddz.DDZ.DDZClearCardInDeskOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZClearCardInDesk_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZClearCardInDesk_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.ddz.DDZ.DDZClearCardInDesk.class, packet.ddz.DDZ.DDZClearCardInDesk.Builder.class);
      }

      // Construct using packet.ddz.DDZ.DDZClearCardInDesk.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.ddz.DDZ.internal_static_packet_ddz_DDZClearCardInDesk_descriptor;
      }

      public packet.ddz.DDZ.DDZClearCardInDesk getDefaultInstanceForType() {
        return packet.ddz.DDZ.DDZClearCardInDesk.getDefaultInstance();
      }

      public packet.ddz.DDZ.DDZClearCardInDesk build() {
        packet.ddz.DDZ.DDZClearCardInDesk result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.ddz.DDZ.DDZClearCardInDesk buildPartial() {
        packet.ddz.DDZ.DDZClearCardInDesk result = new packet.ddz.DDZ.DDZClearCardInDesk(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.ddz.DDZ.DDZClearCardInDesk) {
          return mergeFrom((packet.ddz.DDZ.DDZClearCardInDesk)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.ddz.DDZ.DDZClearCardInDesk other) {
        if (other == packet.ddz.DDZ.DDZClearCardInDesk.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.ddz.DDZ.DDZClearCardInDesk parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.ddz.DDZ.DDZClearCardInDesk) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.ddz.DDZClearCardInDesk)
    }

    static {
      defaultInstance = new DDZClearCardInDesk(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.ddz.DDZClearCardInDesk)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_ddz_DDZGameOperStartSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_ddz_DDZGameOperStartSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_ddz_DDZPlayerCard_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_ddz_DDZPlayerCard_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_ddz_DDZGameOperHandCardSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_ddz_DDZGameOperHandCardSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_ddz_DDZGameOperPublicInfoSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_ddz_DDZGameOperPublicInfoSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_ddz_DDZGameOperActorSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_ddz_DDZGameOperActorSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_ddz_DDZGameOperPlayerActionSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_ddz_DDZGameOperPlayerActionSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_ddz_DDZGameCardInDesk_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_ddz_DDZGameCardInDesk_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_ddz_DDZGameOperPlayerActionNotify_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_ddz_DDZGameOperPlayerActionNotify_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_ddz_DDZGameOperOver_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_ddz_DDZGameOperOver_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_ddz_DDZGameOperPrompt_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_ddz_DDZGameOperPrompt_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_ddz_DDZGameOperPlayerHuSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_ddz_DDZGameOperPlayerHuSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_ddz_DDZGameOperPlayerSettle_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_ddz_DDZGameOperPlayerSettle_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_ddz_DDZGameOperFinalSettleSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_ddz_DDZGameOperFinalSettleSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_ddz_DDZPlayerFinalResult_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_ddz_DDZPlayerFinalResult_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_ddz_DDZClearCardInDesk_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_ddz_DDZClearCardInDesk_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\tDDZ.proto\022\npacket.ddz\"\254\003\n\023DDZGameOperS" +
      "tartSyn\022\021\n\tbankerPos\030\001 \001(\021\022\023\n\013serviceGol" +
      "d\030\002 \002(\021\022;\n\017playerHandCards\030\003 \003(\0132\".packe" +
      "t.ddz.DDZGameOperHandCardSyn\022\017\n\007quanNum\030" +
      "\004 \001(\021\022\013\n\003seq\030\005 \001(\021\022\021\n\treconnect\030\006 \001(\010\022\020\n" +
      "\010cardLeft\030\007 \003(\021\022\020\n\010multiple\030\010 \001(\021\022\016\n\006lun" +
      "Num\030\t \001(\021\022\026\n\016lastActionCard\030\n \003(\021\022\032\n\022las" +
      "tActionPosition\030\013 \001(\021\0221\n\ncardInDesk\030\014 \003(" +
      "\0132\035.packet.ddz.DDZGameCardInDesk\022\r\n\005DiPa" +
      "i\030\016 \003(\021\022\016\n\006robNum\030\017 \001(\021\0221\n\016playerCardLef",
      "t\030\020 \003(\0132\031.packet.ddz.DDZPlayerCard\022\022\n\nra" +
      "ngPaiNum\030\021 \001(\021\"B\n\rDDZPlayerCard\022\020\n\010posit" +
      "ion\030\001 \002(\021\022\017\n\007cardNum\030\002 \002(\021\022\016\n\006jiaBei\030\003 \002" +
      "(\021\"\206\001\n\026DDZGameOperHandCardSyn\022\020\n\010positio" +
      "n\030\001 \002(\021\022\021\n\thandCards\030\002 \003(\021\022\023\n\013cardsBefor" +
      "e\030\003 \003(\021\022\017\n\007cardNum\030\004 \001(\021\022\r\n\005socre\030\005 \001(\021\022" +
      "\022\n\nneedFenCha\030\006 \001(\021\",\n\030DDZGameOperPublic" +
      "InfoSyn\022\020\n\010cardLeft\030\001 \003(\021\"9\n\023DDZGameOper" +
      "ActorSyn\022\020\n\010position\030\001 \002(\021\022\020\n\010timeLeft\030\002" +
      " \002(\021\"\370\001\n\032DDZGameOperPlayerActionSyn\022\020\n\010p",
      "osition\030\001 \002(\021\022\016\n\006action\030\002 \002(\021\022\021\n\tcardVal" +
      "ue\030\003 \003(\021\022\016\n\006robNum\030\004 \001(\021\022\016\n\006jiabei\030\005 \001(\021" +
      "\022\016\n\006canOut\030\006 \001(\021\022\020\n\010cardType\030\007 \001(\021\022\017\n\007ca" +
      "rdNum\030\010 \001(\021\0221\n\ncardInDesk\030\t \003(\0132\035.packet" +
      ".ddz.DDZGameCardInDesk\022\022\n\nrangPaiNum\030\n \001" +
      "(\021\022\013\n\003seq\030d \001(\021\"8\n\021DDZGameCardInDesk\022\020\n\010" +
      "position\030\001 \002(\021\022\021\n\tcardValue\030\002 \003(\021\"\304\002\n\035DD" +
      "ZGameOperPlayerActionNotify\022\020\n\010position\030" +
      "\001 \002(\021\022\017\n\007actions\030\002 \002(\021\022\016\n\006robNum\030\003 \003(\021\022\016" +
      "\n\006double\030\004 \001(\021\022\032\n\022lastActionPosition\030\005 \001",
      "(\021\022\032\n\022lastActionCardType\030\006 \001(\021\022\027\n\017lastPe" +
      "opleCards\030\007 \003(\021\0222\n\013promptCards\030\010 \003(\0132\035.p" +
      "acket.ddz.DDZGameOperPrompt\022\016\n\006canOut\030\t " +
      "\001(\021\022.\n\totherCard\030\n \003(\0132\033.packet.ddz.DDZG" +
      "ameOperOver\022\016\n\006spring\030\013 \001(\021\022\013\n\003seq\030d \001(\021" +
      "\"2\n\017DDZGameOperOver\022\020\n\010position\030\001 \002(\021\022\r\n" +
      "\005cards\030\002 \003(\021\"\"\n\021DDZGameOperPrompt\022\r\n\005car" +
      "ds\030\001 \003(\021\"\303\001\n\026DDZGameOperPlayerHuSyn\022\020\n\010p" +
      "osition\030\001 \002(\021\022\021\n\tfriedKing\030\002 \001(\021\022\014\n\004bomb" +
      "\030\003 \001(\021\0223\n\006detail\030\004 \003(\0132#.packet.ddz.DDZG",
      "ameOperPlayerSettle\022\016\n\006spring\030\005 \001(\021\022\021\n\te" +
      "ndPoints\030\006 \001(\021\022\017\n\007innings\030\007 \001(\021\022\r\n\005diPai" +
      "\030\010 \003(\021\"\311\001\n\027DDZGameOperPlayerSettle\022\020\n\010po" +
      "sition\030\001 \002(\021\022\020\n\010playerId\030\002 \001(\021\022\022\n\nplayer" +
      "Name\030\003 \001(\t\022\020\n\010handcard\030\004 \003(\021\022\020\n\010isDouble" +
      "\030\005 \001(\021\022\020\n\010multiple\030\006 \001(\021\022\r\n\005socre\030\007 \001(\021\022" +
      "\020\n\010allSocre\030\010 \001(\021\022\017\n\007isDiZhu\030\t \001(\021\022\016\n\006re" +
      "sult\030\n \001(\021\"n\n\031DDZGameOperFinalSettleSyn\022" +
      "\016\n\006roomId\030\001 \001(\021\022\017\n\007innings\030\002 \001(\021\0220\n\006deta" +
      "il\030\003 \003(\0132 .packet.ddz.DDZPlayerFinalResu",
      "lt\"\232\001\n\024DDZPlayerFinalResult\022\020\n\010playerId\030" +
      "\001 \001(\022\022\022\n\nplayerName\030\002 \001(\t\022\020\n\010position\030\003 " +
      "\001(\021\022\021\n\theadImage\030\004 \001(\t\022\020\n\010allScore\030\005 \001(\021" +
      "\022\022\n\nwinInnings\030\006 \001(\021\022\021\n\troomOwner\030\014 \001(\010\"" +
      "\024\n\022DDZClearCardInDesk"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_packet_ddz_DDZGameOperStartSyn_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_packet_ddz_DDZGameOperStartSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_ddz_DDZGameOperStartSyn_descriptor,
              new java.lang.String[] { "BankerPos", "ServiceGold", "PlayerHandCards", "QuanNum", "Seq", "Reconnect", "CardLeft", "Multiple", "LunNum", "LastActionCard", "LastActionPosition", "CardInDesk", "DiPai", "RobNum", "PlayerCardLeft", "RangPaiNum", });
          internal_static_packet_ddz_DDZPlayerCard_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_packet_ddz_DDZPlayerCard_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_ddz_DDZPlayerCard_descriptor,
              new java.lang.String[] { "Position", "CardNum", "JiaBei", });
          internal_static_packet_ddz_DDZGameOperHandCardSyn_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_packet_ddz_DDZGameOperHandCardSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_ddz_DDZGameOperHandCardSyn_descriptor,
              new java.lang.String[] { "Position", "HandCards", "CardsBefore", "CardNum", "Socre", "NeedFenCha", });
          internal_static_packet_ddz_DDZGameOperPublicInfoSyn_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_packet_ddz_DDZGameOperPublicInfoSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_ddz_DDZGameOperPublicInfoSyn_descriptor,
              new java.lang.String[] { "CardLeft", });
          internal_static_packet_ddz_DDZGameOperActorSyn_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_packet_ddz_DDZGameOperActorSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_ddz_DDZGameOperActorSyn_descriptor,
              new java.lang.String[] { "Position", "TimeLeft", });
          internal_static_packet_ddz_DDZGameOperPlayerActionSyn_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_packet_ddz_DDZGameOperPlayerActionSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_ddz_DDZGameOperPlayerActionSyn_descriptor,
              new java.lang.String[] { "Position", "Action", "CardValue", "RobNum", "Jiabei", "CanOut", "CardType", "CardNum", "CardInDesk", "RangPaiNum", "Seq", });
          internal_static_packet_ddz_DDZGameCardInDesk_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_packet_ddz_DDZGameCardInDesk_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_ddz_DDZGameCardInDesk_descriptor,
              new java.lang.String[] { "Position", "CardValue", });
          internal_static_packet_ddz_DDZGameOperPlayerActionNotify_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_packet_ddz_DDZGameOperPlayerActionNotify_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_ddz_DDZGameOperPlayerActionNotify_descriptor,
              new java.lang.String[] { "Position", "Actions", "RobNum", "Double", "LastActionPosition", "LastActionCardType", "LastPeopleCards", "PromptCards", "CanOut", "OtherCard", "Spring", "Seq", });
          internal_static_packet_ddz_DDZGameOperOver_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_packet_ddz_DDZGameOperOver_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_ddz_DDZGameOperOver_descriptor,
              new java.lang.String[] { "Position", "Cards", });
          internal_static_packet_ddz_DDZGameOperPrompt_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_packet_ddz_DDZGameOperPrompt_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_ddz_DDZGameOperPrompt_descriptor,
              new java.lang.String[] { "Cards", });
          internal_static_packet_ddz_DDZGameOperPlayerHuSyn_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_packet_ddz_DDZGameOperPlayerHuSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_ddz_DDZGameOperPlayerHuSyn_descriptor,
              new java.lang.String[] { "Position", "FriedKing", "Bomb", "Detail", "Spring", "EndPoints", "Innings", "DiPai", });
          internal_static_packet_ddz_DDZGameOperPlayerSettle_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_packet_ddz_DDZGameOperPlayerSettle_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_ddz_DDZGameOperPlayerSettle_descriptor,
              new java.lang.String[] { "Position", "PlayerId", "PlayerName", "Handcard", "IsDouble", "Multiple", "Socre", "AllSocre", "IsDiZhu", "Result", });
          internal_static_packet_ddz_DDZGameOperFinalSettleSyn_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_packet_ddz_DDZGameOperFinalSettleSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_ddz_DDZGameOperFinalSettleSyn_descriptor,
              new java.lang.String[] { "RoomId", "Innings", "Detail", });
          internal_static_packet_ddz_DDZPlayerFinalResult_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_packet_ddz_DDZPlayerFinalResult_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_ddz_DDZPlayerFinalResult_descriptor,
              new java.lang.String[] { "PlayerId", "PlayerName", "Position", "HeadImage", "AllScore", "WinInnings", "RoomOwner", });
          internal_static_packet_ddz_DDZClearCardInDesk_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_packet_ddz_DDZClearCardInDesk_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_ddz_DDZClearCardInDesk_descriptor,
              new java.lang.String[] { });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
