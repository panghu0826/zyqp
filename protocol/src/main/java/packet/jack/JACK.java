// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JACK.proto

package packet.jack;

public final class JACK {
  private JACK() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface JACKGameOperStartSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional sint32 bankerPos = 1;
    /**
     * <code>optional sint32 bankerPos = 1;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    boolean hasBankerPos();
    /**
     * <code>optional sint32 bankerPos = 1;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    int getBankerPos();

    // repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    java.util.List<packet.jack.JACK.JACKGameOperHandCardSyn> 
        getPlayerHandCardsList();
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    packet.jack.JACK.JACKGameOperHandCardSyn getPlayerHandCards(int index);
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    int getPlayerHandCardsCount();
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    java.util.List<? extends packet.jack.JACK.JACKGameOperHandCardSynOrBuilder> 
        getPlayerHandCardsOrBuilderList();
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    packet.jack.JACK.JACKGameOperHandCardSynOrBuilder getPlayerHandCardsOrBuilder(
        int index);

    // optional bool reconnect = 3;
    /**
     * <code>optional bool reconnect = 3;</code>
     *
     * <pre>
     *是否是断线重连 true是断线重连
     * </pre>
     */
    boolean hasReconnect();
    /**
     * <code>optional bool reconnect = 3;</code>
     *
     * <pre>
     *是否是断线重连 true是断线重连
     * </pre>
     */
    boolean getReconnect();

    // optional sint32 juNum = 4;
    /**
     * <code>optional sint32 juNum = 4;</code>
     *
     * <pre>
     *第几把
     * </pre>
     */
    boolean hasJuNum();
    /**
     * <code>optional sint32 juNum = 4;</code>
     *
     * <pre>
     *第几把
     * </pre>
     */
    int getJuNum();

    // optional sint32 seq = 100;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
     * </pre>
     */
    boolean hasSeq();
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
     * </pre>
     */
    int getSeq();
  }
  /**
   * Protobuf type {@code packet.jack.JACKGameOperStartSyn}
   *
   * <pre>
   *游戏开始 operType=GAMESTART
   * </pre>
   */
  public static final class JACKGameOperStartSyn extends
      com.google.protobuf.GeneratedMessage
      implements JACKGameOperStartSynOrBuilder {
    // Use JACKGameOperStartSyn.newBuilder() to construct.
    private JACKGameOperStartSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JACKGameOperStartSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final JACKGameOperStartSyn defaultInstance;
    public static JACKGameOperStartSyn getDefaultInstance() {
      return defaultInstance;
    }

    public JACKGameOperStartSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private JACKGameOperStartSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPos_ = input.readSInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                playerHandCards_ = new java.util.ArrayList<packet.jack.JACK.JACKGameOperHandCardSyn>();
                mutable_bitField0_ |= 0x00000002;
              }
              playerHandCards_.add(input.readMessage(packet.jack.JACK.JACKGameOperHandCardSyn.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              reconnect_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              juNum_ = input.readSInt32();
              break;
            }
            case 800: {
              bitField0_ |= 0x00000008;
              seq_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          playerHandCards_ = java.util.Collections.unmodifiableList(playerHandCards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperStartSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperStartSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.jack.JACK.JACKGameOperStartSyn.class, packet.jack.JACK.JACKGameOperStartSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<JACKGameOperStartSyn> PARSER =
        new com.google.protobuf.AbstractParser<JACKGameOperStartSyn>() {
      public JACKGameOperStartSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JACKGameOperStartSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<JACKGameOperStartSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional sint32 bankerPos = 1;
    public static final int BANKERPOS_FIELD_NUMBER = 1;
    private int bankerPos_;
    /**
     * <code>optional sint32 bankerPos = 1;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    public boolean hasBankerPos() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sint32 bankerPos = 1;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    public int getBankerPos() {
      return bankerPos_;
    }

    // repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;
    public static final int PLAYERHANDCARDS_FIELD_NUMBER = 2;
    private java.util.List<packet.jack.JACK.JACKGameOperHandCardSyn> playerHandCards_;
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public java.util.List<packet.jack.JACK.JACKGameOperHandCardSyn> getPlayerHandCardsList() {
      return playerHandCards_;
    }
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public java.util.List<? extends packet.jack.JACK.JACKGameOperHandCardSynOrBuilder> 
        getPlayerHandCardsOrBuilderList() {
      return playerHandCards_;
    }
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public int getPlayerHandCardsCount() {
      return playerHandCards_.size();
    }
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public packet.jack.JACK.JACKGameOperHandCardSyn getPlayerHandCards(int index) {
      return playerHandCards_.get(index);
    }
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public packet.jack.JACK.JACKGameOperHandCardSynOrBuilder getPlayerHandCardsOrBuilder(
        int index) {
      return playerHandCards_.get(index);
    }

    // optional bool reconnect = 3;
    public static final int RECONNECT_FIELD_NUMBER = 3;
    private boolean reconnect_;
    /**
     * <code>optional bool reconnect = 3;</code>
     *
     * <pre>
     *是否是断线重连 true是断线重连
     * </pre>
     */
    public boolean hasReconnect() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool reconnect = 3;</code>
     *
     * <pre>
     *是否是断线重连 true是断线重连
     * </pre>
     */
    public boolean getReconnect() {
      return reconnect_;
    }

    // optional sint32 juNum = 4;
    public static final int JUNUM_FIELD_NUMBER = 4;
    private int juNum_;
    /**
     * <code>optional sint32 juNum = 4;</code>
     *
     * <pre>
     *第几把
     * </pre>
     */
    public boolean hasJuNum() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 juNum = 4;</code>
     *
     * <pre>
     *第几把
     * </pre>
     */
    public int getJuNum() {
      return juNum_;
    }

    // optional sint32 seq = 100;
    public static final int SEQ_FIELD_NUMBER = 100;
    private int seq_;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
     * </pre>
     */
    public boolean hasSeq() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
     * </pre>
     */
    public int getSeq() {
      return seq_;
    }

    private void initFields() {
      bankerPos_ = 0;
      playerHandCards_ = java.util.Collections.emptyList();
      reconnect_ = false;
      juNum_ = 0;
      seq_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getPlayerHandCardsCount(); i++) {
        if (!getPlayerHandCards(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, bankerPos_);
      }
      for (int i = 0; i < playerHandCards_.size(); i++) {
        output.writeMessage(2, playerHandCards_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(3, reconnect_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(4, juNum_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(100, seq_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, bankerPos_);
      }
      for (int i = 0; i < playerHandCards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, playerHandCards_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, reconnect_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, juNum_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(100, seq_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.jack.JACK.JACKGameOperStartSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperStartSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperStartSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperStartSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperStartSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperStartSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperStartSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperStartSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperStartSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperStartSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.jack.JACK.JACKGameOperStartSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.jack.JACKGameOperStartSyn}
     *
     * <pre>
     *游戏开始 operType=GAMESTART
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.jack.JACK.JACKGameOperStartSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperStartSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperStartSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.jack.JACK.JACKGameOperStartSyn.class, packet.jack.JACK.JACKGameOperStartSyn.Builder.class);
      }

      // Construct using packet.jack.JACK.JACKGameOperStartSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPlayerHandCardsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPos_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (playerHandCardsBuilder_ == null) {
          playerHandCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          playerHandCardsBuilder_.clear();
        }
        reconnect_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        juNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        seq_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperStartSyn_descriptor;
      }

      public packet.jack.JACK.JACKGameOperStartSyn getDefaultInstanceForType() {
        return packet.jack.JACK.JACKGameOperStartSyn.getDefaultInstance();
      }

      public packet.jack.JACK.JACKGameOperStartSyn build() {
        packet.jack.JACK.JACKGameOperStartSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.jack.JACK.JACKGameOperStartSyn buildPartial() {
        packet.jack.JACK.JACKGameOperStartSyn result = new packet.jack.JACK.JACKGameOperStartSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPos_ = bankerPos_;
        if (playerHandCardsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            playerHandCards_ = java.util.Collections.unmodifiableList(playerHandCards_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.playerHandCards_ = playerHandCards_;
        } else {
          result.playerHandCards_ = playerHandCardsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.reconnect_ = reconnect_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.juNum_ = juNum_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.seq_ = seq_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.jack.JACK.JACKGameOperStartSyn) {
          return mergeFrom((packet.jack.JACK.JACKGameOperStartSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.jack.JACK.JACKGameOperStartSyn other) {
        if (other == packet.jack.JACK.JACKGameOperStartSyn.getDefaultInstance()) return this;
        if (other.hasBankerPos()) {
          setBankerPos(other.getBankerPos());
        }
        if (playerHandCardsBuilder_ == null) {
          if (!other.playerHandCards_.isEmpty()) {
            if (playerHandCards_.isEmpty()) {
              playerHandCards_ = other.playerHandCards_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePlayerHandCardsIsMutable();
              playerHandCards_.addAll(other.playerHandCards_);
            }
            onChanged();
          }
        } else {
          if (!other.playerHandCards_.isEmpty()) {
            if (playerHandCardsBuilder_.isEmpty()) {
              playerHandCardsBuilder_.dispose();
              playerHandCardsBuilder_ = null;
              playerHandCards_ = other.playerHandCards_;
              bitField0_ = (bitField0_ & ~0x00000002);
              playerHandCardsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayerHandCardsFieldBuilder() : null;
            } else {
              playerHandCardsBuilder_.addAllMessages(other.playerHandCards_);
            }
          }
        }
        if (other.hasReconnect()) {
          setReconnect(other.getReconnect());
        }
        if (other.hasJuNum()) {
          setJuNum(other.getJuNum());
        }
        if (other.hasSeq()) {
          setSeq(other.getSeq());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getPlayerHandCardsCount(); i++) {
          if (!getPlayerHandCards(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.jack.JACK.JACKGameOperStartSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.jack.JACK.JACKGameOperStartSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional sint32 bankerPos = 1;
      private int bankerPos_ ;
      /**
       * <code>optional sint32 bankerPos = 1;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public boolean hasBankerPos() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sint32 bankerPos = 1;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public int getBankerPos() {
        return bankerPos_;
      }
      /**
       * <code>optional sint32 bankerPos = 1;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public Builder setBankerPos(int value) {
        bitField0_ |= 0x00000001;
        bankerPos_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 bankerPos = 1;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public Builder clearBankerPos() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPos_ = 0;
        onChanged();
        return this;
      }

      // repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;
      private java.util.List<packet.jack.JACK.JACKGameOperHandCardSyn> playerHandCards_ =
        java.util.Collections.emptyList();
      private void ensurePlayerHandCardsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          playerHandCards_ = new java.util.ArrayList<packet.jack.JACK.JACKGameOperHandCardSyn>(playerHandCards_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.jack.JACK.JACKGameOperHandCardSyn, packet.jack.JACK.JACKGameOperHandCardSyn.Builder, packet.jack.JACK.JACKGameOperHandCardSynOrBuilder> playerHandCardsBuilder_;

      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public java.util.List<packet.jack.JACK.JACKGameOperHandCardSyn> getPlayerHandCardsList() {
        if (playerHandCardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(playerHandCards_);
        } else {
          return playerHandCardsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public int getPlayerHandCardsCount() {
        if (playerHandCardsBuilder_ == null) {
          return playerHandCards_.size();
        } else {
          return playerHandCardsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.jack.JACK.JACKGameOperHandCardSyn getPlayerHandCards(int index) {
        if (playerHandCardsBuilder_ == null) {
          return playerHandCards_.get(index);
        } else {
          return playerHandCardsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder setPlayerHandCards(
          int index, packet.jack.JACK.JACKGameOperHandCardSyn value) {
        if (playerHandCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.set(index, value);
          onChanged();
        } else {
          playerHandCardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder setPlayerHandCards(
          int index, packet.jack.JACK.JACKGameOperHandCardSyn.Builder builderForValue) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.set(index, builderForValue.build());
          onChanged();
        } else {
          playerHandCardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(packet.jack.JACK.JACKGameOperHandCardSyn value) {
        if (playerHandCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(value);
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(
          int index, packet.jack.JACK.JACKGameOperHandCardSyn value) {
        if (playerHandCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(index, value);
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(
          packet.jack.JACK.JACKGameOperHandCardSyn.Builder builderForValue) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(builderForValue.build());
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(
          int index, packet.jack.JACK.JACKGameOperHandCardSyn.Builder builderForValue) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(index, builderForValue.build());
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addAllPlayerHandCards(
          java.lang.Iterable<? extends packet.jack.JACK.JACKGameOperHandCardSyn> values) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          super.addAll(values, playerHandCards_);
          onChanged();
        } else {
          playerHandCardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder clearPlayerHandCards() {
        if (playerHandCardsBuilder_ == null) {
          playerHandCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          playerHandCardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder removePlayerHandCards(int index) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.remove(index);
          onChanged();
        } else {
          playerHandCardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.jack.JACK.JACKGameOperHandCardSyn.Builder getPlayerHandCardsBuilder(
          int index) {
        return getPlayerHandCardsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.jack.JACK.JACKGameOperHandCardSynOrBuilder getPlayerHandCardsOrBuilder(
          int index) {
        if (playerHandCardsBuilder_ == null) {
          return playerHandCards_.get(index);  } else {
          return playerHandCardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public java.util.List<? extends packet.jack.JACK.JACKGameOperHandCardSynOrBuilder> 
           getPlayerHandCardsOrBuilderList() {
        if (playerHandCardsBuilder_ != null) {
          return playerHandCardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(playerHandCards_);
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.jack.JACK.JACKGameOperHandCardSyn.Builder addPlayerHandCardsBuilder() {
        return getPlayerHandCardsFieldBuilder().addBuilder(
            packet.jack.JACK.JACKGameOperHandCardSyn.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.jack.JACK.JACKGameOperHandCardSyn.Builder addPlayerHandCardsBuilder(
          int index) {
        return getPlayerHandCardsFieldBuilder().addBuilder(
            index, packet.jack.JACK.JACKGameOperHandCardSyn.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 2;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public java.util.List<packet.jack.JACK.JACKGameOperHandCardSyn.Builder> 
           getPlayerHandCardsBuilderList() {
        return getPlayerHandCardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.jack.JACK.JACKGameOperHandCardSyn, packet.jack.JACK.JACKGameOperHandCardSyn.Builder, packet.jack.JACK.JACKGameOperHandCardSynOrBuilder> 
          getPlayerHandCardsFieldBuilder() {
        if (playerHandCardsBuilder_ == null) {
          playerHandCardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.jack.JACK.JACKGameOperHandCardSyn, packet.jack.JACK.JACKGameOperHandCardSyn.Builder, packet.jack.JACK.JACKGameOperHandCardSynOrBuilder>(
                  playerHandCards_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          playerHandCards_ = null;
        }
        return playerHandCardsBuilder_;
      }

      // optional bool reconnect = 3;
      private boolean reconnect_ ;
      /**
       * <code>optional bool reconnect = 3;</code>
       *
       * <pre>
       *是否是断线重连 true是断线重连
       * </pre>
       */
      public boolean hasReconnect() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool reconnect = 3;</code>
       *
       * <pre>
       *是否是断线重连 true是断线重连
       * </pre>
       */
      public boolean getReconnect() {
        return reconnect_;
      }
      /**
       * <code>optional bool reconnect = 3;</code>
       *
       * <pre>
       *是否是断线重连 true是断线重连
       * </pre>
       */
      public Builder setReconnect(boolean value) {
        bitField0_ |= 0x00000004;
        reconnect_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool reconnect = 3;</code>
       *
       * <pre>
       *是否是断线重连 true是断线重连
       * </pre>
       */
      public Builder clearReconnect() {
        bitField0_ = (bitField0_ & ~0x00000004);
        reconnect_ = false;
        onChanged();
        return this;
      }

      // optional sint32 juNum = 4;
      private int juNum_ ;
      /**
       * <code>optional sint32 juNum = 4;</code>
       *
       * <pre>
       *第几把
       * </pre>
       */
      public boolean hasJuNum() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 juNum = 4;</code>
       *
       * <pre>
       *第几把
       * </pre>
       */
      public int getJuNum() {
        return juNum_;
      }
      /**
       * <code>optional sint32 juNum = 4;</code>
       *
       * <pre>
       *第几把
       * </pre>
       */
      public Builder setJuNum(int value) {
        bitField0_ |= 0x00000008;
        juNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 juNum = 4;</code>
       *
       * <pre>
       *第几把
       * </pre>
       */
      public Builder clearJuNum() {
        bitField0_ = (bitField0_ & ~0x00000008);
        juNum_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 seq = 100;
      private int seq_ ;
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
       * </pre>
       */
      public boolean hasSeq() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
       * </pre>
       */
      public int getSeq() {
        return seq_;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
       * </pre>
       */
      public Builder setSeq(int value) {
        bitField0_ |= 0x00000010;
        seq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,每一场游戏有一个唯一的序列号，方便错误跟踪
       * </pre>
       */
      public Builder clearSeq() {
        bitField0_ = (bitField0_ & ~0x00000010);
        seq_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.jack.JACKGameOperStartSyn)
    }

    static {
      defaultInstance = new JACKGameOperStartSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.jack.JACKGameOperStartSyn)
  }

  public interface JACKGameOperHandCardSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // repeated sint32 handCards = 2;
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardsList();
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    int getHandCardsCount();
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    int getHandCards(int index);

    // optional sint32 socre = 3;
    /**
     * <code>optional sint32 socre = 3;</code>
     *
     * <pre>
     *玩家自己的分数
     * </pre>
     */
    boolean hasSocre();
    /**
     * <code>optional sint32 socre = 3;</code>
     *
     * <pre>
     *玩家自己的分数
     * </pre>
     */
    int getSocre();

    // optional sint32 xiaZhu = 4;
    /**
     * <code>optional sint32 xiaZhu = 4;</code>
     *
     * <pre>
     *筹码
     * </pre>
     */
    boolean hasXiaZhu();
    /**
     * <code>optional sint32 xiaZhu = 4;</code>
     *
     * <pre>
     *筹码
     * </pre>
     */
    int getXiaZhu();

    // optional bool isZanLi = 5;
    /**
     * <code>optional bool isZanLi = 5;</code>
     *
     * <pre>
     *是否暂离
     * </pre>
     */
    boolean hasIsZanLi();
    /**
     * <code>optional bool isZanLi = 5;</code>
     *
     * <pre>
     *是否暂离
     * </pre>
     */
    boolean getIsZanLi();

    // optional bool isWait = 6;
    /**
     * <code>optional bool isWait = 6;</code>
     *
     * <pre>
     *是否等待下一把
     * </pre>
     */
    boolean hasIsWait();
    /**
     * <code>optional bool isWait = 6;</code>
     *
     * <pre>
     *是否等待下一把
     * </pre>
     */
    boolean getIsWait();

    // optional sint32 cardNum = 7;
    /**
     * <code>optional sint32 cardNum = 7;</code>
     *
     * <pre>
     *玩家1-21点时牌值
     * </pre>
     */
    boolean hasCardNum();
    /**
     * <code>optional sint32 cardNum = 7;</code>
     *
     * <pre>
     *玩家1-21点时牌值
     * </pre>
     */
    int getCardNum();

    // optional sint32 cardType = 8;
    /**
     * <code>optional sint32 cardType = 8;</code>
     *
     * <pre>
     *玩家牌的类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional sint32 cardType = 8;</code>
     *
     * <pre>
     *玩家牌的类型
     * </pre>
     */
    int getCardType();
  }
  /**
   * Protobuf type {@code packet.jack.JACKGameOperHandCardSyn}
   *
   * <pre>
   *同步某个的玩家手牌, operType=HANDCARDS
   * </pre>
   */
  public static final class JACKGameOperHandCardSyn extends
      com.google.protobuf.GeneratedMessage
      implements JACKGameOperHandCardSynOrBuilder {
    // Use JACKGameOperHandCardSyn.newBuilder() to construct.
    private JACKGameOperHandCardSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JACKGameOperHandCardSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final JACKGameOperHandCardSyn defaultInstance;
    public static JACKGameOperHandCardSyn getDefaultInstance() {
      return defaultInstance;
    }

    public JACKGameOperHandCardSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private JACKGameOperHandCardSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                handCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              handCards_.add(input.readSInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                handCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCards_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              socre_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              xiaZhu_ = input.readSInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              isZanLi_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              isWait_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              cardNum_ = input.readSInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              cardType_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          handCards_ = java.util.Collections.unmodifiableList(handCards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperHandCardSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperHandCardSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.jack.JACK.JACKGameOperHandCardSyn.class, packet.jack.JACK.JACKGameOperHandCardSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<JACKGameOperHandCardSyn> PARSER =
        new com.google.protobuf.AbstractParser<JACKGameOperHandCardSyn>() {
      public JACKGameOperHandCardSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JACKGameOperHandCardSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<JACKGameOperHandCardSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // repeated sint32 handCards = 2;
    public static final int HANDCARDS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> handCards_;
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardsList() {
      return handCards_;
    }
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    public int getHandCardsCount() {
      return handCards_.size();
    }
    /**
     * <code>repeated sint32 handCards = 2;</code>
     *
     * <pre>
     *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
     * </pre>
     */
    public int getHandCards(int index) {
      return handCards_.get(index);
    }

    // optional sint32 socre = 3;
    public static final int SOCRE_FIELD_NUMBER = 3;
    private int socre_;
    /**
     * <code>optional sint32 socre = 3;</code>
     *
     * <pre>
     *玩家自己的分数
     * </pre>
     */
    public boolean hasSocre() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 socre = 3;</code>
     *
     * <pre>
     *玩家自己的分数
     * </pre>
     */
    public int getSocre() {
      return socre_;
    }

    // optional sint32 xiaZhu = 4;
    public static final int XIAZHU_FIELD_NUMBER = 4;
    private int xiaZhu_;
    /**
     * <code>optional sint32 xiaZhu = 4;</code>
     *
     * <pre>
     *筹码
     * </pre>
     */
    public boolean hasXiaZhu() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 xiaZhu = 4;</code>
     *
     * <pre>
     *筹码
     * </pre>
     */
    public int getXiaZhu() {
      return xiaZhu_;
    }

    // optional bool isZanLi = 5;
    public static final int ISZANLI_FIELD_NUMBER = 5;
    private boolean isZanLi_;
    /**
     * <code>optional bool isZanLi = 5;</code>
     *
     * <pre>
     *是否暂离
     * </pre>
     */
    public boolean hasIsZanLi() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool isZanLi = 5;</code>
     *
     * <pre>
     *是否暂离
     * </pre>
     */
    public boolean getIsZanLi() {
      return isZanLi_;
    }

    // optional bool isWait = 6;
    public static final int ISWAIT_FIELD_NUMBER = 6;
    private boolean isWait_;
    /**
     * <code>optional bool isWait = 6;</code>
     *
     * <pre>
     *是否等待下一把
     * </pre>
     */
    public boolean hasIsWait() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool isWait = 6;</code>
     *
     * <pre>
     *是否等待下一把
     * </pre>
     */
    public boolean getIsWait() {
      return isWait_;
    }

    // optional sint32 cardNum = 7;
    public static final int CARDNUM_FIELD_NUMBER = 7;
    private int cardNum_;
    /**
     * <code>optional sint32 cardNum = 7;</code>
     *
     * <pre>
     *玩家1-21点时牌值
     * </pre>
     */
    public boolean hasCardNum() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 cardNum = 7;</code>
     *
     * <pre>
     *玩家1-21点时牌值
     * </pre>
     */
    public int getCardNum() {
      return cardNum_;
    }

    // optional sint32 cardType = 8;
    public static final int CARDTYPE_FIELD_NUMBER = 8;
    private int cardType_;
    /**
     * <code>optional sint32 cardType = 8;</code>
     *
     * <pre>
     *玩家牌的类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 cardType = 8;</code>
     *
     * <pre>
     *玩家牌的类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    private void initFields() {
      position_ = 0;
      handCards_ = java.util.Collections.emptyList();
      socre_ = 0;
      xiaZhu_ = 0;
      isZanLi_ = false;
      isWait_ = false;
      cardNum_ = 0;
      cardType_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      for (int i = 0; i < handCards_.size(); i++) {
        output.writeSInt32(2, handCards_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(3, socre_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(4, xiaZhu_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(5, isZanLi_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(6, isWait_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(7, cardNum_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(8, cardType_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(handCards_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardsList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, socre_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, xiaZhu_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isZanLi_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, isWait_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, cardNum_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(8, cardType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.jack.JACK.JACKGameOperHandCardSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperHandCardSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperHandCardSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperHandCardSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperHandCardSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperHandCardSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperHandCardSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperHandCardSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperHandCardSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperHandCardSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.jack.JACK.JACKGameOperHandCardSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.jack.JACKGameOperHandCardSyn}
     *
     * <pre>
     *同步某个的玩家手牌, operType=HANDCARDS
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.jack.JACK.JACKGameOperHandCardSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperHandCardSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperHandCardSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.jack.JACK.JACKGameOperHandCardSyn.class, packet.jack.JACK.JACKGameOperHandCardSyn.Builder.class);
      }

      // Construct using packet.jack.JACK.JACKGameOperHandCardSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        handCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        socre_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        xiaZhu_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        isZanLi_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        isWait_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        cardNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperHandCardSyn_descriptor;
      }

      public packet.jack.JACK.JACKGameOperHandCardSyn getDefaultInstanceForType() {
        return packet.jack.JACK.JACKGameOperHandCardSyn.getDefaultInstance();
      }

      public packet.jack.JACK.JACKGameOperHandCardSyn build() {
        packet.jack.JACK.JACKGameOperHandCardSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.jack.JACK.JACKGameOperHandCardSyn buildPartial() {
        packet.jack.JACK.JACKGameOperHandCardSyn result = new packet.jack.JACK.JACKGameOperHandCardSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          handCards_ = java.util.Collections.unmodifiableList(handCards_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.handCards_ = handCards_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.socre_ = socre_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.xiaZhu_ = xiaZhu_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.isZanLi_ = isZanLi_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.isWait_ = isWait_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.cardNum_ = cardNum_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.cardType_ = cardType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.jack.JACK.JACKGameOperHandCardSyn) {
          return mergeFrom((packet.jack.JACK.JACKGameOperHandCardSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.jack.JACK.JACKGameOperHandCardSyn other) {
        if (other == packet.jack.JACK.JACKGameOperHandCardSyn.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (!other.handCards_.isEmpty()) {
          if (handCards_.isEmpty()) {
            handCards_ = other.handCards_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureHandCardsIsMutable();
            handCards_.addAll(other.handCards_);
          }
          onChanged();
        }
        if (other.hasSocre()) {
          setSocre(other.getSocre());
        }
        if (other.hasXiaZhu()) {
          setXiaZhu(other.getXiaZhu());
        }
        if (other.hasIsZanLi()) {
          setIsZanLi(other.getIsZanLi());
        }
        if (other.hasIsWait()) {
          setIsWait(other.getIsWait());
        }
        if (other.hasCardNum()) {
          setCardNum(other.getCardNum());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.jack.JACK.JACKGameOperHandCardSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.jack.JACK.JACKGameOperHandCardSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // repeated sint32 handCards = 2;
      private java.util.List<java.lang.Integer> handCards_ = java.util.Collections.emptyList();
      private void ensureHandCardsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          handCards_ = new java.util.ArrayList<java.lang.Integer>(handCards_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardsList() {
        return java.util.Collections.unmodifiableList(handCards_);
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public int getHandCardsCount() {
        return handCards_.size();
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public int getHandCards(int index) {
        return handCards_.get(index);
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public Builder setHandCards(
          int index, int value) {
        ensureHandCardsIsMutable();
        handCards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public Builder addHandCards(int value) {
        ensureHandCardsIsMutable();
        handCards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public Builder addAllHandCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardsIsMutable();
        super.addAll(values, handCards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handCards = 2;</code>
       *
       * <pre>
       *手中的牌,如果是其他玩家(即不是当前玩家),则列表里面存放的是-1而不是牌的真实值
       * </pre>
       */
      public Builder clearHandCards() {
        handCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional sint32 socre = 3;
      private int socre_ ;
      /**
       * <code>optional sint32 socre = 3;</code>
       *
       * <pre>
       *玩家自己的分数
       * </pre>
       */
      public boolean hasSocre() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 socre = 3;</code>
       *
       * <pre>
       *玩家自己的分数
       * </pre>
       */
      public int getSocre() {
        return socre_;
      }
      /**
       * <code>optional sint32 socre = 3;</code>
       *
       * <pre>
       *玩家自己的分数
       * </pre>
       */
      public Builder setSocre(int value) {
        bitField0_ |= 0x00000004;
        socre_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 socre = 3;</code>
       *
       * <pre>
       *玩家自己的分数
       * </pre>
       */
      public Builder clearSocre() {
        bitField0_ = (bitField0_ & ~0x00000004);
        socre_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 xiaZhu = 4;
      private int xiaZhu_ ;
      /**
       * <code>optional sint32 xiaZhu = 4;</code>
       *
       * <pre>
       *筹码
       * </pre>
       */
      public boolean hasXiaZhu() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 xiaZhu = 4;</code>
       *
       * <pre>
       *筹码
       * </pre>
       */
      public int getXiaZhu() {
        return xiaZhu_;
      }
      /**
       * <code>optional sint32 xiaZhu = 4;</code>
       *
       * <pre>
       *筹码
       * </pre>
       */
      public Builder setXiaZhu(int value) {
        bitField0_ |= 0x00000008;
        xiaZhu_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 xiaZhu = 4;</code>
       *
       * <pre>
       *筹码
       * </pre>
       */
      public Builder clearXiaZhu() {
        bitField0_ = (bitField0_ & ~0x00000008);
        xiaZhu_ = 0;
        onChanged();
        return this;
      }

      // optional bool isZanLi = 5;
      private boolean isZanLi_ ;
      /**
       * <code>optional bool isZanLi = 5;</code>
       *
       * <pre>
       *是否暂离
       * </pre>
       */
      public boolean hasIsZanLi() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool isZanLi = 5;</code>
       *
       * <pre>
       *是否暂离
       * </pre>
       */
      public boolean getIsZanLi() {
        return isZanLi_;
      }
      /**
       * <code>optional bool isZanLi = 5;</code>
       *
       * <pre>
       *是否暂离
       * </pre>
       */
      public Builder setIsZanLi(boolean value) {
        bitField0_ |= 0x00000010;
        isZanLi_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool isZanLi = 5;</code>
       *
       * <pre>
       *是否暂离
       * </pre>
       */
      public Builder clearIsZanLi() {
        bitField0_ = (bitField0_ & ~0x00000010);
        isZanLi_ = false;
        onChanged();
        return this;
      }

      // optional bool isWait = 6;
      private boolean isWait_ ;
      /**
       * <code>optional bool isWait = 6;</code>
       *
       * <pre>
       *是否等待下一把
       * </pre>
       */
      public boolean hasIsWait() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool isWait = 6;</code>
       *
       * <pre>
       *是否等待下一把
       * </pre>
       */
      public boolean getIsWait() {
        return isWait_;
      }
      /**
       * <code>optional bool isWait = 6;</code>
       *
       * <pre>
       *是否等待下一把
       * </pre>
       */
      public Builder setIsWait(boolean value) {
        bitField0_ |= 0x00000020;
        isWait_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool isWait = 6;</code>
       *
       * <pre>
       *是否等待下一把
       * </pre>
       */
      public Builder clearIsWait() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isWait_ = false;
        onChanged();
        return this;
      }

      // optional sint32 cardNum = 7;
      private int cardNum_ ;
      /**
       * <code>optional sint32 cardNum = 7;</code>
       *
       * <pre>
       *玩家1-21点时牌值
       * </pre>
       */
      public boolean hasCardNum() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional sint32 cardNum = 7;</code>
       *
       * <pre>
       *玩家1-21点时牌值
       * </pre>
       */
      public int getCardNum() {
        return cardNum_;
      }
      /**
       * <code>optional sint32 cardNum = 7;</code>
       *
       * <pre>
       *玩家1-21点时牌值
       * </pre>
       */
      public Builder setCardNum(int value) {
        bitField0_ |= 0x00000040;
        cardNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 cardNum = 7;</code>
       *
       * <pre>
       *玩家1-21点时牌值
       * </pre>
       */
      public Builder clearCardNum() {
        bitField0_ = (bitField0_ & ~0x00000040);
        cardNum_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 cardType = 8;
      private int cardType_ ;
      /**
       * <code>optional sint32 cardType = 8;</code>
       *
       * <pre>
       *玩家牌的类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional sint32 cardType = 8;</code>
       *
       * <pre>
       *玩家牌的类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional sint32 cardType = 8;</code>
       *
       * <pre>
       *玩家牌的类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000080;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 cardType = 8;</code>
       *
       * <pre>
       *玩家牌的类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000080);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.jack.JACKGameOperHandCardSyn)
    }

    static {
      defaultInstance = new JACKGameOperHandCardSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.jack.JACKGameOperHandCardSyn)
  }

  public interface JACKGameOperPublicInfoSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional sint32 deskState = 1;
    /**
     * <code>optional sint32 deskState = 1;</code>
     *
     * <pre>
     *桌子状态
     * </pre>
     */
    boolean hasDeskState();
    /**
     * <code>optional sint32 deskState = 1;</code>
     *
     * <pre>
     *桌子状态
     * </pre>
     */
    int getDeskState();

    // repeated .packet.jack.JACKGameDeskData data = 2;
    /**
     * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
     */
    java.util.List<packet.jack.JACK.JACKGameDeskData> 
        getDataList();
    /**
     * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
     */
    packet.jack.JACK.JACKGameDeskData getData(int index);
    /**
     * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
     */
    int getDataCount();
    /**
     * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
     */
    java.util.List<? extends packet.jack.JACK.JACKGameDeskDataOrBuilder> 
        getDataOrBuilderList();
    /**
     * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
     */
    packet.jack.JACK.JACKGameDeskDataOrBuilder getDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code packet.jack.JACKGameOperPublicInfoSyn}
   */
  public static final class JACKGameOperPublicInfoSyn extends
      com.google.protobuf.GeneratedMessage
      implements JACKGameOperPublicInfoSynOrBuilder {
    // Use JACKGameOperPublicInfoSyn.newBuilder() to construct.
    private JACKGameOperPublicInfoSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JACKGameOperPublicInfoSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final JACKGameOperPublicInfoSyn defaultInstance;
    public static JACKGameOperPublicInfoSyn getDefaultInstance() {
      return defaultInstance;
    }

    public JACKGameOperPublicInfoSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private JACKGameOperPublicInfoSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              deskState_ = input.readSInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                data_ = new java.util.ArrayList<packet.jack.JACK.JACKGameDeskData>();
                mutable_bitField0_ |= 0x00000002;
              }
              data_.add(input.readMessage(packet.jack.JACK.JACKGameDeskData.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          data_ = java.util.Collections.unmodifiableList(data_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPublicInfoSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPublicInfoSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.jack.JACK.JACKGameOperPublicInfoSyn.class, packet.jack.JACK.JACKGameOperPublicInfoSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<JACKGameOperPublicInfoSyn> PARSER =
        new com.google.protobuf.AbstractParser<JACKGameOperPublicInfoSyn>() {
      public JACKGameOperPublicInfoSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JACKGameOperPublicInfoSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<JACKGameOperPublicInfoSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional sint32 deskState = 1;
    public static final int DESKSTATE_FIELD_NUMBER = 1;
    private int deskState_;
    /**
     * <code>optional sint32 deskState = 1;</code>
     *
     * <pre>
     *桌子状态
     * </pre>
     */
    public boolean hasDeskState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sint32 deskState = 1;</code>
     *
     * <pre>
     *桌子状态
     * </pre>
     */
    public int getDeskState() {
      return deskState_;
    }

    // repeated .packet.jack.JACKGameDeskData data = 2;
    public static final int DATA_FIELD_NUMBER = 2;
    private java.util.List<packet.jack.JACK.JACKGameDeskData> data_;
    /**
     * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
     */
    public java.util.List<packet.jack.JACK.JACKGameDeskData> getDataList() {
      return data_;
    }
    /**
     * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
     */
    public java.util.List<? extends packet.jack.JACK.JACKGameDeskDataOrBuilder> 
        getDataOrBuilderList() {
      return data_;
    }
    /**
     * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
     */
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
     */
    public packet.jack.JACK.JACKGameDeskData getData(int index) {
      return data_.get(index);
    }
    /**
     * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
     */
    public packet.jack.JACK.JACKGameDeskDataOrBuilder getDataOrBuilder(
        int index) {
      return data_.get(index);
    }

    private void initFields() {
      deskState_ = 0;
      data_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getDataCount(); i++) {
        if (!getData(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, deskState_);
      }
      for (int i = 0; i < data_.size(); i++) {
        output.writeMessage(2, data_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, deskState_);
      }
      for (int i = 0; i < data_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, data_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.jack.JACK.JACKGameOperPublicInfoSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperPublicInfoSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPublicInfoSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperPublicInfoSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPublicInfoSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPublicInfoSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPublicInfoSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPublicInfoSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPublicInfoSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPublicInfoSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.jack.JACK.JACKGameOperPublicInfoSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.jack.JACKGameOperPublicInfoSyn}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.jack.JACK.JACKGameOperPublicInfoSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPublicInfoSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPublicInfoSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.jack.JACK.JACKGameOperPublicInfoSyn.class, packet.jack.JACK.JACKGameOperPublicInfoSyn.Builder.class);
      }

      // Construct using packet.jack.JACK.JACKGameOperPublicInfoSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        deskState_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          dataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPublicInfoSyn_descriptor;
      }

      public packet.jack.JACK.JACKGameOperPublicInfoSyn getDefaultInstanceForType() {
        return packet.jack.JACK.JACKGameOperPublicInfoSyn.getDefaultInstance();
      }

      public packet.jack.JACK.JACKGameOperPublicInfoSyn build() {
        packet.jack.JACK.JACKGameOperPublicInfoSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.jack.JACK.JACKGameOperPublicInfoSyn buildPartial() {
        packet.jack.JACK.JACKGameOperPublicInfoSyn result = new packet.jack.JACK.JACKGameOperPublicInfoSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.deskState_ = deskState_;
        if (dataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            data_ = java.util.Collections.unmodifiableList(data_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.data_ = data_;
        } else {
          result.data_ = dataBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.jack.JACK.JACKGameOperPublicInfoSyn) {
          return mergeFrom((packet.jack.JACK.JACKGameOperPublicInfoSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.jack.JACK.JACKGameOperPublicInfoSyn other) {
        if (other == packet.jack.JACK.JACKGameOperPublicInfoSyn.getDefaultInstance()) return this;
        if (other.hasDeskState()) {
          setDeskState(other.getDeskState());
        }
        if (dataBuilder_ == null) {
          if (!other.data_.isEmpty()) {
            if (data_.isEmpty()) {
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureDataIsMutable();
              data_.addAll(other.data_);
            }
            onChanged();
          }
        } else {
          if (!other.data_.isEmpty()) {
            if (dataBuilder_.isEmpty()) {
              dataBuilder_.dispose();
              dataBuilder_ = null;
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000002);
              dataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDataFieldBuilder() : null;
            } else {
              dataBuilder_.addAllMessages(other.data_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getDataCount(); i++) {
          if (!getData(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.jack.JACK.JACKGameOperPublicInfoSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.jack.JACK.JACKGameOperPublicInfoSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional sint32 deskState = 1;
      private int deskState_ ;
      /**
       * <code>optional sint32 deskState = 1;</code>
       *
       * <pre>
       *桌子状态
       * </pre>
       */
      public boolean hasDeskState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sint32 deskState = 1;</code>
       *
       * <pre>
       *桌子状态
       * </pre>
       */
      public int getDeskState() {
        return deskState_;
      }
      /**
       * <code>optional sint32 deskState = 1;</code>
       *
       * <pre>
       *桌子状态
       * </pre>
       */
      public Builder setDeskState(int value) {
        bitField0_ |= 0x00000001;
        deskState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 deskState = 1;</code>
       *
       * <pre>
       *桌子状态
       * </pre>
       */
      public Builder clearDeskState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        deskState_ = 0;
        onChanged();
        return this;
      }

      // repeated .packet.jack.JACKGameDeskData data = 2;
      private java.util.List<packet.jack.JACK.JACKGameDeskData> data_ =
        java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          data_ = new java.util.ArrayList<packet.jack.JACK.JACKGameDeskData>(data_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.jack.JACK.JACKGameDeskData, packet.jack.JACK.JACKGameDeskData.Builder, packet.jack.JACK.JACKGameDeskDataOrBuilder> dataBuilder_;

      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public java.util.List<packet.jack.JACK.JACKGameDeskData> getDataList() {
        if (dataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(data_);
        } else {
          return dataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public int getDataCount() {
        if (dataBuilder_ == null) {
          return data_.size();
        } else {
          return dataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public packet.jack.JACK.JACKGameDeskData getData(int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);
        } else {
          return dataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public Builder setData(
          int index, packet.jack.JACK.JACKGameDeskData value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.set(index, value);
          onChanged();
        } else {
          dataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public Builder setData(
          int index, packet.jack.JACK.JACKGameDeskData.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public Builder addData(packet.jack.JACK.JACKGameDeskData value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(value);
          onChanged();
        } else {
          dataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public Builder addData(
          int index, packet.jack.JACK.JACKGameDeskData value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(index, value);
          onChanged();
        } else {
          dataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public Builder addData(
          packet.jack.JACK.JACKGameDeskData.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public Builder addData(
          int index, packet.jack.JACK.JACKGameDeskData.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends packet.jack.JACK.JACKGameDeskData> values) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          super.addAll(values, data_);
          onChanged();
        } else {
          dataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public Builder clearData() {
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          dataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public Builder removeData(int index) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.remove(index);
          onChanged();
        } else {
          dataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public packet.jack.JACK.JACKGameDeskData.Builder getDataBuilder(
          int index) {
        return getDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public packet.jack.JACK.JACKGameDeskDataOrBuilder getDataOrBuilder(
          int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);  } else {
          return dataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public java.util.List<? extends packet.jack.JACK.JACKGameDeskDataOrBuilder> 
           getDataOrBuilderList() {
        if (dataBuilder_ != null) {
          return dataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(data_);
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public packet.jack.JACK.JACKGameDeskData.Builder addDataBuilder() {
        return getDataFieldBuilder().addBuilder(
            packet.jack.JACK.JACKGameDeskData.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public packet.jack.JACK.JACKGameDeskData.Builder addDataBuilder(
          int index) {
        return getDataFieldBuilder().addBuilder(
            index, packet.jack.JACK.JACKGameDeskData.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.jack.JACKGameDeskData data = 2;</code>
       */
      public java.util.List<packet.jack.JACK.JACKGameDeskData.Builder> 
           getDataBuilderList() {
        return getDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.jack.JACK.JACKGameDeskData, packet.jack.JACK.JACKGameDeskData.Builder, packet.jack.JACK.JACKGameDeskDataOrBuilder> 
          getDataFieldBuilder() {
        if (dataBuilder_ == null) {
          dataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.jack.JACK.JACKGameDeskData, packet.jack.JACK.JACKGameDeskData.Builder, packet.jack.JACK.JACKGameDeskDataOrBuilder>(
                  data_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        return dataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:packet.jack.JACKGameOperPublicInfoSyn)
    }

    static {
      defaultInstance = new JACKGameOperPublicInfoSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.jack.JACKGameOperPublicInfoSyn)
  }

  public interface JACKGameOperActorSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // required sint32 timeLeft = 2;
    /**
     * <code>required sint32 timeLeft = 2;</code>
     *
     * <pre>
     *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
     * </pre>
     */
    boolean hasTimeLeft();
    /**
     * <code>required sint32 timeLeft = 2;</code>
     *
     * <pre>
     *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
     * </pre>
     */
    int getTimeLeft();
  }
  /**
   * Protobuf type {@code packet.jack.JACKGameOperActorSyn}
   *
   * <pre>
   *同步行动者信息 operType=ACTSYN
   * </pre>
   */
  public static final class JACKGameOperActorSyn extends
      com.google.protobuf.GeneratedMessage
      implements JACKGameOperActorSynOrBuilder {
    // Use JACKGameOperActorSyn.newBuilder() to construct.
    private JACKGameOperActorSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JACKGameOperActorSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final JACKGameOperActorSyn defaultInstance;
    public static JACKGameOperActorSyn getDefaultInstance() {
      return defaultInstance;
    }

    public JACKGameOperActorSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private JACKGameOperActorSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              timeLeft_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperActorSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperActorSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.jack.JACK.JACKGameOperActorSyn.class, packet.jack.JACK.JACKGameOperActorSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<JACKGameOperActorSyn> PARSER =
        new com.google.protobuf.AbstractParser<JACKGameOperActorSyn>() {
      public JACKGameOperActorSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JACKGameOperActorSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<JACKGameOperActorSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // required sint32 timeLeft = 2;
    public static final int TIMELEFT_FIELD_NUMBER = 2;
    private int timeLeft_;
    /**
     * <code>required sint32 timeLeft = 2;</code>
     *
     * <pre>
     *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
     * </pre>
     */
    public boolean hasTimeLeft() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 timeLeft = 2;</code>
     *
     * <pre>
     *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
     * </pre>
     */
    public int getTimeLeft() {
      return timeLeft_;
    }

    private void initFields() {
      position_ = 0;
      timeLeft_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTimeLeft()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, timeLeft_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, timeLeft_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.jack.JACK.JACKGameOperActorSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperActorSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperActorSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperActorSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperActorSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperActorSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperActorSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperActorSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperActorSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperActorSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.jack.JACK.JACKGameOperActorSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.jack.JACKGameOperActorSyn}
     *
     * <pre>
     *同步行动者信息 operType=ACTSYN
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.jack.JACK.JACKGameOperActorSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperActorSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperActorSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.jack.JACK.JACKGameOperActorSyn.class, packet.jack.JACK.JACKGameOperActorSyn.Builder.class);
      }

      // Construct using packet.jack.JACK.JACKGameOperActorSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        timeLeft_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperActorSyn_descriptor;
      }

      public packet.jack.JACK.JACKGameOperActorSyn getDefaultInstanceForType() {
        return packet.jack.JACK.JACKGameOperActorSyn.getDefaultInstance();
      }

      public packet.jack.JACK.JACKGameOperActorSyn build() {
        packet.jack.JACK.JACKGameOperActorSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.jack.JACK.JACKGameOperActorSyn buildPartial() {
        packet.jack.JACK.JACKGameOperActorSyn result = new packet.jack.JACK.JACKGameOperActorSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.timeLeft_ = timeLeft_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.jack.JACK.JACKGameOperActorSyn) {
          return mergeFrom((packet.jack.JACK.JACKGameOperActorSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.jack.JACK.JACKGameOperActorSyn other) {
        if (other == packet.jack.JACK.JACKGameOperActorSyn.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasTimeLeft()) {
          setTimeLeft(other.getTimeLeft());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasTimeLeft()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.jack.JACK.JACKGameOperActorSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.jack.JACK.JACKGameOperActorSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // required sint32 timeLeft = 2;
      private int timeLeft_ ;
      /**
       * <code>required sint32 timeLeft = 2;</code>
       *
       * <pre>
       *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
       * </pre>
       */
      public boolean hasTimeLeft() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 timeLeft = 2;</code>
       *
       * <pre>
       *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
       * </pre>
       */
      public int getTimeLeft() {
        return timeLeft_;
      }
      /**
       * <code>required sint32 timeLeft = 2;</code>
       *
       * <pre>
       *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
       * </pre>
       */
      public Builder setTimeLeft(int value) {
        bitField0_ |= 0x00000002;
        timeLeft_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 timeLeft = 2;</code>
       *
       * <pre>
       *操作超时时间，比如：10，代表10秒内玩家不操作服务器将托管
       * </pre>
       */
      public Builder clearTimeLeft() {
        bitField0_ = (bitField0_ & ~0x00000002);
        timeLeft_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.jack.JACKGameOperActorSyn)
    }

    static {
      defaultInstance = new JACKGameOperActorSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.jack.JACKGameOperActorSyn)
  }

  public interface JACKGameDeskDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // required bool isXiaZhu = 2;
    /**
     * <code>required bool isXiaZhu = 2;</code>
     *
     * <pre>
     *是否下注
     * </pre>
     */
    boolean hasIsXiaZhu();
    /**
     * <code>required bool isXiaZhu = 2;</code>
     *
     * <pre>
     *是否下注
     * </pre>
     */
    boolean getIsXiaZhu();
  }
  /**
   * Protobuf type {@code packet.jack.JACKGameDeskData}
   */
  public static final class JACKGameDeskData extends
      com.google.protobuf.GeneratedMessage
      implements JACKGameDeskDataOrBuilder {
    // Use JACKGameDeskData.newBuilder() to construct.
    private JACKGameDeskData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JACKGameDeskData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final JACKGameDeskData defaultInstance;
    public static JACKGameDeskData getDefaultInstance() {
      return defaultInstance;
    }

    public JACKGameDeskData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private JACKGameDeskData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              isXiaZhu_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameDeskData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameDeskData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.jack.JACK.JACKGameDeskData.class, packet.jack.JACK.JACKGameDeskData.Builder.class);
    }

    public static com.google.protobuf.Parser<JACKGameDeskData> PARSER =
        new com.google.protobuf.AbstractParser<JACKGameDeskData>() {
      public JACKGameDeskData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JACKGameDeskData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<JACKGameDeskData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // required bool isXiaZhu = 2;
    public static final int ISXIAZHU_FIELD_NUMBER = 2;
    private boolean isXiaZhu_;
    /**
     * <code>required bool isXiaZhu = 2;</code>
     *
     * <pre>
     *是否下注
     * </pre>
     */
    public boolean hasIsXiaZhu() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bool isXiaZhu = 2;</code>
     *
     * <pre>
     *是否下注
     * </pre>
     */
    public boolean getIsXiaZhu() {
      return isXiaZhu_;
    }

    private void initFields() {
      position_ = 0;
      isXiaZhu_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsXiaZhu()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, isXiaZhu_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, isXiaZhu_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.jack.JACK.JACKGameDeskData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameDeskData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameDeskData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameDeskData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameDeskData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameDeskData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameDeskData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.jack.JACK.JACKGameDeskData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameDeskData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameDeskData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.jack.JACK.JACKGameDeskData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.jack.JACKGameDeskData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.jack.JACK.JACKGameDeskDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameDeskData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameDeskData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.jack.JACK.JACKGameDeskData.class, packet.jack.JACK.JACKGameDeskData.Builder.class);
      }

      // Construct using packet.jack.JACK.JACKGameDeskData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        isXiaZhu_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameDeskData_descriptor;
      }

      public packet.jack.JACK.JACKGameDeskData getDefaultInstanceForType() {
        return packet.jack.JACK.JACKGameDeskData.getDefaultInstance();
      }

      public packet.jack.JACK.JACKGameDeskData build() {
        packet.jack.JACK.JACKGameDeskData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.jack.JACK.JACKGameDeskData buildPartial() {
        packet.jack.JACK.JACKGameDeskData result = new packet.jack.JACK.JACKGameDeskData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.isXiaZhu_ = isXiaZhu_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.jack.JACK.JACKGameDeskData) {
          return mergeFrom((packet.jack.JACK.JACKGameDeskData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.jack.JACK.JACKGameDeskData other) {
        if (other == packet.jack.JACK.JACKGameDeskData.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasIsXiaZhu()) {
          setIsXiaZhu(other.getIsXiaZhu());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasIsXiaZhu()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.jack.JACK.JACKGameDeskData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.jack.JACK.JACKGameDeskData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // required bool isXiaZhu = 2;
      private boolean isXiaZhu_ ;
      /**
       * <code>required bool isXiaZhu = 2;</code>
       *
       * <pre>
       *是否下注
       * </pre>
       */
      public boolean hasIsXiaZhu() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bool isXiaZhu = 2;</code>
       *
       * <pre>
       *是否下注
       * </pre>
       */
      public boolean getIsXiaZhu() {
        return isXiaZhu_;
      }
      /**
       * <code>required bool isXiaZhu = 2;</code>
       *
       * <pre>
       *是否下注
       * </pre>
       */
      public Builder setIsXiaZhu(boolean value) {
        bitField0_ |= 0x00000002;
        isXiaZhu_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool isXiaZhu = 2;</code>
       *
       * <pre>
       *是否下注
       * </pre>
       */
      public Builder clearIsXiaZhu() {
        bitField0_ = (bitField0_ & ~0x00000002);
        isXiaZhu_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.jack.JACKGameDeskData)
    }

    static {
      defaultInstance = new JACKGameDeskData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.jack.JACKGameDeskData)
  }

  public interface JACKGameOperPlayerActionSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // required sint32 action = 2;
    /**
     * <code>required sint32 action = 2;</code>
     *
     * <pre>
     *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
     * </pre>
     */
    boolean hasAction();
    /**
     * <code>required sint32 action = 2;</code>
     *
     * <pre>
     *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
     * </pre>
     */
    int getAction();

    // optional sint32 cardValue = 3;
    /**
     * <code>optional sint32 cardValue = 3;</code>
     *
     * <pre>
     *要牌
     * </pre>
     */
    boolean hasCardValue();
    /**
     * <code>optional sint32 cardValue = 3;</code>
     *
     * <pre>
     *要牌
     * </pre>
     */
    int getCardValue();

    // optional sint32 chouMa = 4;
    /**
     * <code>optional sint32 chouMa = 4;</code>
     *
     * <pre>
     *下注筹码大小
     * </pre>
     */
    boolean hasChouMa();
    /**
     * <code>optional sint32 chouMa = 4;</code>
     *
     * <pre>
     *下注筹码大小
     * </pre>
     */
    int getChouMa();

    // optional sint32 yanPaiPos = 5;
    /**
     * <code>optional sint32 yanPaiPos = 5;</code>
     *
     * <pre>
     *被验牌人的座位号
     * </pre>
     */
    boolean hasYanPaiPos();
    /**
     * <code>optional sint32 yanPaiPos = 5;</code>
     *
     * <pre>
     *被验牌人的座位号
     * </pre>
     */
    int getYanPaiPos();

    // optional sint32 winnerPos = 6;
    /**
     * <code>optional sint32 winnerPos = 6;</code>
     *
     * <pre>
     *验牌时赢得人座位号
     * </pre>
     */
    boolean hasWinnerPos();
    /**
     * <code>optional sint32 winnerPos = 6;</code>
     *
     * <pre>
     *验牌时赢得人座位号
     * </pre>
     */
    int getWinnerPos();

    // optional sint32 cardNum = 7;
    /**
     * <code>optional sint32 cardNum = 7;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    boolean hasCardNum();
    /**
     * <code>optional sint32 cardNum = 7;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    int getCardNum();

    // optional sint32 cardType = 8;
    /**
     * <code>optional sint32 cardType = 8;</code>
     *
     * <pre>
     *牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional sint32 cardType = 8;</code>
     *
     * <pre>
     *牌类型
     * </pre>
     */
    int getCardType();

    // repeated sint32 cardsInHand = 9;
    /**
     * <code>repeated sint32 cardsInHand = 9;</code>
     *
     * <pre>
     *当前操作人手牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsInHandList();
    /**
     * <code>repeated sint32 cardsInHand = 9;</code>
     *
     * <pre>
     *当前操作人手牌
     * </pre>
     */
    int getCardsInHandCount();
    /**
     * <code>repeated sint32 cardsInHand = 9;</code>
     *
     * <pre>
     *当前操作人手牌
     * </pre>
     */
    int getCardsInHand(int index);

    // repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    java.util.List<packet.jack.JACK.JACKGameOperHandCardSyn> 
        getPlayerHandCardsList();
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    packet.jack.JACK.JACKGameOperHandCardSyn getPlayerHandCards(int index);
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    int getPlayerHandCardsCount();
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    java.util.List<? extends packet.jack.JACK.JACKGameOperHandCardSynOrBuilder> 
        getPlayerHandCardsOrBuilderList();
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    packet.jack.JACK.JACKGameOperHandCardSynOrBuilder getPlayerHandCardsOrBuilder(
        int index);

    // optional sint32 seq = 100;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    boolean hasSeq();
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    int getSeq();
  }
  /**
   * Protobuf type {@code packet.jack.JACKGameOperPlayerActionSyn}
   *
   * <pre>
   *玩家操作同步operType=ACTIONSYN, 前端通过此包告诉后端玩家进行了什么操作，后端通过此包将操作告诉其它玩家
   * </pre>
   */
  public static final class JACKGameOperPlayerActionSyn extends
      com.google.protobuf.GeneratedMessage
      implements JACKGameOperPlayerActionSynOrBuilder {
    // Use JACKGameOperPlayerActionSyn.newBuilder() to construct.
    private JACKGameOperPlayerActionSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JACKGameOperPlayerActionSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final JACKGameOperPlayerActionSyn defaultInstance;
    public static JACKGameOperPlayerActionSyn getDefaultInstance() {
      return defaultInstance;
    }

    public JACKGameOperPlayerActionSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private JACKGameOperPlayerActionSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              action_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              cardValue_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              chouMa_ = input.readSInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              yanPaiPos_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              winnerPos_ = input.readSInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              cardNum_ = input.readSInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              cardType_ = input.readSInt32();
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                cardsInHand_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              cardsInHand_.add(input.readSInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                cardsInHand_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsInHand_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                playerHandCards_ = new java.util.ArrayList<packet.jack.JACK.JACKGameOperHandCardSyn>();
                mutable_bitField0_ |= 0x00000200;
              }
              playerHandCards_.add(input.readMessage(packet.jack.JACK.JACKGameOperHandCardSyn.PARSER, extensionRegistry));
              break;
            }
            case 800: {
              bitField0_ |= 0x00000100;
              seq_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          cardsInHand_ = java.util.Collections.unmodifiableList(cardsInHand_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          playerHandCards_ = java.util.Collections.unmodifiableList(playerHandCards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerActionSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerActionSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.jack.JACK.JACKGameOperPlayerActionSyn.class, packet.jack.JACK.JACKGameOperPlayerActionSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<JACKGameOperPlayerActionSyn> PARSER =
        new com.google.protobuf.AbstractParser<JACKGameOperPlayerActionSyn>() {
      public JACKGameOperPlayerActionSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JACKGameOperPlayerActionSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<JACKGameOperPlayerActionSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // required sint32 action = 2;
    public static final int ACTION_FIELD_NUMBER = 2;
    private int action_;
    /**
     * <code>required sint32 action = 2;</code>
     *
     * <pre>
     *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
     * </pre>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 action = 2;</code>
     *
     * <pre>
     *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
     * </pre>
     */
    public int getAction() {
      return action_;
    }

    // optional sint32 cardValue = 3;
    public static final int CARDVALUE_FIELD_NUMBER = 3;
    private int cardValue_;
    /**
     * <code>optional sint32 cardValue = 3;</code>
     *
     * <pre>
     *要牌
     * </pre>
     */
    public boolean hasCardValue() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 cardValue = 3;</code>
     *
     * <pre>
     *要牌
     * </pre>
     */
    public int getCardValue() {
      return cardValue_;
    }

    // optional sint32 chouMa = 4;
    public static final int CHOUMA_FIELD_NUMBER = 4;
    private int chouMa_;
    /**
     * <code>optional sint32 chouMa = 4;</code>
     *
     * <pre>
     *下注筹码大小
     * </pre>
     */
    public boolean hasChouMa() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 chouMa = 4;</code>
     *
     * <pre>
     *下注筹码大小
     * </pre>
     */
    public int getChouMa() {
      return chouMa_;
    }

    // optional sint32 yanPaiPos = 5;
    public static final int YANPAIPOS_FIELD_NUMBER = 5;
    private int yanPaiPos_;
    /**
     * <code>optional sint32 yanPaiPos = 5;</code>
     *
     * <pre>
     *被验牌人的座位号
     * </pre>
     */
    public boolean hasYanPaiPos() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 yanPaiPos = 5;</code>
     *
     * <pre>
     *被验牌人的座位号
     * </pre>
     */
    public int getYanPaiPos() {
      return yanPaiPos_;
    }

    // optional sint32 winnerPos = 6;
    public static final int WINNERPOS_FIELD_NUMBER = 6;
    private int winnerPos_;
    /**
     * <code>optional sint32 winnerPos = 6;</code>
     *
     * <pre>
     *验牌时赢得人座位号
     * </pre>
     */
    public boolean hasWinnerPos() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 winnerPos = 6;</code>
     *
     * <pre>
     *验牌时赢得人座位号
     * </pre>
     */
    public int getWinnerPos() {
      return winnerPos_;
    }

    // optional sint32 cardNum = 7;
    public static final int CARDNUM_FIELD_NUMBER = 7;
    private int cardNum_;
    /**
     * <code>optional sint32 cardNum = 7;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    public boolean hasCardNum() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 cardNum = 7;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    public int getCardNum() {
      return cardNum_;
    }

    // optional sint32 cardType = 8;
    public static final int CARDTYPE_FIELD_NUMBER = 8;
    private int cardType_;
    /**
     * <code>optional sint32 cardType = 8;</code>
     *
     * <pre>
     *牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional sint32 cardType = 8;</code>
     *
     * <pre>
     *牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // repeated sint32 cardsInHand = 9;
    public static final int CARDSINHAND_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> cardsInHand_;
    /**
     * <code>repeated sint32 cardsInHand = 9;</code>
     *
     * <pre>
     *当前操作人手牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsInHandList() {
      return cardsInHand_;
    }
    /**
     * <code>repeated sint32 cardsInHand = 9;</code>
     *
     * <pre>
     *当前操作人手牌
     * </pre>
     */
    public int getCardsInHandCount() {
      return cardsInHand_.size();
    }
    /**
     * <code>repeated sint32 cardsInHand = 9;</code>
     *
     * <pre>
     *当前操作人手牌
     * </pre>
     */
    public int getCardsInHand(int index) {
      return cardsInHand_.get(index);
    }

    // repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;
    public static final int PLAYERHANDCARDS_FIELD_NUMBER = 10;
    private java.util.List<packet.jack.JACK.JACKGameOperHandCardSyn> playerHandCards_;
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public java.util.List<packet.jack.JACK.JACKGameOperHandCardSyn> getPlayerHandCardsList() {
      return playerHandCards_;
    }
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public java.util.List<? extends packet.jack.JACK.JACKGameOperHandCardSynOrBuilder> 
        getPlayerHandCardsOrBuilderList() {
      return playerHandCards_;
    }
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public int getPlayerHandCardsCount() {
      return playerHandCards_.size();
    }
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public packet.jack.JACK.JACKGameOperHandCardSyn getPlayerHandCards(int index) {
      return playerHandCards_.get(index);
    }
    /**
     * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
     *
     * <pre>
     *玩家手牌
     * </pre>
     */
    public packet.jack.JACK.JACKGameOperHandCardSynOrBuilder getPlayerHandCardsOrBuilder(
        int index) {
      return playerHandCards_.get(index);
    }

    // optional sint32 seq = 100;
    public static final int SEQ_FIELD_NUMBER = 100;
    private int seq_;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    public boolean hasSeq() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    public int getSeq() {
      return seq_;
    }

    private void initFields() {
      position_ = 0;
      action_ = 0;
      cardValue_ = 0;
      chouMa_ = 0;
      yanPaiPos_ = 0;
      winnerPos_ = 0;
      cardNum_ = 0;
      cardType_ = 0;
      cardsInHand_ = java.util.Collections.emptyList();
      playerHandCards_ = java.util.Collections.emptyList();
      seq_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAction()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getPlayerHandCardsCount(); i++) {
        if (!getPlayerHandCards(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, action_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, cardValue_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(4, chouMa_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, yanPaiPos_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(6, winnerPos_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(7, cardNum_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeSInt32(8, cardType_);
      }
      for (int i = 0; i < cardsInHand_.size(); i++) {
        output.writeSInt32(9, cardsInHand_.get(i));
      }
      for (int i = 0; i < playerHandCards_.size(); i++) {
        output.writeMessage(10, playerHandCards_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeSInt32(100, seq_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, action_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, cardValue_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, chouMa_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, yanPaiPos_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, winnerPos_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, cardNum_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(8, cardType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsInHand_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(cardsInHand_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsInHandList().size();
      }
      for (int i = 0; i < playerHandCards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, playerHandCards_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(100, seq_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.jack.JACK.JACKGameOperPlayerActionSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.jack.JACK.JACKGameOperPlayerActionSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.jack.JACKGameOperPlayerActionSyn}
     *
     * <pre>
     *玩家操作同步operType=ACTIONSYN, 前端通过此包告诉后端玩家进行了什么操作，后端通过此包将操作告诉其它玩家
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.jack.JACK.JACKGameOperPlayerActionSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerActionSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerActionSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.jack.JACK.JACKGameOperPlayerActionSyn.class, packet.jack.JACK.JACKGameOperPlayerActionSyn.Builder.class);
      }

      // Construct using packet.jack.JACK.JACKGameOperPlayerActionSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPlayerHandCardsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        action_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        cardValue_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        chouMa_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        yanPaiPos_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        winnerPos_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        cardNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        cardsInHand_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        if (playerHandCardsBuilder_ == null) {
          playerHandCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          playerHandCardsBuilder_.clear();
        }
        seq_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerActionSyn_descriptor;
      }

      public packet.jack.JACK.JACKGameOperPlayerActionSyn getDefaultInstanceForType() {
        return packet.jack.JACK.JACKGameOperPlayerActionSyn.getDefaultInstance();
      }

      public packet.jack.JACK.JACKGameOperPlayerActionSyn build() {
        packet.jack.JACK.JACKGameOperPlayerActionSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.jack.JACK.JACKGameOperPlayerActionSyn buildPartial() {
        packet.jack.JACK.JACKGameOperPlayerActionSyn result = new packet.jack.JACK.JACKGameOperPlayerActionSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.action_ = action_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardValue_ = cardValue_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.chouMa_ = chouMa_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.yanPaiPos_ = yanPaiPos_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.winnerPos_ = winnerPos_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.cardNum_ = cardNum_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.cardType_ = cardType_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          cardsInHand_ = java.util.Collections.unmodifiableList(cardsInHand_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.cardsInHand_ = cardsInHand_;
        if (playerHandCardsBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            playerHandCards_ = java.util.Collections.unmodifiableList(playerHandCards_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.playerHandCards_ = playerHandCards_;
        } else {
          result.playerHandCards_ = playerHandCardsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000100;
        }
        result.seq_ = seq_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.jack.JACK.JACKGameOperPlayerActionSyn) {
          return mergeFrom((packet.jack.JACK.JACKGameOperPlayerActionSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.jack.JACK.JACKGameOperPlayerActionSyn other) {
        if (other == packet.jack.JACK.JACKGameOperPlayerActionSyn.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        if (other.hasCardValue()) {
          setCardValue(other.getCardValue());
        }
        if (other.hasChouMa()) {
          setChouMa(other.getChouMa());
        }
        if (other.hasYanPaiPos()) {
          setYanPaiPos(other.getYanPaiPos());
        }
        if (other.hasWinnerPos()) {
          setWinnerPos(other.getWinnerPos());
        }
        if (other.hasCardNum()) {
          setCardNum(other.getCardNum());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (!other.cardsInHand_.isEmpty()) {
          if (cardsInHand_.isEmpty()) {
            cardsInHand_ = other.cardsInHand_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureCardsInHandIsMutable();
            cardsInHand_.addAll(other.cardsInHand_);
          }
          onChanged();
        }
        if (playerHandCardsBuilder_ == null) {
          if (!other.playerHandCards_.isEmpty()) {
            if (playerHandCards_.isEmpty()) {
              playerHandCards_ = other.playerHandCards_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensurePlayerHandCardsIsMutable();
              playerHandCards_.addAll(other.playerHandCards_);
            }
            onChanged();
          }
        } else {
          if (!other.playerHandCards_.isEmpty()) {
            if (playerHandCardsBuilder_.isEmpty()) {
              playerHandCardsBuilder_.dispose();
              playerHandCardsBuilder_ = null;
              playerHandCards_ = other.playerHandCards_;
              bitField0_ = (bitField0_ & ~0x00000200);
              playerHandCardsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayerHandCardsFieldBuilder() : null;
            } else {
              playerHandCardsBuilder_.addAllMessages(other.playerHandCards_);
            }
          }
        }
        if (other.hasSeq()) {
          setSeq(other.getSeq());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasAction()) {
          
          return false;
        }
        for (int i = 0; i < getPlayerHandCardsCount(); i++) {
          if (!getPlayerHandCards(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.jack.JACK.JACKGameOperPlayerActionSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.jack.JACK.JACKGameOperPlayerActionSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // required sint32 action = 2;
      private int action_ ;
      /**
       * <code>required sint32 action = 2;</code>
       *
       * <pre>
       *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
       * </pre>
       */
      public boolean hasAction() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 action = 2;</code>
       *
       * <pre>
       *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
       * </pre>
       */
      public int getAction() {
        return action_;
      }
      /**
       * <code>required sint32 action = 2;</code>
       *
       * <pre>
       *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
       * </pre>
       */
      public Builder setAction(int value) {
        bitField0_ |= 0x00000002;
        action_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 action = 2;</code>
       *
       * <pre>
       *操作编码 (0x1:出) (0x2:过) (0x4:抢地主) (0x8:加倍)
       * </pre>
       */
      public Builder clearAction() {
        bitField0_ = (bitField0_ & ~0x00000002);
        action_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 cardValue = 3;
      private int cardValue_ ;
      /**
       * <code>optional sint32 cardValue = 3;</code>
       *
       * <pre>
       *要牌
       * </pre>
       */
      public boolean hasCardValue() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 cardValue = 3;</code>
       *
       * <pre>
       *要牌
       * </pre>
       */
      public int getCardValue() {
        return cardValue_;
      }
      /**
       * <code>optional sint32 cardValue = 3;</code>
       *
       * <pre>
       *要牌
       * </pre>
       */
      public Builder setCardValue(int value) {
        bitField0_ |= 0x00000004;
        cardValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 cardValue = 3;</code>
       *
       * <pre>
       *要牌
       * </pre>
       */
      public Builder clearCardValue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cardValue_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 chouMa = 4;
      private int chouMa_ ;
      /**
       * <code>optional sint32 chouMa = 4;</code>
       *
       * <pre>
       *下注筹码大小
       * </pre>
       */
      public boolean hasChouMa() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 chouMa = 4;</code>
       *
       * <pre>
       *下注筹码大小
       * </pre>
       */
      public int getChouMa() {
        return chouMa_;
      }
      /**
       * <code>optional sint32 chouMa = 4;</code>
       *
       * <pre>
       *下注筹码大小
       * </pre>
       */
      public Builder setChouMa(int value) {
        bitField0_ |= 0x00000008;
        chouMa_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 chouMa = 4;</code>
       *
       * <pre>
       *下注筹码大小
       * </pre>
       */
      public Builder clearChouMa() {
        bitField0_ = (bitField0_ & ~0x00000008);
        chouMa_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 yanPaiPos = 5;
      private int yanPaiPos_ ;
      /**
       * <code>optional sint32 yanPaiPos = 5;</code>
       *
       * <pre>
       *被验牌人的座位号
       * </pre>
       */
      public boolean hasYanPaiPos() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 yanPaiPos = 5;</code>
       *
       * <pre>
       *被验牌人的座位号
       * </pre>
       */
      public int getYanPaiPos() {
        return yanPaiPos_;
      }
      /**
       * <code>optional sint32 yanPaiPos = 5;</code>
       *
       * <pre>
       *被验牌人的座位号
       * </pre>
       */
      public Builder setYanPaiPos(int value) {
        bitField0_ |= 0x00000010;
        yanPaiPos_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 yanPaiPos = 5;</code>
       *
       * <pre>
       *被验牌人的座位号
       * </pre>
       */
      public Builder clearYanPaiPos() {
        bitField0_ = (bitField0_ & ~0x00000010);
        yanPaiPos_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 winnerPos = 6;
      private int winnerPos_ ;
      /**
       * <code>optional sint32 winnerPos = 6;</code>
       *
       * <pre>
       *验牌时赢得人座位号
       * </pre>
       */
      public boolean hasWinnerPos() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 winnerPos = 6;</code>
       *
       * <pre>
       *验牌时赢得人座位号
       * </pre>
       */
      public int getWinnerPos() {
        return winnerPos_;
      }
      /**
       * <code>optional sint32 winnerPos = 6;</code>
       *
       * <pre>
       *验牌时赢得人座位号
       * </pre>
       */
      public Builder setWinnerPos(int value) {
        bitField0_ |= 0x00000020;
        winnerPos_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 winnerPos = 6;</code>
       *
       * <pre>
       *验牌时赢得人座位号
       * </pre>
       */
      public Builder clearWinnerPos() {
        bitField0_ = (bitField0_ & ~0x00000020);
        winnerPos_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 cardNum = 7;
      private int cardNum_ ;
      /**
       * <code>optional sint32 cardNum = 7;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public boolean hasCardNum() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional sint32 cardNum = 7;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public int getCardNum() {
        return cardNum_;
      }
      /**
       * <code>optional sint32 cardNum = 7;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public Builder setCardNum(int value) {
        bitField0_ |= 0x00000040;
        cardNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 cardNum = 7;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public Builder clearCardNum() {
        bitField0_ = (bitField0_ & ~0x00000040);
        cardNum_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 cardType = 8;
      private int cardType_ ;
      /**
       * <code>optional sint32 cardType = 8;</code>
       *
       * <pre>
       *牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional sint32 cardType = 8;</code>
       *
       * <pre>
       *牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional sint32 cardType = 8;</code>
       *
       * <pre>
       *牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000080;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 cardType = 8;</code>
       *
       * <pre>
       *牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000080);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // repeated sint32 cardsInHand = 9;
      private java.util.List<java.lang.Integer> cardsInHand_ = java.util.Collections.emptyList();
      private void ensureCardsInHandIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          cardsInHand_ = new java.util.ArrayList<java.lang.Integer>(cardsInHand_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated sint32 cardsInHand = 9;</code>
       *
       * <pre>
       *当前操作人手牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsInHandList() {
        return java.util.Collections.unmodifiableList(cardsInHand_);
      }
      /**
       * <code>repeated sint32 cardsInHand = 9;</code>
       *
       * <pre>
       *当前操作人手牌
       * </pre>
       */
      public int getCardsInHandCount() {
        return cardsInHand_.size();
      }
      /**
       * <code>repeated sint32 cardsInHand = 9;</code>
       *
       * <pre>
       *当前操作人手牌
       * </pre>
       */
      public int getCardsInHand(int index) {
        return cardsInHand_.get(index);
      }
      /**
       * <code>repeated sint32 cardsInHand = 9;</code>
       *
       * <pre>
       *当前操作人手牌
       * </pre>
       */
      public Builder setCardsInHand(
          int index, int value) {
        ensureCardsInHandIsMutable();
        cardsInHand_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardsInHand = 9;</code>
       *
       * <pre>
       *当前操作人手牌
       * </pre>
       */
      public Builder addCardsInHand(int value) {
        ensureCardsInHandIsMutable();
        cardsInHand_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardsInHand = 9;</code>
       *
       * <pre>
       *当前操作人手牌
       * </pre>
       */
      public Builder addAllCardsInHand(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsInHandIsMutable();
        super.addAll(values, cardsInHand_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardsInHand = 9;</code>
       *
       * <pre>
       *当前操作人手牌
       * </pre>
       */
      public Builder clearCardsInHand() {
        cardsInHand_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;
      private java.util.List<packet.jack.JACK.JACKGameOperHandCardSyn> playerHandCards_ =
        java.util.Collections.emptyList();
      private void ensurePlayerHandCardsIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          playerHandCards_ = new java.util.ArrayList<packet.jack.JACK.JACKGameOperHandCardSyn>(playerHandCards_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.jack.JACK.JACKGameOperHandCardSyn, packet.jack.JACK.JACKGameOperHandCardSyn.Builder, packet.jack.JACK.JACKGameOperHandCardSynOrBuilder> playerHandCardsBuilder_;

      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public java.util.List<packet.jack.JACK.JACKGameOperHandCardSyn> getPlayerHandCardsList() {
        if (playerHandCardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(playerHandCards_);
        } else {
          return playerHandCardsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public int getPlayerHandCardsCount() {
        if (playerHandCardsBuilder_ == null) {
          return playerHandCards_.size();
        } else {
          return playerHandCardsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.jack.JACK.JACKGameOperHandCardSyn getPlayerHandCards(int index) {
        if (playerHandCardsBuilder_ == null) {
          return playerHandCards_.get(index);
        } else {
          return playerHandCardsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder setPlayerHandCards(
          int index, packet.jack.JACK.JACKGameOperHandCardSyn value) {
        if (playerHandCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.set(index, value);
          onChanged();
        } else {
          playerHandCardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder setPlayerHandCards(
          int index, packet.jack.JACK.JACKGameOperHandCardSyn.Builder builderForValue) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.set(index, builderForValue.build());
          onChanged();
        } else {
          playerHandCardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(packet.jack.JACK.JACKGameOperHandCardSyn value) {
        if (playerHandCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(value);
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(
          int index, packet.jack.JACK.JACKGameOperHandCardSyn value) {
        if (playerHandCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(index, value);
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(
          packet.jack.JACK.JACKGameOperHandCardSyn.Builder builderForValue) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(builderForValue.build());
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addPlayerHandCards(
          int index, packet.jack.JACK.JACKGameOperHandCardSyn.Builder builderForValue) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.add(index, builderForValue.build());
          onChanged();
        } else {
          playerHandCardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder addAllPlayerHandCards(
          java.lang.Iterable<? extends packet.jack.JACK.JACKGameOperHandCardSyn> values) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          super.addAll(values, playerHandCards_);
          onChanged();
        } else {
          playerHandCardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder clearPlayerHandCards() {
        if (playerHandCardsBuilder_ == null) {
          playerHandCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          playerHandCardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public Builder removePlayerHandCards(int index) {
        if (playerHandCardsBuilder_ == null) {
          ensurePlayerHandCardsIsMutable();
          playerHandCards_.remove(index);
          onChanged();
        } else {
          playerHandCardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.jack.JACK.JACKGameOperHandCardSyn.Builder getPlayerHandCardsBuilder(
          int index) {
        return getPlayerHandCardsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.jack.JACK.JACKGameOperHandCardSynOrBuilder getPlayerHandCardsOrBuilder(
          int index) {
        if (playerHandCardsBuilder_ == null) {
          return playerHandCards_.get(index);  } else {
          return playerHandCardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public java.util.List<? extends packet.jack.JACK.JACKGameOperHandCardSynOrBuilder> 
           getPlayerHandCardsOrBuilderList() {
        if (playerHandCardsBuilder_ != null) {
          return playerHandCardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(playerHandCards_);
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.jack.JACK.JACKGameOperHandCardSyn.Builder addPlayerHandCardsBuilder() {
        return getPlayerHandCardsFieldBuilder().addBuilder(
            packet.jack.JACK.JACKGameOperHandCardSyn.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public packet.jack.JACK.JACKGameOperHandCardSyn.Builder addPlayerHandCardsBuilder(
          int index) {
        return getPlayerHandCardsFieldBuilder().addBuilder(
            index, packet.jack.JACK.JACKGameOperHandCardSyn.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperHandCardSyn playerHandCards = 10;</code>
       *
       * <pre>
       *玩家手牌
       * </pre>
       */
      public java.util.List<packet.jack.JACK.JACKGameOperHandCardSyn.Builder> 
           getPlayerHandCardsBuilderList() {
        return getPlayerHandCardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.jack.JACK.JACKGameOperHandCardSyn, packet.jack.JACK.JACKGameOperHandCardSyn.Builder, packet.jack.JACK.JACKGameOperHandCardSynOrBuilder> 
          getPlayerHandCardsFieldBuilder() {
        if (playerHandCardsBuilder_ == null) {
          playerHandCardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.jack.JACK.JACKGameOperHandCardSyn, packet.jack.JACK.JACKGameOperHandCardSyn.Builder, packet.jack.JACK.JACKGameOperHandCardSynOrBuilder>(
                  playerHandCards_,
                  ((bitField0_ & 0x00000200) == 0x00000200),
                  getParentForChildren(),
                  isClean());
          playerHandCards_ = null;
        }
        return playerHandCardsBuilder_;
      }

      // optional sint32 seq = 100;
      private int seq_ ;
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public boolean hasSeq() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public int getSeq() {
        return seq_;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public Builder setSeq(int value) {
        bitField0_ |= 0x00000400;
        seq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public Builder clearSeq() {
        bitField0_ = (bitField0_ & ~0x00000400);
        seq_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.jack.JACKGameOperPlayerActionSyn)
    }

    static {
      defaultInstance = new JACKGameOperPlayerActionSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.jack.JACKGameOperPlayerActionSyn)
  }

  public interface JACKGameOperPlayerDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     */
    int getPosition();

    // repeated sint32 cardsInHand = 2;
    /**
     * <code>repeated sint32 cardsInHand = 2;</code>
     */
    java.util.List<java.lang.Integer> getCardsInHandList();
    /**
     * <code>repeated sint32 cardsInHand = 2;</code>
     */
    int getCardsInHandCount();
    /**
     * <code>repeated sint32 cardsInHand = 2;</code>
     */
    int getCardsInHand(int index);

    // optional sint32 cardNum = 3;
    /**
     * <code>optional sint32 cardNum = 3;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    boolean hasCardNum();
    /**
     * <code>optional sint32 cardNum = 3;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    int getCardNum();

    // optional sint32 cardType = 4;
    /**
     * <code>optional sint32 cardType = 4;</code>
     *
     * <pre>
     *牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional sint32 cardType = 4;</code>
     *
     * <pre>
     *牌类型
     * </pre>
     */
    int getCardType();
  }
  /**
   * Protobuf type {@code packet.jack.JACKGameOperPlayerData}
   *
   * <pre>
   *玩家操作时其他玩家数据
   * </pre>
   */
  public static final class JACKGameOperPlayerData extends
      com.google.protobuf.GeneratedMessage
      implements JACKGameOperPlayerDataOrBuilder {
    // Use JACKGameOperPlayerData.newBuilder() to construct.
    private JACKGameOperPlayerData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JACKGameOperPlayerData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final JACKGameOperPlayerData defaultInstance;
    public static JACKGameOperPlayerData getDefaultInstance() {
      return defaultInstance;
    }

    public JACKGameOperPlayerData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private JACKGameOperPlayerData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsInHand_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsInHand_.add(input.readSInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsInHand_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsInHand_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              cardNum_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              cardType_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsInHand_ = java.util.Collections.unmodifiableList(cardsInHand_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.jack.JACK.JACKGameOperPlayerData.class, packet.jack.JACK.JACKGameOperPlayerData.Builder.class);
    }

    public static com.google.protobuf.Parser<JACKGameOperPlayerData> PARSER =
        new com.google.protobuf.AbstractParser<JACKGameOperPlayerData>() {
      public JACKGameOperPlayerData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JACKGameOperPlayerData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<JACKGameOperPlayerData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     */
    public int getPosition() {
      return position_;
    }

    // repeated sint32 cardsInHand = 2;
    public static final int CARDSINHAND_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsInHand_;
    /**
     * <code>repeated sint32 cardsInHand = 2;</code>
     */
    public java.util.List<java.lang.Integer>
        getCardsInHandList() {
      return cardsInHand_;
    }
    /**
     * <code>repeated sint32 cardsInHand = 2;</code>
     */
    public int getCardsInHandCount() {
      return cardsInHand_.size();
    }
    /**
     * <code>repeated sint32 cardsInHand = 2;</code>
     */
    public int getCardsInHand(int index) {
      return cardsInHand_.get(index);
    }

    // optional sint32 cardNum = 3;
    public static final int CARDNUM_FIELD_NUMBER = 3;
    private int cardNum_;
    /**
     * <code>optional sint32 cardNum = 3;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    public boolean hasCardNum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 cardNum = 3;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    public int getCardNum() {
      return cardNum_;
    }

    // optional sint32 cardType = 4;
    public static final int CARDTYPE_FIELD_NUMBER = 4;
    private int cardType_;
    /**
     * <code>optional sint32 cardType = 4;</code>
     *
     * <pre>
     *牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 cardType = 4;</code>
     *
     * <pre>
     *牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    private void initFields() {
      position_ = 0;
      cardsInHand_ = java.util.Collections.emptyList();
      cardNum_ = 0;
      cardType_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      for (int i = 0; i < cardsInHand_.size(); i++) {
        output.writeSInt32(2, cardsInHand_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(3, cardNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(4, cardType_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsInHand_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(cardsInHand_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsInHandList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, cardNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, cardType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.jack.JACK.JACKGameOperPlayerData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperPlayerData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperPlayerData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPlayerData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPlayerData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPlayerData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.jack.JACK.JACKGameOperPlayerData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.jack.JACKGameOperPlayerData}
     *
     * <pre>
     *玩家操作时其他玩家数据
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.jack.JACK.JACKGameOperPlayerDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.jack.JACK.JACKGameOperPlayerData.class, packet.jack.JACK.JACKGameOperPlayerData.Builder.class);
      }

      // Construct using packet.jack.JACK.JACKGameOperPlayerData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsInHand_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        cardNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerData_descriptor;
      }

      public packet.jack.JACK.JACKGameOperPlayerData getDefaultInstanceForType() {
        return packet.jack.JACK.JACKGameOperPlayerData.getDefaultInstance();
      }

      public packet.jack.JACK.JACKGameOperPlayerData build() {
        packet.jack.JACK.JACKGameOperPlayerData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.jack.JACK.JACKGameOperPlayerData buildPartial() {
        packet.jack.JACK.JACKGameOperPlayerData result = new packet.jack.JACK.JACKGameOperPlayerData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsInHand_ = java.util.Collections.unmodifiableList(cardsInHand_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsInHand_ = cardsInHand_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardNum_ = cardNum_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardType_ = cardType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.jack.JACK.JACKGameOperPlayerData) {
          return mergeFrom((packet.jack.JACK.JACKGameOperPlayerData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.jack.JACK.JACKGameOperPlayerData other) {
        if (other == packet.jack.JACK.JACKGameOperPlayerData.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (!other.cardsInHand_.isEmpty()) {
          if (cardsInHand_.isEmpty()) {
            cardsInHand_ = other.cardsInHand_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsInHandIsMutable();
            cardsInHand_.addAll(other.cardsInHand_);
          }
          onChanged();
        }
        if (other.hasCardNum()) {
          setCardNum(other.getCardNum());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.jack.JACK.JACKGameOperPlayerData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.jack.JACK.JACKGameOperPlayerData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // repeated sint32 cardsInHand = 2;
      private java.util.List<java.lang.Integer> cardsInHand_ = java.util.Collections.emptyList();
      private void ensureCardsInHandIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsInHand_ = new java.util.ArrayList<java.lang.Integer>(cardsInHand_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated sint32 cardsInHand = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getCardsInHandList() {
        return java.util.Collections.unmodifiableList(cardsInHand_);
      }
      /**
       * <code>repeated sint32 cardsInHand = 2;</code>
       */
      public int getCardsInHandCount() {
        return cardsInHand_.size();
      }
      /**
       * <code>repeated sint32 cardsInHand = 2;</code>
       */
      public int getCardsInHand(int index) {
        return cardsInHand_.get(index);
      }
      /**
       * <code>repeated sint32 cardsInHand = 2;</code>
       */
      public Builder setCardsInHand(
          int index, int value) {
        ensureCardsInHandIsMutable();
        cardsInHand_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardsInHand = 2;</code>
       */
      public Builder addCardsInHand(int value) {
        ensureCardsInHandIsMutable();
        cardsInHand_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardsInHand = 2;</code>
       */
      public Builder addAllCardsInHand(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsInHandIsMutable();
        super.addAll(values, cardsInHand_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 cardsInHand = 2;</code>
       */
      public Builder clearCardsInHand() {
        cardsInHand_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional sint32 cardNum = 3;
      private int cardNum_ ;
      /**
       * <code>optional sint32 cardNum = 3;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public boolean hasCardNum() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 cardNum = 3;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public int getCardNum() {
        return cardNum_;
      }
      /**
       * <code>optional sint32 cardNum = 3;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public Builder setCardNum(int value) {
        bitField0_ |= 0x00000004;
        cardNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 cardNum = 3;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public Builder clearCardNum() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cardNum_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 cardType = 4;
      private int cardType_ ;
      /**
       * <code>optional sint32 cardType = 4;</code>
       *
       * <pre>
       *牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 cardType = 4;</code>
       *
       * <pre>
       *牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional sint32 cardType = 4;</code>
       *
       * <pre>
       *牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000008;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 cardType = 4;</code>
       *
       * <pre>
       *牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.jack.JACKGameOperPlayerData)
    }

    static {
      defaultInstance = new JACKGameOperPlayerData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.jack.JACKGameOperPlayerData)
  }

  public interface JACKGameOperPlayerActionNotifyOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // required sint32 actions = 2;
    /**
     * <code>required sint32 actions = 2;</code>
     *
     * <pre>
     * 可选操作列表(位与)
     * </pre>
     */
    boolean hasActions();
    /**
     * <code>required sint32 actions = 2;</code>
     *
     * <pre>
     * 可选操作列表(位与)
     * </pre>
     */
    int getActions();

    // repeated sint32 xiaZhu = 3;
    /**
     * <code>repeated sint32 xiaZhu = 3;</code>
     *
     * <pre>
     *玩家下注集合
     * </pre>
     */
    java.util.List<java.lang.Integer> getXiaZhuList();
    /**
     * <code>repeated sint32 xiaZhu = 3;</code>
     *
     * <pre>
     *玩家下注集合
     * </pre>
     */
    int getXiaZhuCount();
    /**
     * <code>repeated sint32 xiaZhu = 3;</code>
     *
     * <pre>
     *玩家下注集合
     * </pre>
     */
    int getXiaZhu(int index);

    // repeated sint32 yanPaiPos = 4;
    /**
     * <code>repeated sint32 yanPaiPos = 4;</code>
     *
     * <pre>
     *可被验牌人的座位集合
     * </pre>
     */
    java.util.List<java.lang.Integer> getYanPaiPosList();
    /**
     * <code>repeated sint32 yanPaiPos = 4;</code>
     *
     * <pre>
     *可被验牌人的座位集合
     * </pre>
     */
    int getYanPaiPosCount();
    /**
     * <code>repeated sint32 yanPaiPos = 4;</code>
     *
     * <pre>
     *可被验牌人的座位集合
     * </pre>
     */
    int getYanPaiPos(int index);

    // optional sint32 seq = 100;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    boolean hasSeq();
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    int getSeq();
  }
  /**
   * Protobuf type {@code packet.jack.JACKGameOperPlayerActionNotify}
   *
   * <pre>
   *服务器提示玩家操作 operType=ACTNOTIFY
   * </pre>
   */
  public static final class JACKGameOperPlayerActionNotify extends
      com.google.protobuf.GeneratedMessage
      implements JACKGameOperPlayerActionNotifyOrBuilder {
    // Use JACKGameOperPlayerActionNotify.newBuilder() to construct.
    private JACKGameOperPlayerActionNotify(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JACKGameOperPlayerActionNotify(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final JACKGameOperPlayerActionNotify defaultInstance;
    public static JACKGameOperPlayerActionNotify getDefaultInstance() {
      return defaultInstance;
    }

    public JACKGameOperPlayerActionNotify getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private JACKGameOperPlayerActionNotify(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              actions_ = input.readSInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                xiaZhu_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              xiaZhu_.add(input.readSInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                xiaZhu_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                xiaZhu_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                yanPaiPos_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              yanPaiPos_.add(input.readSInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                yanPaiPos_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                yanPaiPos_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 800: {
              bitField0_ |= 0x00000004;
              seq_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          xiaZhu_ = java.util.Collections.unmodifiableList(xiaZhu_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          yanPaiPos_ = java.util.Collections.unmodifiableList(yanPaiPos_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerActionNotify_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerActionNotify_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.jack.JACK.JACKGameOperPlayerActionNotify.class, packet.jack.JACK.JACKGameOperPlayerActionNotify.Builder.class);
    }

    public static com.google.protobuf.Parser<JACKGameOperPlayerActionNotify> PARSER =
        new com.google.protobuf.AbstractParser<JACKGameOperPlayerActionNotify>() {
      public JACKGameOperPlayerActionNotify parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JACKGameOperPlayerActionNotify(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<JACKGameOperPlayerActionNotify> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // required sint32 actions = 2;
    public static final int ACTIONS_FIELD_NUMBER = 2;
    private int actions_;
    /**
     * <code>required sint32 actions = 2;</code>
     *
     * <pre>
     * 可选操作列表(位与)
     * </pre>
     */
    public boolean hasActions() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 actions = 2;</code>
     *
     * <pre>
     * 可选操作列表(位与)
     * </pre>
     */
    public int getActions() {
      return actions_;
    }

    // repeated sint32 xiaZhu = 3;
    public static final int XIAZHU_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> xiaZhu_;
    /**
     * <code>repeated sint32 xiaZhu = 3;</code>
     *
     * <pre>
     *玩家下注集合
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getXiaZhuList() {
      return xiaZhu_;
    }
    /**
     * <code>repeated sint32 xiaZhu = 3;</code>
     *
     * <pre>
     *玩家下注集合
     * </pre>
     */
    public int getXiaZhuCount() {
      return xiaZhu_.size();
    }
    /**
     * <code>repeated sint32 xiaZhu = 3;</code>
     *
     * <pre>
     *玩家下注集合
     * </pre>
     */
    public int getXiaZhu(int index) {
      return xiaZhu_.get(index);
    }

    // repeated sint32 yanPaiPos = 4;
    public static final int YANPAIPOS_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> yanPaiPos_;
    /**
     * <code>repeated sint32 yanPaiPos = 4;</code>
     *
     * <pre>
     *可被验牌人的座位集合
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getYanPaiPosList() {
      return yanPaiPos_;
    }
    /**
     * <code>repeated sint32 yanPaiPos = 4;</code>
     *
     * <pre>
     *可被验牌人的座位集合
     * </pre>
     */
    public int getYanPaiPosCount() {
      return yanPaiPos_.size();
    }
    /**
     * <code>repeated sint32 yanPaiPos = 4;</code>
     *
     * <pre>
     *可被验牌人的座位集合
     * </pre>
     */
    public int getYanPaiPos(int index) {
      return yanPaiPos_.get(index);
    }

    // optional sint32 seq = 100;
    public static final int SEQ_FIELD_NUMBER = 100;
    private int seq_;
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    public boolean hasSeq() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 seq = 100;</code>
     *
     * <pre>
     *序列号,调试用
     * </pre>
     */
    public int getSeq() {
      return seq_;
    }

    private void initFields() {
      position_ = 0;
      actions_ = 0;
      xiaZhu_ = java.util.Collections.emptyList();
      yanPaiPos_ = java.util.Collections.emptyList();
      seq_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasActions()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, actions_);
      }
      for (int i = 0; i < xiaZhu_.size(); i++) {
        output.writeSInt32(3, xiaZhu_.get(i));
      }
      for (int i = 0; i < yanPaiPos_.size(); i++) {
        output.writeSInt32(4, yanPaiPos_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(100, seq_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, actions_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < xiaZhu_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(xiaZhu_.get(i));
        }
        size += dataSize;
        size += 1 * getXiaZhuList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < yanPaiPos_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(yanPaiPos_.get(i));
        }
        size += dataSize;
        size += 1 * getYanPaiPosList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(100, seq_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.jack.JACK.JACKGameOperPlayerActionNotify parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionNotify parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionNotify parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionNotify parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionNotify parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionNotify parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionNotify parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionNotify parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionNotify parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPlayerActionNotify parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.jack.JACK.JACKGameOperPlayerActionNotify prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.jack.JACKGameOperPlayerActionNotify}
     *
     * <pre>
     *服务器提示玩家操作 operType=ACTNOTIFY
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.jack.JACK.JACKGameOperPlayerActionNotifyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerActionNotify_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerActionNotify_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.jack.JACK.JACKGameOperPlayerActionNotify.class, packet.jack.JACK.JACKGameOperPlayerActionNotify.Builder.class);
      }

      // Construct using packet.jack.JACK.JACKGameOperPlayerActionNotify.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        actions_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        xiaZhu_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        yanPaiPos_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        seq_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerActionNotify_descriptor;
      }

      public packet.jack.JACK.JACKGameOperPlayerActionNotify getDefaultInstanceForType() {
        return packet.jack.JACK.JACKGameOperPlayerActionNotify.getDefaultInstance();
      }

      public packet.jack.JACK.JACKGameOperPlayerActionNotify build() {
        packet.jack.JACK.JACKGameOperPlayerActionNotify result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.jack.JACK.JACKGameOperPlayerActionNotify buildPartial() {
        packet.jack.JACK.JACKGameOperPlayerActionNotify result = new packet.jack.JACK.JACKGameOperPlayerActionNotify(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.actions_ = actions_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          xiaZhu_ = java.util.Collections.unmodifiableList(xiaZhu_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.xiaZhu_ = xiaZhu_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          yanPaiPos_ = java.util.Collections.unmodifiableList(yanPaiPos_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.yanPaiPos_ = yanPaiPos_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.seq_ = seq_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.jack.JACK.JACKGameOperPlayerActionNotify) {
          return mergeFrom((packet.jack.JACK.JACKGameOperPlayerActionNotify)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.jack.JACK.JACKGameOperPlayerActionNotify other) {
        if (other == packet.jack.JACK.JACKGameOperPlayerActionNotify.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasActions()) {
          setActions(other.getActions());
        }
        if (!other.xiaZhu_.isEmpty()) {
          if (xiaZhu_.isEmpty()) {
            xiaZhu_ = other.xiaZhu_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureXiaZhuIsMutable();
            xiaZhu_.addAll(other.xiaZhu_);
          }
          onChanged();
        }
        if (!other.yanPaiPos_.isEmpty()) {
          if (yanPaiPos_.isEmpty()) {
            yanPaiPos_ = other.yanPaiPos_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureYanPaiPosIsMutable();
            yanPaiPos_.addAll(other.yanPaiPos_);
          }
          onChanged();
        }
        if (other.hasSeq()) {
          setSeq(other.getSeq());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasActions()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.jack.JACK.JACKGameOperPlayerActionNotify parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.jack.JACK.JACKGameOperPlayerActionNotify) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // required sint32 actions = 2;
      private int actions_ ;
      /**
       * <code>required sint32 actions = 2;</code>
       *
       * <pre>
       * 可选操作列表(位与)
       * </pre>
       */
      public boolean hasActions() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 actions = 2;</code>
       *
       * <pre>
       * 可选操作列表(位与)
       * </pre>
       */
      public int getActions() {
        return actions_;
      }
      /**
       * <code>required sint32 actions = 2;</code>
       *
       * <pre>
       * 可选操作列表(位与)
       * </pre>
       */
      public Builder setActions(int value) {
        bitField0_ |= 0x00000002;
        actions_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 actions = 2;</code>
       *
       * <pre>
       * 可选操作列表(位与)
       * </pre>
       */
      public Builder clearActions() {
        bitField0_ = (bitField0_ & ~0x00000002);
        actions_ = 0;
        onChanged();
        return this;
      }

      // repeated sint32 xiaZhu = 3;
      private java.util.List<java.lang.Integer> xiaZhu_ = java.util.Collections.emptyList();
      private void ensureXiaZhuIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          xiaZhu_ = new java.util.ArrayList<java.lang.Integer>(xiaZhu_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated sint32 xiaZhu = 3;</code>
       *
       * <pre>
       *玩家下注集合
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getXiaZhuList() {
        return java.util.Collections.unmodifiableList(xiaZhu_);
      }
      /**
       * <code>repeated sint32 xiaZhu = 3;</code>
       *
       * <pre>
       *玩家下注集合
       * </pre>
       */
      public int getXiaZhuCount() {
        return xiaZhu_.size();
      }
      /**
       * <code>repeated sint32 xiaZhu = 3;</code>
       *
       * <pre>
       *玩家下注集合
       * </pre>
       */
      public int getXiaZhu(int index) {
        return xiaZhu_.get(index);
      }
      /**
       * <code>repeated sint32 xiaZhu = 3;</code>
       *
       * <pre>
       *玩家下注集合
       * </pre>
       */
      public Builder setXiaZhu(
          int index, int value) {
        ensureXiaZhuIsMutable();
        xiaZhu_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 xiaZhu = 3;</code>
       *
       * <pre>
       *玩家下注集合
       * </pre>
       */
      public Builder addXiaZhu(int value) {
        ensureXiaZhuIsMutable();
        xiaZhu_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 xiaZhu = 3;</code>
       *
       * <pre>
       *玩家下注集合
       * </pre>
       */
      public Builder addAllXiaZhu(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureXiaZhuIsMutable();
        super.addAll(values, xiaZhu_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 xiaZhu = 3;</code>
       *
       * <pre>
       *玩家下注集合
       * </pre>
       */
      public Builder clearXiaZhu() {
        xiaZhu_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated sint32 yanPaiPos = 4;
      private java.util.List<java.lang.Integer> yanPaiPos_ = java.util.Collections.emptyList();
      private void ensureYanPaiPosIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          yanPaiPos_ = new java.util.ArrayList<java.lang.Integer>(yanPaiPos_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated sint32 yanPaiPos = 4;</code>
       *
       * <pre>
       *可被验牌人的座位集合
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getYanPaiPosList() {
        return java.util.Collections.unmodifiableList(yanPaiPos_);
      }
      /**
       * <code>repeated sint32 yanPaiPos = 4;</code>
       *
       * <pre>
       *可被验牌人的座位集合
       * </pre>
       */
      public int getYanPaiPosCount() {
        return yanPaiPos_.size();
      }
      /**
       * <code>repeated sint32 yanPaiPos = 4;</code>
       *
       * <pre>
       *可被验牌人的座位集合
       * </pre>
       */
      public int getYanPaiPos(int index) {
        return yanPaiPos_.get(index);
      }
      /**
       * <code>repeated sint32 yanPaiPos = 4;</code>
       *
       * <pre>
       *可被验牌人的座位集合
       * </pre>
       */
      public Builder setYanPaiPos(
          int index, int value) {
        ensureYanPaiPosIsMutable();
        yanPaiPos_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 yanPaiPos = 4;</code>
       *
       * <pre>
       *可被验牌人的座位集合
       * </pre>
       */
      public Builder addYanPaiPos(int value) {
        ensureYanPaiPosIsMutable();
        yanPaiPos_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 yanPaiPos = 4;</code>
       *
       * <pre>
       *可被验牌人的座位集合
       * </pre>
       */
      public Builder addAllYanPaiPos(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureYanPaiPosIsMutable();
        super.addAll(values, yanPaiPos_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 yanPaiPos = 4;</code>
       *
       * <pre>
       *可被验牌人的座位集合
       * </pre>
       */
      public Builder clearYanPaiPos() {
        yanPaiPos_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional sint32 seq = 100;
      private int seq_ ;
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public boolean hasSeq() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public int getSeq() {
        return seq_;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public Builder setSeq(int value) {
        bitField0_ |= 0x00000010;
        seq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 seq = 100;</code>
       *
       * <pre>
       *序列号,调试用
       * </pre>
       */
      public Builder clearSeq() {
        bitField0_ = (bitField0_ & ~0x00000010);
        seq_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.jack.JACKGameOperPlayerActionNotify)
    }

    static {
      defaultInstance = new JACKGameOperPlayerActionNotify(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.jack.JACKGameOperPlayerActionNotify)
  }

  public interface JACKGameOperPlayerHuSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *胡牌玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *胡牌玩家位置
     * </pre>
     */
    int getPosition();

    // repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;
    /**
     * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    java.util.List<packet.jack.JACK.JACKGameOperPlayerSettle> 
        getDetailList();
    /**
     * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    packet.jack.JACK.JACKGameOperPlayerSettle getDetail(int index);
    /**
     * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    int getDetailCount();
    /**
     * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    java.util.List<? extends packet.jack.JACK.JACKGameOperPlayerSettleOrBuilder> 
        getDetailOrBuilderList();
    /**
     * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    packet.jack.JACK.JACKGameOperPlayerSettleOrBuilder getDetailOrBuilder(
        int index);

    // optional sint32 juNum = 3;
    /**
     * <code>optional sint32 juNum = 3;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    boolean hasJuNum();
    /**
     * <code>optional sint32 juNum = 3;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    int getJuNum();
  }
  /**
   * Protobuf type {@code packet.jack.JACKGameOperPlayerHuSyn}
   */
  public static final class JACKGameOperPlayerHuSyn extends
      com.google.protobuf.GeneratedMessage
      implements JACKGameOperPlayerHuSynOrBuilder {
    // Use JACKGameOperPlayerHuSyn.newBuilder() to construct.
    private JACKGameOperPlayerHuSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JACKGameOperPlayerHuSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final JACKGameOperPlayerHuSyn defaultInstance;
    public static JACKGameOperPlayerHuSyn getDefaultInstance() {
      return defaultInstance;
    }

    public JACKGameOperPlayerHuSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private JACKGameOperPlayerHuSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                detail_ = new java.util.ArrayList<packet.jack.JACK.JACKGameOperPlayerSettle>();
                mutable_bitField0_ |= 0x00000002;
              }
              detail_.add(input.readMessage(packet.jack.JACK.JACKGameOperPlayerSettle.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              juNum_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          detail_ = java.util.Collections.unmodifiableList(detail_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerHuSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerHuSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.jack.JACK.JACKGameOperPlayerHuSyn.class, packet.jack.JACK.JACKGameOperPlayerHuSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<JACKGameOperPlayerHuSyn> PARSER =
        new com.google.protobuf.AbstractParser<JACKGameOperPlayerHuSyn>() {
      public JACKGameOperPlayerHuSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JACKGameOperPlayerHuSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<JACKGameOperPlayerHuSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *胡牌玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *胡牌玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;
    public static final int DETAIL_FIELD_NUMBER = 2;
    private java.util.List<packet.jack.JACK.JACKGameOperPlayerSettle> detail_;
    /**
     * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    public java.util.List<packet.jack.JACK.JACKGameOperPlayerSettle> getDetailList() {
      return detail_;
    }
    /**
     * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    public java.util.List<? extends packet.jack.JACK.JACKGameOperPlayerSettleOrBuilder> 
        getDetailOrBuilderList() {
      return detail_;
    }
    /**
     * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    public int getDetailCount() {
      return detail_.size();
    }
    /**
     * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    public packet.jack.JACK.JACKGameOperPlayerSettle getDetail(int index) {
      return detail_.get(index);
    }
    /**
     * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
     *
     * <pre>
     *每个玩家的情况
     * </pre>
     */
    public packet.jack.JACK.JACKGameOperPlayerSettleOrBuilder getDetailOrBuilder(
        int index) {
      return detail_.get(index);
    }

    // optional sint32 juNum = 3;
    public static final int JUNUM_FIELD_NUMBER = 3;
    private int juNum_;
    /**
     * <code>optional sint32 juNum = 3;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    public boolean hasJuNum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 juNum = 3;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    public int getJuNum() {
      return juNum_;
    }

    private void initFields() {
      position_ = 0;
      detail_ = java.util.Collections.emptyList();
      juNum_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getDetailCount(); i++) {
        if (!getDetail(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      for (int i = 0; i < detail_.size(); i++) {
        output.writeMessage(2, detail_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(3, juNum_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      for (int i = 0; i < detail_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, detail_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, juNum_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.jack.JACK.JACKGameOperPlayerHuSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperPlayerHuSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerHuSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperPlayerHuSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerHuSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPlayerHuSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerHuSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPlayerHuSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerHuSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPlayerHuSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.jack.JACK.JACKGameOperPlayerHuSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.jack.JACKGameOperPlayerHuSyn}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.jack.JACK.JACKGameOperPlayerHuSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerHuSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerHuSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.jack.JACK.JACKGameOperPlayerHuSyn.class, packet.jack.JACK.JACKGameOperPlayerHuSyn.Builder.class);
      }

      // Construct using packet.jack.JACK.JACKGameOperPlayerHuSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDetailFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (detailBuilder_ == null) {
          detail_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          detailBuilder_.clear();
        }
        juNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerHuSyn_descriptor;
      }

      public packet.jack.JACK.JACKGameOperPlayerHuSyn getDefaultInstanceForType() {
        return packet.jack.JACK.JACKGameOperPlayerHuSyn.getDefaultInstance();
      }

      public packet.jack.JACK.JACKGameOperPlayerHuSyn build() {
        packet.jack.JACK.JACKGameOperPlayerHuSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.jack.JACK.JACKGameOperPlayerHuSyn buildPartial() {
        packet.jack.JACK.JACKGameOperPlayerHuSyn result = new packet.jack.JACK.JACKGameOperPlayerHuSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (detailBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            detail_ = java.util.Collections.unmodifiableList(detail_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.detail_ = detail_;
        } else {
          result.detail_ = detailBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.juNum_ = juNum_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.jack.JACK.JACKGameOperPlayerHuSyn) {
          return mergeFrom((packet.jack.JACK.JACKGameOperPlayerHuSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.jack.JACK.JACKGameOperPlayerHuSyn other) {
        if (other == packet.jack.JACK.JACKGameOperPlayerHuSyn.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (detailBuilder_ == null) {
          if (!other.detail_.isEmpty()) {
            if (detail_.isEmpty()) {
              detail_ = other.detail_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureDetailIsMutable();
              detail_.addAll(other.detail_);
            }
            onChanged();
          }
        } else {
          if (!other.detail_.isEmpty()) {
            if (detailBuilder_.isEmpty()) {
              detailBuilder_.dispose();
              detailBuilder_ = null;
              detail_ = other.detail_;
              bitField0_ = (bitField0_ & ~0x00000002);
              detailBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDetailFieldBuilder() : null;
            } else {
              detailBuilder_.addAllMessages(other.detail_);
            }
          }
        }
        if (other.hasJuNum()) {
          setJuNum(other.getJuNum());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        for (int i = 0; i < getDetailCount(); i++) {
          if (!getDetail(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.jack.JACK.JACKGameOperPlayerHuSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.jack.JACK.JACKGameOperPlayerHuSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *胡牌玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *胡牌玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *胡牌玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *胡牌玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;
      private java.util.List<packet.jack.JACK.JACKGameOperPlayerSettle> detail_ =
        java.util.Collections.emptyList();
      private void ensureDetailIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          detail_ = new java.util.ArrayList<packet.jack.JACK.JACKGameOperPlayerSettle>(detail_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.jack.JACK.JACKGameOperPlayerSettle, packet.jack.JACK.JACKGameOperPlayerSettle.Builder, packet.jack.JACK.JACKGameOperPlayerSettleOrBuilder> detailBuilder_;

      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public java.util.List<packet.jack.JACK.JACKGameOperPlayerSettle> getDetailList() {
        if (detailBuilder_ == null) {
          return java.util.Collections.unmodifiableList(detail_);
        } else {
          return detailBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public int getDetailCount() {
        if (detailBuilder_ == null) {
          return detail_.size();
        } else {
          return detailBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public packet.jack.JACK.JACKGameOperPlayerSettle getDetail(int index) {
        if (detailBuilder_ == null) {
          return detail_.get(index);
        } else {
          return detailBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder setDetail(
          int index, packet.jack.JACK.JACKGameOperPlayerSettle value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.set(index, value);
          onChanged();
        } else {
          detailBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder setDetail(
          int index, packet.jack.JACK.JACKGameOperPlayerSettle.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.set(index, builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder addDetail(packet.jack.JACK.JACKGameOperPlayerSettle value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.add(value);
          onChanged();
        } else {
          detailBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder addDetail(
          int index, packet.jack.JACK.JACKGameOperPlayerSettle value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.add(index, value);
          onChanged();
        } else {
          detailBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder addDetail(
          packet.jack.JACK.JACKGameOperPlayerSettle.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.add(builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder addDetail(
          int index, packet.jack.JACK.JACKGameOperPlayerSettle.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.add(index, builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder addAllDetail(
          java.lang.Iterable<? extends packet.jack.JACK.JACKGameOperPlayerSettle> values) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          super.addAll(values, detail_);
          onChanged();
        } else {
          detailBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder clearDetail() {
        if (detailBuilder_ == null) {
          detail_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          detailBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public Builder removeDetail(int index) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.remove(index);
          onChanged();
        } else {
          detailBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public packet.jack.JACK.JACKGameOperPlayerSettle.Builder getDetailBuilder(
          int index) {
        return getDetailFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public packet.jack.JACK.JACKGameOperPlayerSettleOrBuilder getDetailOrBuilder(
          int index) {
        if (detailBuilder_ == null) {
          return detail_.get(index);  } else {
          return detailBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public java.util.List<? extends packet.jack.JACK.JACKGameOperPlayerSettleOrBuilder> 
           getDetailOrBuilderList() {
        if (detailBuilder_ != null) {
          return detailBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(detail_);
        }
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public packet.jack.JACK.JACKGameOperPlayerSettle.Builder addDetailBuilder() {
        return getDetailFieldBuilder().addBuilder(
            packet.jack.JACK.JACKGameOperPlayerSettle.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public packet.jack.JACK.JACKGameOperPlayerSettle.Builder addDetailBuilder(
          int index) {
        return getDetailFieldBuilder().addBuilder(
            index, packet.jack.JACK.JACKGameOperPlayerSettle.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.jack.JACKGameOperPlayerSettle detail = 2;</code>
       *
       * <pre>
       *每个玩家的情况
       * </pre>
       */
      public java.util.List<packet.jack.JACK.JACKGameOperPlayerSettle.Builder> 
           getDetailBuilderList() {
        return getDetailFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.jack.JACK.JACKGameOperPlayerSettle, packet.jack.JACK.JACKGameOperPlayerSettle.Builder, packet.jack.JACK.JACKGameOperPlayerSettleOrBuilder> 
          getDetailFieldBuilder() {
        if (detailBuilder_ == null) {
          detailBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.jack.JACK.JACKGameOperPlayerSettle, packet.jack.JACK.JACKGameOperPlayerSettle.Builder, packet.jack.JACK.JACKGameOperPlayerSettleOrBuilder>(
                  detail_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          detail_ = null;
        }
        return detailBuilder_;
      }

      // optional sint32 juNum = 3;
      private int juNum_ ;
      /**
       * <code>optional sint32 juNum = 3;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public boolean hasJuNum() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 juNum = 3;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public int getJuNum() {
        return juNum_;
      }
      /**
       * <code>optional sint32 juNum = 3;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public Builder setJuNum(int value) {
        bitField0_ |= 0x00000004;
        juNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 juNum = 3;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public Builder clearJuNum() {
        bitField0_ = (bitField0_ & ~0x00000004);
        juNum_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.jack.JACKGameOperPlayerHuSyn)
    }

    static {
      defaultInstance = new JACKGameOperPlayerHuSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.jack.JACKGameOperPlayerHuSyn)
  }

  public interface JACKGameOperPlayerSettleOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 position = 1;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    int getPosition();

    // optional sint32 playerId = 2;
    /**
     * <code>optional sint32 playerId = 2;</code>
     *
     * <pre>
     *ID
     * </pre>
     */
    boolean hasPlayerId();
    /**
     * <code>optional sint32 playerId = 2;</code>
     *
     * <pre>
     *ID
     * </pre>
     */
    int getPlayerId();

    // optional string playerName = 3;
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    boolean hasPlayerName();
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    java.lang.String getPlayerName();
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    com.google.protobuf.ByteString
        getPlayerNameBytes();

    // repeated sint32 handcard = 4;
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandcardList();
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    int getHandcardCount();
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    int getHandcard(int index);

    // optional sint32 lastScore = 5;
    /**
     * <code>optional sint32 lastScore = 5;</code>
     *
     * <pre>
     *上局得分
     * </pre>
     */
    boolean hasLastScore();
    /**
     * <code>optional sint32 lastScore = 5;</code>
     *
     * <pre>
     *上局得分
     * </pre>
     */
    int getLastScore();

    // optional sint32 score = 6;
    /**
     * <code>optional sint32 score = 6;</code>
     *
     * <pre>
     *本局得分
     * </pre>
     */
    boolean hasScore();
    /**
     * <code>optional sint32 score = 6;</code>
     *
     * <pre>
     *本局得分
     * </pre>
     */
    int getScore();

    // optional sint32 allSocre = 7;
    /**
     * <code>optional sint32 allSocre = 7;</code>
     *
     * <pre>
     *总分数
     * </pre>
     */
    boolean hasAllSocre();
    /**
     * <code>optional sint32 allSocre = 7;</code>
     *
     * <pre>
     *总分数
     * </pre>
     */
    int getAllSocre();

    // optional bool isZanLi = 8;
    /**
     * <code>optional bool isZanLi = 8;</code>
     *
     * <pre>
     *是否暂离
     * </pre>
     */
    boolean hasIsZanLi();
    /**
     * <code>optional bool isZanLi = 8;</code>
     *
     * <pre>
     *是否暂离
     * </pre>
     */
    boolean getIsZanLi();

    // optional sint32 cardNum = 9;
    /**
     * <code>optional sint32 cardNum = 9;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    boolean hasCardNum();
    /**
     * <code>optional sint32 cardNum = 9;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    int getCardNum();

    // optional sint32 cardType = 10;
    /**
     * <code>optional sint32 cardType = 10;</code>
     *
     * <pre>
     *牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional sint32 cardType = 10;</code>
     *
     * <pre>
     *牌类型
     * </pre>
     */
    int getCardType();

    // optional sint32 isBanker = 11;
    /**
     * <code>optional sint32 isBanker = 11;</code>
     *
     * <pre>
     *是否是庄家
     * </pre>
     */
    boolean hasIsBanker();
    /**
     * <code>optional sint32 isBanker = 11;</code>
     *
     * <pre>
     *是否是庄家
     * </pre>
     */
    int getIsBanker();

    // optional sint32 result = 12;
    /**
     * <code>optional sint32 result = 12;</code>
     *
     * <pre>
     * 1 win 2 lose 3 even
     * </pre>
     */
    boolean hasResult();
    /**
     * <code>optional sint32 result = 12;</code>
     *
     * <pre>
     * 1 win 2 lose 3 even
     * </pre>
     */
    int getResult();
  }
  /**
   * Protobuf type {@code packet.jack.JACKGameOperPlayerSettle}
   */
  public static final class JACKGameOperPlayerSettle extends
      com.google.protobuf.GeneratedMessage
      implements JACKGameOperPlayerSettleOrBuilder {
    // Use JACKGameOperPlayerSettle.newBuilder() to construct.
    private JACKGameOperPlayerSettle(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JACKGameOperPlayerSettle(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final JACKGameOperPlayerSettle defaultInstance;
    public static JACKGameOperPlayerSettle getDefaultInstance() {
      return defaultInstance;
    }

    public JACKGameOperPlayerSettle getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private JACKGameOperPlayerSettle(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              playerId_ = input.readSInt32();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              playerName_ = input.readBytes();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                handcard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              handcard_.add(input.readSInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                handcard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                handcard_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              lastScore_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              score_ = input.readSInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              allSocre_ = input.readSInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              isZanLi_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000080;
              cardNum_ = input.readSInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              cardType_ = input.readSInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000200;
              isBanker_ = input.readSInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000400;
              result_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          handcard_ = java.util.Collections.unmodifiableList(handcard_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerSettle_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerSettle_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.jack.JACK.JACKGameOperPlayerSettle.class, packet.jack.JACK.JACKGameOperPlayerSettle.Builder.class);
    }

    public static com.google.protobuf.Parser<JACKGameOperPlayerSettle> PARSER =
        new com.google.protobuf.AbstractParser<JACKGameOperPlayerSettle>() {
      public JACKGameOperPlayerSettle parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JACKGameOperPlayerSettle(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<JACKGameOperPlayerSettle> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private int position_;
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 position = 1;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // optional sint32 playerId = 2;
    public static final int PLAYERID_FIELD_NUMBER = 2;
    private int playerId_;
    /**
     * <code>optional sint32 playerId = 2;</code>
     *
     * <pre>
     *ID
     * </pre>
     */
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 playerId = 2;</code>
     *
     * <pre>
     *ID
     * </pre>
     */
    public int getPlayerId() {
      return playerId_;
    }

    // optional string playerName = 3;
    public static final int PLAYERNAME_FIELD_NUMBER = 3;
    private java.lang.Object playerName_;
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    public boolean hasPlayerName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    public java.lang.String getPlayerName() {
      java.lang.Object ref = playerName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          playerName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string playerName = 3;</code>
     *
     * <pre>
     *昵称
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPlayerNameBytes() {
      java.lang.Object ref = playerName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        playerName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated sint32 handcard = 4;
    public static final int HANDCARD_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> handcard_;
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandcardList() {
      return handcard_;
    }
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    public int getHandcardCount() {
      return handcard_.size();
    }
    /**
     * <code>repeated sint32 handcard = 4;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    public int getHandcard(int index) {
      return handcard_.get(index);
    }

    // optional sint32 lastScore = 5;
    public static final int LASTSCORE_FIELD_NUMBER = 5;
    private int lastScore_;
    /**
     * <code>optional sint32 lastScore = 5;</code>
     *
     * <pre>
     *上局得分
     * </pre>
     */
    public boolean hasLastScore() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 lastScore = 5;</code>
     *
     * <pre>
     *上局得分
     * </pre>
     */
    public int getLastScore() {
      return lastScore_;
    }

    // optional sint32 score = 6;
    public static final int SCORE_FIELD_NUMBER = 6;
    private int score_;
    /**
     * <code>optional sint32 score = 6;</code>
     *
     * <pre>
     *本局得分
     * </pre>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 score = 6;</code>
     *
     * <pre>
     *本局得分
     * </pre>
     */
    public int getScore() {
      return score_;
    }

    // optional sint32 allSocre = 7;
    public static final int ALLSOCRE_FIELD_NUMBER = 7;
    private int allSocre_;
    /**
     * <code>optional sint32 allSocre = 7;</code>
     *
     * <pre>
     *总分数
     * </pre>
     */
    public boolean hasAllSocre() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 allSocre = 7;</code>
     *
     * <pre>
     *总分数
     * </pre>
     */
    public int getAllSocre() {
      return allSocre_;
    }

    // optional bool isZanLi = 8;
    public static final int ISZANLI_FIELD_NUMBER = 8;
    private boolean isZanLi_;
    /**
     * <code>optional bool isZanLi = 8;</code>
     *
     * <pre>
     *是否暂离
     * </pre>
     */
    public boolean hasIsZanLi() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool isZanLi = 8;</code>
     *
     * <pre>
     *是否暂离
     * </pre>
     */
    public boolean getIsZanLi() {
      return isZanLi_;
    }

    // optional sint32 cardNum = 9;
    public static final int CARDNUM_FIELD_NUMBER = 9;
    private int cardNum_;
    /**
     * <code>optional sint32 cardNum = 9;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    public boolean hasCardNum() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional sint32 cardNum = 9;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    public int getCardNum() {
      return cardNum_;
    }

    // optional sint32 cardType = 10;
    public static final int CARDTYPE_FIELD_NUMBER = 10;
    private int cardType_;
    /**
     * <code>optional sint32 cardType = 10;</code>
     *
     * <pre>
     *牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional sint32 cardType = 10;</code>
     *
     * <pre>
     *牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional sint32 isBanker = 11;
    public static final int ISBANKER_FIELD_NUMBER = 11;
    private int isBanker_;
    /**
     * <code>optional sint32 isBanker = 11;</code>
     *
     * <pre>
     *是否是庄家
     * </pre>
     */
    public boolean hasIsBanker() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional sint32 isBanker = 11;</code>
     *
     * <pre>
     *是否是庄家
     * </pre>
     */
    public int getIsBanker() {
      return isBanker_;
    }

    // optional sint32 result = 12;
    public static final int RESULT_FIELD_NUMBER = 12;
    private int result_;
    /**
     * <code>optional sint32 result = 12;</code>
     *
     * <pre>
     * 1 win 2 lose 3 even
     * </pre>
     */
    public boolean hasResult() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional sint32 result = 12;</code>
     *
     * <pre>
     * 1 win 2 lose 3 even
     * </pre>
     */
    public int getResult() {
      return result_;
    }

    private void initFields() {
      position_ = 0;
      playerId_ = 0;
      playerName_ = "";
      handcard_ = java.util.Collections.emptyList();
      lastScore_ = 0;
      score_ = 0;
      allSocre_ = 0;
      isZanLi_ = false;
      cardNum_ = 0;
      cardType_ = 0;
      isBanker_ = 0;
      result_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, playerId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getPlayerNameBytes());
      }
      for (int i = 0; i < handcard_.size(); i++) {
        output.writeSInt32(4, handcard_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(5, lastScore_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(6, score_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(7, allSocre_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(8, isZanLi_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeSInt32(9, cardNum_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeSInt32(10, cardType_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeSInt32(11, isBanker_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeSInt32(12, result_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, playerId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getPlayerNameBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handcard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(handcard_.get(i));
        }
        size += dataSize;
        size += 1 * getHandcardList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, lastScore_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, score_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, allSocre_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, isZanLi_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(9, cardNum_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(10, cardType_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(11, isBanker_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(12, result_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.jack.JACK.JACKGameOperPlayerSettle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperPlayerSettle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerSettle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperPlayerSettle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerSettle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPlayerSettle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerSettle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPlayerSettle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperPlayerSettle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperPlayerSettle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.jack.JACK.JACKGameOperPlayerSettle prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.jack.JACKGameOperPlayerSettle}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.jack.JACK.JACKGameOperPlayerSettleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerSettle_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerSettle_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.jack.JACK.JACKGameOperPlayerSettle.class, packet.jack.JACK.JACKGameOperPlayerSettle.Builder.class);
      }

      // Construct using packet.jack.JACK.JACKGameOperPlayerSettle.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        playerId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        playerName_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        handcard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        lastScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        score_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        allSocre_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        isZanLi_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        cardNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        isBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        result_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperPlayerSettle_descriptor;
      }

      public packet.jack.JACK.JACKGameOperPlayerSettle getDefaultInstanceForType() {
        return packet.jack.JACK.JACKGameOperPlayerSettle.getDefaultInstance();
      }

      public packet.jack.JACK.JACKGameOperPlayerSettle build() {
        packet.jack.JACK.JACKGameOperPlayerSettle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.jack.JACK.JACKGameOperPlayerSettle buildPartial() {
        packet.jack.JACK.JACKGameOperPlayerSettle result = new packet.jack.JACK.JACKGameOperPlayerSettle(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.playerId_ = playerId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.playerName_ = playerName_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          handcard_ = java.util.Collections.unmodifiableList(handcard_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.handcard_ = handcard_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.lastScore_ = lastScore_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.allSocre_ = allSocre_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isZanLi_ = isZanLi_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.cardNum_ = cardNum_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isBanker_ = isBanker_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        result.result_ = result_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.jack.JACK.JACKGameOperPlayerSettle) {
          return mergeFrom((packet.jack.JACK.JACKGameOperPlayerSettle)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.jack.JACK.JACKGameOperPlayerSettle other) {
        if (other == packet.jack.JACK.JACKGameOperPlayerSettle.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasPlayerId()) {
          setPlayerId(other.getPlayerId());
        }
        if (other.hasPlayerName()) {
          bitField0_ |= 0x00000004;
          playerName_ = other.playerName_;
          onChanged();
        }
        if (!other.handcard_.isEmpty()) {
          if (handcard_.isEmpty()) {
            handcard_ = other.handcard_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureHandcardIsMutable();
            handcard_.addAll(other.handcard_);
          }
          onChanged();
        }
        if (other.hasLastScore()) {
          setLastScore(other.getLastScore());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (other.hasAllSocre()) {
          setAllSocre(other.getAllSocre());
        }
        if (other.hasIsZanLi()) {
          setIsZanLi(other.getIsZanLi());
        }
        if (other.hasCardNum()) {
          setCardNum(other.getCardNum());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasIsBanker()) {
          setIsBanker(other.getIsBanker());
        }
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.jack.JACK.JACKGameOperPlayerSettle parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.jack.JACK.JACKGameOperPlayerSettle) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 position = 1;
      private int position_ ;
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 position = 1;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 playerId = 2;
      private int playerId_ ;
      /**
       * <code>optional sint32 playerId = 2;</code>
       *
       * <pre>
       *ID
       * </pre>
       */
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 playerId = 2;</code>
       *
       * <pre>
       *ID
       * </pre>
       */
      public int getPlayerId() {
        return playerId_;
      }
      /**
       * <code>optional sint32 playerId = 2;</code>
       *
       * <pre>
       *ID
       * </pre>
       */
      public Builder setPlayerId(int value) {
        bitField0_ |= 0x00000002;
        playerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 playerId = 2;</code>
       *
       * <pre>
       *ID
       * </pre>
       */
      public Builder clearPlayerId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        playerId_ = 0;
        onChanged();
        return this;
      }

      // optional string playerName = 3;
      private java.lang.Object playerName_ = "";
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public boolean hasPlayerName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public java.lang.String getPlayerName() {
        java.lang.Object ref = playerName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          playerName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPlayerNameBytes() {
        java.lang.Object ref = playerName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          playerName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public Builder setPlayerName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        playerName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public Builder clearPlayerName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        playerName_ = getDefaultInstance().getPlayerName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string playerName = 3;</code>
       *
       * <pre>
       *昵称
       * </pre>
       */
      public Builder setPlayerNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        playerName_ = value;
        onChanged();
        return this;
      }

      // repeated sint32 handcard = 4;
      private java.util.List<java.lang.Integer> handcard_ = java.util.Collections.emptyList();
      private void ensureHandcardIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          handcard_ = new java.util.ArrayList<java.lang.Integer>(handcard_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandcardList() {
        return java.util.Collections.unmodifiableList(handcard_);
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public int getHandcardCount() {
        return handcard_.size();
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public int getHandcard(int index) {
        return handcard_.get(index);
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder setHandcard(
          int index, int value) {
        ensureHandcardIsMutable();
        handcard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder addHandcard(int value) {
        ensureHandcardIsMutable();
        handcard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder addAllHandcard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandcardIsMutable();
        super.addAll(values, handcard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 handcard = 4;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder clearHandcard() {
        handcard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional sint32 lastScore = 5;
      private int lastScore_ ;
      /**
       * <code>optional sint32 lastScore = 5;</code>
       *
       * <pre>
       *上局得分
       * </pre>
       */
      public boolean hasLastScore() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 lastScore = 5;</code>
       *
       * <pre>
       *上局得分
       * </pre>
       */
      public int getLastScore() {
        return lastScore_;
      }
      /**
       * <code>optional sint32 lastScore = 5;</code>
       *
       * <pre>
       *上局得分
       * </pre>
       */
      public Builder setLastScore(int value) {
        bitField0_ |= 0x00000010;
        lastScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 lastScore = 5;</code>
       *
       * <pre>
       *上局得分
       * </pre>
       */
      public Builder clearLastScore() {
        bitField0_ = (bitField0_ & ~0x00000010);
        lastScore_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 score = 6;
      private int score_ ;
      /**
       * <code>optional sint32 score = 6;</code>
       *
       * <pre>
       *本局得分
       * </pre>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 score = 6;</code>
       *
       * <pre>
       *本局得分
       * </pre>
       */
      public int getScore() {
        return score_;
      }
      /**
       * <code>optional sint32 score = 6;</code>
       *
       * <pre>
       *本局得分
       * </pre>
       */
      public Builder setScore(int value) {
        bitField0_ |= 0x00000020;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 score = 6;</code>
       *
       * <pre>
       *本局得分
       * </pre>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000020);
        score_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 allSocre = 7;
      private int allSocre_ ;
      /**
       * <code>optional sint32 allSocre = 7;</code>
       *
       * <pre>
       *总分数
       * </pre>
       */
      public boolean hasAllSocre() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional sint32 allSocre = 7;</code>
       *
       * <pre>
       *总分数
       * </pre>
       */
      public int getAllSocre() {
        return allSocre_;
      }
      /**
       * <code>optional sint32 allSocre = 7;</code>
       *
       * <pre>
       *总分数
       * </pre>
       */
      public Builder setAllSocre(int value) {
        bitField0_ |= 0x00000040;
        allSocre_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 allSocre = 7;</code>
       *
       * <pre>
       *总分数
       * </pre>
       */
      public Builder clearAllSocre() {
        bitField0_ = (bitField0_ & ~0x00000040);
        allSocre_ = 0;
        onChanged();
        return this;
      }

      // optional bool isZanLi = 8;
      private boolean isZanLi_ ;
      /**
       * <code>optional bool isZanLi = 8;</code>
       *
       * <pre>
       *是否暂离
       * </pre>
       */
      public boolean hasIsZanLi() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool isZanLi = 8;</code>
       *
       * <pre>
       *是否暂离
       * </pre>
       */
      public boolean getIsZanLi() {
        return isZanLi_;
      }
      /**
       * <code>optional bool isZanLi = 8;</code>
       *
       * <pre>
       *是否暂离
       * </pre>
       */
      public Builder setIsZanLi(boolean value) {
        bitField0_ |= 0x00000080;
        isZanLi_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool isZanLi = 8;</code>
       *
       * <pre>
       *是否暂离
       * </pre>
       */
      public Builder clearIsZanLi() {
        bitField0_ = (bitField0_ & ~0x00000080);
        isZanLi_ = false;
        onChanged();
        return this;
      }

      // optional sint32 cardNum = 9;
      private int cardNum_ ;
      /**
       * <code>optional sint32 cardNum = 9;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public boolean hasCardNum() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional sint32 cardNum = 9;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public int getCardNum() {
        return cardNum_;
      }
      /**
       * <code>optional sint32 cardNum = 9;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public Builder setCardNum(int value) {
        bitField0_ |= 0x00000100;
        cardNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 cardNum = 9;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public Builder clearCardNum() {
        bitField0_ = (bitField0_ & ~0x00000100);
        cardNum_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 cardType = 10;
      private int cardType_ ;
      /**
       * <code>optional sint32 cardType = 10;</code>
       *
       * <pre>
       *牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional sint32 cardType = 10;</code>
       *
       * <pre>
       *牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional sint32 cardType = 10;</code>
       *
       * <pre>
       *牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000200;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 cardType = 10;</code>
       *
       * <pre>
       *牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000200);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 isBanker = 11;
      private int isBanker_ ;
      /**
       * <code>optional sint32 isBanker = 11;</code>
       *
       * <pre>
       *是否是庄家
       * </pre>
       */
      public boolean hasIsBanker() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional sint32 isBanker = 11;</code>
       *
       * <pre>
       *是否是庄家
       * </pre>
       */
      public int getIsBanker() {
        return isBanker_;
      }
      /**
       * <code>optional sint32 isBanker = 11;</code>
       *
       * <pre>
       *是否是庄家
       * </pre>
       */
      public Builder setIsBanker(int value) {
        bitField0_ |= 0x00000400;
        isBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 isBanker = 11;</code>
       *
       * <pre>
       *是否是庄家
       * </pre>
       */
      public Builder clearIsBanker() {
        bitField0_ = (bitField0_ & ~0x00000400);
        isBanker_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 result = 12;
      private int result_ ;
      /**
       * <code>optional sint32 result = 12;</code>
       *
       * <pre>
       * 1 win 2 lose 3 even
       * </pre>
       */
      public boolean hasResult() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional sint32 result = 12;</code>
       *
       * <pre>
       * 1 win 2 lose 3 even
       * </pre>
       */
      public int getResult() {
        return result_;
      }
      /**
       * <code>optional sint32 result = 12;</code>
       *
       * <pre>
       * 1 win 2 lose 3 even
       * </pre>
       */
      public Builder setResult(int value) {
        bitField0_ |= 0x00000800;
        result_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 result = 12;</code>
       *
       * <pre>
       * 1 win 2 lose 3 even
       * </pre>
       */
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000800);
        result_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.jack.JACKGameOperPlayerSettle)
    }

    static {
      defaultInstance = new JACKGameOperPlayerSettle(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.jack.JACKGameOperPlayerSettle)
  }

  public interface JACKGameOperFinalSettleSynOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional sint32 roomId = 1;
    /**
     * <code>optional sint32 roomId = 1;</code>
     *
     * <pre>
     *房间ID
     * </pre>
     */
    boolean hasRoomId();
    /**
     * <code>optional sint32 roomId = 1;</code>
     *
     * <pre>
     *房间ID
     * </pre>
     */
    int getRoomId();

    // optional sint32 innings = 2;
    /**
     * <code>optional sint32 innings = 2;</code>
     *
     * <pre>
     *总局数
     * </pre>
     */
    boolean hasInnings();
    /**
     * <code>optional sint32 innings = 2;</code>
     *
     * <pre>
     *总局数
     * </pre>
     */
    int getInnings();

    // repeated .packet.jack.JACKPlayerFinalResult detail = 3;
    /**
     * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    java.util.List<packet.jack.JACK.JACKPlayerFinalResult> 
        getDetailList();
    /**
     * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    packet.jack.JACK.JACKPlayerFinalResult getDetail(int index);
    /**
     * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    int getDetailCount();
    /**
     * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    java.util.List<? extends packet.jack.JACK.JACKPlayerFinalResultOrBuilder> 
        getDetailOrBuilderList();
    /**
     * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    packet.jack.JACK.JACKPlayerFinalResultOrBuilder getDetailOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code packet.jack.JACKGameOperFinalSettleSyn}
   */
  public static final class JACKGameOperFinalSettleSyn extends
      com.google.protobuf.GeneratedMessage
      implements JACKGameOperFinalSettleSynOrBuilder {
    // Use JACKGameOperFinalSettleSyn.newBuilder() to construct.
    private JACKGameOperFinalSettleSyn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JACKGameOperFinalSettleSyn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final JACKGameOperFinalSettleSyn defaultInstance;
    public static JACKGameOperFinalSettleSyn getDefaultInstance() {
      return defaultInstance;
    }

    public JACKGameOperFinalSettleSyn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private JACKGameOperFinalSettleSyn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              roomId_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              innings_ = input.readSInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                detail_ = new java.util.ArrayList<packet.jack.JACK.JACKPlayerFinalResult>();
                mutable_bitField0_ |= 0x00000004;
              }
              detail_.add(input.readMessage(packet.jack.JACK.JACKPlayerFinalResult.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          detail_ = java.util.Collections.unmodifiableList(detail_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperFinalSettleSyn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.jack.JACK.internal_static_packet_jack_JACKGameOperFinalSettleSyn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.jack.JACK.JACKGameOperFinalSettleSyn.class, packet.jack.JACK.JACKGameOperFinalSettleSyn.Builder.class);
    }

    public static com.google.protobuf.Parser<JACKGameOperFinalSettleSyn> PARSER =
        new com.google.protobuf.AbstractParser<JACKGameOperFinalSettleSyn>() {
      public JACKGameOperFinalSettleSyn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JACKGameOperFinalSettleSyn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<JACKGameOperFinalSettleSyn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional sint32 roomId = 1;
    public static final int ROOMID_FIELD_NUMBER = 1;
    private int roomId_;
    /**
     * <code>optional sint32 roomId = 1;</code>
     *
     * <pre>
     *房间ID
     * </pre>
     */
    public boolean hasRoomId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sint32 roomId = 1;</code>
     *
     * <pre>
     *房间ID
     * </pre>
     */
    public int getRoomId() {
      return roomId_;
    }

    // optional sint32 innings = 2;
    public static final int INNINGS_FIELD_NUMBER = 2;
    private int innings_;
    /**
     * <code>optional sint32 innings = 2;</code>
     *
     * <pre>
     *总局数
     * </pre>
     */
    public boolean hasInnings() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 innings = 2;</code>
     *
     * <pre>
     *总局数
     * </pre>
     */
    public int getInnings() {
      return innings_;
    }

    // repeated .packet.jack.JACKPlayerFinalResult detail = 3;
    public static final int DETAIL_FIELD_NUMBER = 3;
    private java.util.List<packet.jack.JACK.JACKPlayerFinalResult> detail_;
    /**
     * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    public java.util.List<packet.jack.JACK.JACKPlayerFinalResult> getDetailList() {
      return detail_;
    }
    /**
     * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    public java.util.List<? extends packet.jack.JACK.JACKPlayerFinalResultOrBuilder> 
        getDetailOrBuilderList() {
      return detail_;
    }
    /**
     * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    public int getDetailCount() {
      return detail_.size();
    }
    /**
     * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    public packet.jack.JACK.JACKPlayerFinalResult getDetail(int index) {
      return detail_.get(index);
    }
    /**
     * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
     *
     * <pre>
     *玩家信息
     * </pre>
     */
    public packet.jack.JACK.JACKPlayerFinalResultOrBuilder getDetailOrBuilder(
        int index) {
      return detail_.get(index);
    }

    private void initFields() {
      roomId_ = 0;
      innings_ = 0;
      detail_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, roomId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, innings_);
      }
      for (int i = 0; i < detail_.size(); i++) {
        output.writeMessage(3, detail_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, roomId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, innings_);
      }
      for (int i = 0; i < detail_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, detail_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.jack.JACK.JACKGameOperFinalSettleSyn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperFinalSettleSyn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperFinalSettleSyn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKGameOperFinalSettleSyn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperFinalSettleSyn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperFinalSettleSyn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperFinalSettleSyn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperFinalSettleSyn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKGameOperFinalSettleSyn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKGameOperFinalSettleSyn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.jack.JACK.JACKGameOperFinalSettleSyn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.jack.JACKGameOperFinalSettleSyn}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.jack.JACK.JACKGameOperFinalSettleSynOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperFinalSettleSyn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperFinalSettleSyn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.jack.JACK.JACKGameOperFinalSettleSyn.class, packet.jack.JACK.JACKGameOperFinalSettleSyn.Builder.class);
      }

      // Construct using packet.jack.JACK.JACKGameOperFinalSettleSyn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDetailFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        roomId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        innings_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (detailBuilder_ == null) {
          detail_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          detailBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.jack.JACK.internal_static_packet_jack_JACKGameOperFinalSettleSyn_descriptor;
      }

      public packet.jack.JACK.JACKGameOperFinalSettleSyn getDefaultInstanceForType() {
        return packet.jack.JACK.JACKGameOperFinalSettleSyn.getDefaultInstance();
      }

      public packet.jack.JACK.JACKGameOperFinalSettleSyn build() {
        packet.jack.JACK.JACKGameOperFinalSettleSyn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.jack.JACK.JACKGameOperFinalSettleSyn buildPartial() {
        packet.jack.JACK.JACKGameOperFinalSettleSyn result = new packet.jack.JACK.JACKGameOperFinalSettleSyn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.roomId_ = roomId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.innings_ = innings_;
        if (detailBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            detail_ = java.util.Collections.unmodifiableList(detail_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.detail_ = detail_;
        } else {
          result.detail_ = detailBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.jack.JACK.JACKGameOperFinalSettleSyn) {
          return mergeFrom((packet.jack.JACK.JACKGameOperFinalSettleSyn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.jack.JACK.JACKGameOperFinalSettleSyn other) {
        if (other == packet.jack.JACK.JACKGameOperFinalSettleSyn.getDefaultInstance()) return this;
        if (other.hasRoomId()) {
          setRoomId(other.getRoomId());
        }
        if (other.hasInnings()) {
          setInnings(other.getInnings());
        }
        if (detailBuilder_ == null) {
          if (!other.detail_.isEmpty()) {
            if (detail_.isEmpty()) {
              detail_ = other.detail_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureDetailIsMutable();
              detail_.addAll(other.detail_);
            }
            onChanged();
          }
        } else {
          if (!other.detail_.isEmpty()) {
            if (detailBuilder_.isEmpty()) {
              detailBuilder_.dispose();
              detailBuilder_ = null;
              detail_ = other.detail_;
              bitField0_ = (bitField0_ & ~0x00000004);
              detailBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDetailFieldBuilder() : null;
            } else {
              detailBuilder_.addAllMessages(other.detail_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.jack.JACK.JACKGameOperFinalSettleSyn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.jack.JACK.JACKGameOperFinalSettleSyn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional sint32 roomId = 1;
      private int roomId_ ;
      /**
       * <code>optional sint32 roomId = 1;</code>
       *
       * <pre>
       *房间ID
       * </pre>
       */
      public boolean hasRoomId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sint32 roomId = 1;</code>
       *
       * <pre>
       *房间ID
       * </pre>
       */
      public int getRoomId() {
        return roomId_;
      }
      /**
       * <code>optional sint32 roomId = 1;</code>
       *
       * <pre>
       *房间ID
       * </pre>
       */
      public Builder setRoomId(int value) {
        bitField0_ |= 0x00000001;
        roomId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 roomId = 1;</code>
       *
       * <pre>
       *房间ID
       * </pre>
       */
      public Builder clearRoomId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        roomId_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 innings = 2;
      private int innings_ ;
      /**
       * <code>optional sint32 innings = 2;</code>
       *
       * <pre>
       *总局数
       * </pre>
       */
      public boolean hasInnings() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 innings = 2;</code>
       *
       * <pre>
       *总局数
       * </pre>
       */
      public int getInnings() {
        return innings_;
      }
      /**
       * <code>optional sint32 innings = 2;</code>
       *
       * <pre>
       *总局数
       * </pre>
       */
      public Builder setInnings(int value) {
        bitField0_ |= 0x00000002;
        innings_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 innings = 2;</code>
       *
       * <pre>
       *总局数
       * </pre>
       */
      public Builder clearInnings() {
        bitField0_ = (bitField0_ & ~0x00000002);
        innings_ = 0;
        onChanged();
        return this;
      }

      // repeated .packet.jack.JACKPlayerFinalResult detail = 3;
      private java.util.List<packet.jack.JACK.JACKPlayerFinalResult> detail_ =
        java.util.Collections.emptyList();
      private void ensureDetailIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          detail_ = new java.util.ArrayList<packet.jack.JACK.JACKPlayerFinalResult>(detail_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          packet.jack.JACK.JACKPlayerFinalResult, packet.jack.JACK.JACKPlayerFinalResult.Builder, packet.jack.JACK.JACKPlayerFinalResultOrBuilder> detailBuilder_;

      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public java.util.List<packet.jack.JACK.JACKPlayerFinalResult> getDetailList() {
        if (detailBuilder_ == null) {
          return java.util.Collections.unmodifiableList(detail_);
        } else {
          return detailBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public int getDetailCount() {
        if (detailBuilder_ == null) {
          return detail_.size();
        } else {
          return detailBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public packet.jack.JACK.JACKPlayerFinalResult getDetail(int index) {
        if (detailBuilder_ == null) {
          return detail_.get(index);
        } else {
          return detailBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder setDetail(
          int index, packet.jack.JACK.JACKPlayerFinalResult value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.set(index, value);
          onChanged();
        } else {
          detailBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder setDetail(
          int index, packet.jack.JACK.JACKPlayerFinalResult.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.set(index, builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder addDetail(packet.jack.JACK.JACKPlayerFinalResult value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.add(value);
          onChanged();
        } else {
          detailBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder addDetail(
          int index, packet.jack.JACK.JACKPlayerFinalResult value) {
        if (detailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailIsMutable();
          detail_.add(index, value);
          onChanged();
        } else {
          detailBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder addDetail(
          packet.jack.JACK.JACKPlayerFinalResult.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.add(builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder addDetail(
          int index, packet.jack.JACK.JACKPlayerFinalResult.Builder builderForValue) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.add(index, builderForValue.build());
          onChanged();
        } else {
          detailBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder addAllDetail(
          java.lang.Iterable<? extends packet.jack.JACK.JACKPlayerFinalResult> values) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          super.addAll(values, detail_);
          onChanged();
        } else {
          detailBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder clearDetail() {
        if (detailBuilder_ == null) {
          detail_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          detailBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public Builder removeDetail(int index) {
        if (detailBuilder_ == null) {
          ensureDetailIsMutable();
          detail_.remove(index);
          onChanged();
        } else {
          detailBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public packet.jack.JACK.JACKPlayerFinalResult.Builder getDetailBuilder(
          int index) {
        return getDetailFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public packet.jack.JACK.JACKPlayerFinalResultOrBuilder getDetailOrBuilder(
          int index) {
        if (detailBuilder_ == null) {
          return detail_.get(index);  } else {
          return detailBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public java.util.List<? extends packet.jack.JACK.JACKPlayerFinalResultOrBuilder> 
           getDetailOrBuilderList() {
        if (detailBuilder_ != null) {
          return detailBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(detail_);
        }
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public packet.jack.JACK.JACKPlayerFinalResult.Builder addDetailBuilder() {
        return getDetailFieldBuilder().addBuilder(
            packet.jack.JACK.JACKPlayerFinalResult.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public packet.jack.JACK.JACKPlayerFinalResult.Builder addDetailBuilder(
          int index) {
        return getDetailFieldBuilder().addBuilder(
            index, packet.jack.JACK.JACKPlayerFinalResult.getDefaultInstance());
      }
      /**
       * <code>repeated .packet.jack.JACKPlayerFinalResult detail = 3;</code>
       *
       * <pre>
       *玩家信息
       * </pre>
       */
      public java.util.List<packet.jack.JACK.JACKPlayerFinalResult.Builder> 
           getDetailBuilderList() {
        return getDetailFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          packet.jack.JACK.JACKPlayerFinalResult, packet.jack.JACK.JACKPlayerFinalResult.Builder, packet.jack.JACK.JACKPlayerFinalResultOrBuilder> 
          getDetailFieldBuilder() {
        if (detailBuilder_ == null) {
          detailBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              packet.jack.JACK.JACKPlayerFinalResult, packet.jack.JACK.JACKPlayerFinalResult.Builder, packet.jack.JACK.JACKPlayerFinalResultOrBuilder>(
                  detail_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          detail_ = null;
        }
        return detailBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:packet.jack.JACKGameOperFinalSettleSyn)
    }

    static {
      defaultInstance = new JACKGameOperFinalSettleSyn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.jack.JACKGameOperFinalSettleSyn)
  }

  public interface JACKPlayerFinalResultOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional sint64 playerId = 1;
    /**
     * <code>optional sint64 playerId = 1;</code>
     *
     * <pre>
     *玩家ID
     * </pre>
     */
    boolean hasPlayerId();
    /**
     * <code>optional sint64 playerId = 1;</code>
     *
     * <pre>
     *玩家ID
     * </pre>
     */
    long getPlayerId();

    // optional string playerName = 2;
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    boolean hasPlayerName();
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    java.lang.String getPlayerName();
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    com.google.protobuf.ByteString
        getPlayerNameBytes();

    // optional sint32 position = 3;
    /**
     * <code>optional sint32 position = 3;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>optional sint32 position = 3;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    int getPosition();

    // optional string headImage = 4;
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    boolean hasHeadImage();
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    java.lang.String getHeadImage();
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    com.google.protobuf.ByteString
        getHeadImageBytes();

    // optional sint32 allScore = 5;
    /**
     * <code>optional sint32 allScore = 5;</code>
     *
     * <pre>
     *玩家总分
     * </pre>
     */
    boolean hasAllScore();
    /**
     * <code>optional sint32 allScore = 5;</code>
     *
     * <pre>
     *玩家总分
     * </pre>
     */
    int getAllScore();

    // optional sint32 maxScore = 6;
    /**
     * <code>optional sint32 maxScore = 6;</code>
     *
     * <pre>
     *单局最高得分
     * </pre>
     */
    boolean hasMaxScore();
    /**
     * <code>optional sint32 maxScore = 6;</code>
     *
     * <pre>
     *单局最高得分
     * </pre>
     */
    int getMaxScore();

    // optional sint32 maxCardType = 7;
    /**
     * <code>optional sint32 maxCardType = 7;</code>
     *
     * <pre>
     *最大牌型
     * </pre>
     */
    boolean hasMaxCardType();
    /**
     * <code>optional sint32 maxCardType = 7;</code>
     *
     * <pre>
     *最大牌型
     * </pre>
     */
    int getMaxCardType();

    // optional sint32 winNum = 8;
    /**
     * <code>optional sint32 winNum = 8;</code>
     *
     * <pre>
     *玩家赢的局数
     * </pre>
     */
    boolean hasWinNum();
    /**
     * <code>optional sint32 winNum = 8;</code>
     *
     * <pre>
     *玩家赢的局数
     * </pre>
     */
    int getWinNum();

    // optional sint32 loseNum = 9;
    /**
     * <code>optional sint32 loseNum = 9;</code>
     *
     * <pre>
     *玩家输的局数
     * </pre>
     */
    boolean hasLoseNum();
    /**
     * <code>optional sint32 loseNum = 9;</code>
     *
     * <pre>
     *玩家输的局数
     * </pre>
     */
    int getLoseNum();

    // optional bool roomOwner = 10;
    /**
     * <code>optional bool roomOwner = 10;</code>
     *
     * <pre>
     *是否是否房主
     * </pre>
     */
    boolean hasRoomOwner();
    /**
     * <code>optional bool roomOwner = 10;</code>
     *
     * <pre>
     *是否是否房主
     * </pre>
     */
    boolean getRoomOwner();
  }
  /**
   * Protobuf type {@code packet.jack.JACKPlayerFinalResult}
   */
  public static final class JACKPlayerFinalResult extends
      com.google.protobuf.GeneratedMessage
      implements JACKPlayerFinalResultOrBuilder {
    // Use JACKPlayerFinalResult.newBuilder() to construct.
    private JACKPlayerFinalResult(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JACKPlayerFinalResult(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final JACKPlayerFinalResult defaultInstance;
    public static JACKPlayerFinalResult getDefaultInstance() {
      return defaultInstance;
    }

    public JACKPlayerFinalResult getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private JACKPlayerFinalResult(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              playerId_ = input.readSInt64();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              playerName_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              position_ = input.readSInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              headImage_ = input.readBytes();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              allScore_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              maxScore_ = input.readSInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              maxCardType_ = input.readSInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              winNum_ = input.readSInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              loseNum_ = input.readSInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              roomOwner_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return packet.jack.JACK.internal_static_packet_jack_JACKPlayerFinalResult_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return packet.jack.JACK.internal_static_packet_jack_JACKPlayerFinalResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              packet.jack.JACK.JACKPlayerFinalResult.class, packet.jack.JACK.JACKPlayerFinalResult.Builder.class);
    }

    public static com.google.protobuf.Parser<JACKPlayerFinalResult> PARSER =
        new com.google.protobuf.AbstractParser<JACKPlayerFinalResult>() {
      public JACKPlayerFinalResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JACKPlayerFinalResult(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<JACKPlayerFinalResult> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional sint64 playerId = 1;
    public static final int PLAYERID_FIELD_NUMBER = 1;
    private long playerId_;
    /**
     * <code>optional sint64 playerId = 1;</code>
     *
     * <pre>
     *玩家ID
     * </pre>
     */
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sint64 playerId = 1;</code>
     *
     * <pre>
     *玩家ID
     * </pre>
     */
    public long getPlayerId() {
      return playerId_;
    }

    // optional string playerName = 2;
    public static final int PLAYERNAME_FIELD_NUMBER = 2;
    private java.lang.Object playerName_;
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    public boolean hasPlayerName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    public java.lang.String getPlayerName() {
      java.lang.Object ref = playerName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          playerName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string playerName = 2;</code>
     *
     * <pre>
     *玩家昵称
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPlayerNameBytes() {
      java.lang.Object ref = playerName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        playerName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional sint32 position = 3;
    public static final int POSITION_FIELD_NUMBER = 3;
    private int position_;
    /**
     * <code>optional sint32 position = 3;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 position = 3;</code>
     *
     * <pre>
     *玩家位置
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    // optional string headImage = 4;
    public static final int HEADIMAGE_FIELD_NUMBER = 4;
    private java.lang.Object headImage_;
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public boolean hasHeadImage() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public java.lang.String getHeadImage() {
      java.lang.Object ref = headImage_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          headImage_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string headImage = 4;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHeadImageBytes() {
      java.lang.Object ref = headImage_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        headImage_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional sint32 allScore = 5;
    public static final int ALLSCORE_FIELD_NUMBER = 5;
    private int allScore_;
    /**
     * <code>optional sint32 allScore = 5;</code>
     *
     * <pre>
     *玩家总分
     * </pre>
     */
    public boolean hasAllScore() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 allScore = 5;</code>
     *
     * <pre>
     *玩家总分
     * </pre>
     */
    public int getAllScore() {
      return allScore_;
    }

    // optional sint32 maxScore = 6;
    public static final int MAXSCORE_FIELD_NUMBER = 6;
    private int maxScore_;
    /**
     * <code>optional sint32 maxScore = 6;</code>
     *
     * <pre>
     *单局最高得分
     * </pre>
     */
    public boolean hasMaxScore() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 maxScore = 6;</code>
     *
     * <pre>
     *单局最高得分
     * </pre>
     */
    public int getMaxScore() {
      return maxScore_;
    }

    // optional sint32 maxCardType = 7;
    public static final int MAXCARDTYPE_FIELD_NUMBER = 7;
    private int maxCardType_;
    /**
     * <code>optional sint32 maxCardType = 7;</code>
     *
     * <pre>
     *最大牌型
     * </pre>
     */
    public boolean hasMaxCardType() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 maxCardType = 7;</code>
     *
     * <pre>
     *最大牌型
     * </pre>
     */
    public int getMaxCardType() {
      return maxCardType_;
    }

    // optional sint32 winNum = 8;
    public static final int WINNUM_FIELD_NUMBER = 8;
    private int winNum_;
    /**
     * <code>optional sint32 winNum = 8;</code>
     *
     * <pre>
     *玩家赢的局数
     * </pre>
     */
    public boolean hasWinNum() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional sint32 winNum = 8;</code>
     *
     * <pre>
     *玩家赢的局数
     * </pre>
     */
    public int getWinNum() {
      return winNum_;
    }

    // optional sint32 loseNum = 9;
    public static final int LOSENUM_FIELD_NUMBER = 9;
    private int loseNum_;
    /**
     * <code>optional sint32 loseNum = 9;</code>
     *
     * <pre>
     *玩家输的局数
     * </pre>
     */
    public boolean hasLoseNum() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional sint32 loseNum = 9;</code>
     *
     * <pre>
     *玩家输的局数
     * </pre>
     */
    public int getLoseNum() {
      return loseNum_;
    }

    // optional bool roomOwner = 10;
    public static final int ROOMOWNER_FIELD_NUMBER = 10;
    private boolean roomOwner_;
    /**
     * <code>optional bool roomOwner = 10;</code>
     *
     * <pre>
     *是否是否房主
     * </pre>
     */
    public boolean hasRoomOwner() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool roomOwner = 10;</code>
     *
     * <pre>
     *是否是否房主
     * </pre>
     */
    public boolean getRoomOwner() {
      return roomOwner_;
    }

    private void initFields() {
      playerId_ = 0L;
      playerName_ = "";
      position_ = 0;
      headImage_ = "";
      allScore_ = 0;
      maxScore_ = 0;
      maxCardType_ = 0;
      winNum_ = 0;
      loseNum_ = 0;
      roomOwner_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt64(1, playerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getPlayerNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, position_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getHeadImageBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, allScore_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(6, maxScore_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(7, maxCardType_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeSInt32(8, winNum_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeSInt32(9, loseNum_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(10, roomOwner_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(1, playerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getPlayerNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, position_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getHeadImageBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, allScore_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, maxScore_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, maxCardType_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(8, winNum_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(9, loseNum_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, roomOwner_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static packet.jack.JACK.JACKPlayerFinalResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKPlayerFinalResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKPlayerFinalResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static packet.jack.JACK.JACKPlayerFinalResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static packet.jack.JACK.JACKPlayerFinalResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKPlayerFinalResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKPlayerFinalResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static packet.jack.JACK.JACKPlayerFinalResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static packet.jack.JACK.JACKPlayerFinalResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static packet.jack.JACK.JACKPlayerFinalResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(packet.jack.JACK.JACKPlayerFinalResult prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code packet.jack.JACKPlayerFinalResult}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements packet.jack.JACK.JACKPlayerFinalResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return packet.jack.JACK.internal_static_packet_jack_JACKPlayerFinalResult_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return packet.jack.JACK.internal_static_packet_jack_JACKPlayerFinalResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                packet.jack.JACK.JACKPlayerFinalResult.class, packet.jack.JACK.JACKPlayerFinalResult.Builder.class);
      }

      // Construct using packet.jack.JACK.JACKPlayerFinalResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        playerId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        playerName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        headImage_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        allScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        maxScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        maxCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        winNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        loseNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        roomOwner_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return packet.jack.JACK.internal_static_packet_jack_JACKPlayerFinalResult_descriptor;
      }

      public packet.jack.JACK.JACKPlayerFinalResult getDefaultInstanceForType() {
        return packet.jack.JACK.JACKPlayerFinalResult.getDefaultInstance();
      }

      public packet.jack.JACK.JACKPlayerFinalResult build() {
        packet.jack.JACK.JACKPlayerFinalResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public packet.jack.JACK.JACKPlayerFinalResult buildPartial() {
        packet.jack.JACK.JACKPlayerFinalResult result = new packet.jack.JACK.JACKPlayerFinalResult(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.playerId_ = playerId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.playerName_ = playerName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.headImage_ = headImage_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.allScore_ = allScore_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.maxScore_ = maxScore_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.maxCardType_ = maxCardType_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.winNum_ = winNum_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.loseNum_ = loseNum_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.roomOwner_ = roomOwner_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof packet.jack.JACK.JACKPlayerFinalResult) {
          return mergeFrom((packet.jack.JACK.JACKPlayerFinalResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(packet.jack.JACK.JACKPlayerFinalResult other) {
        if (other == packet.jack.JACK.JACKPlayerFinalResult.getDefaultInstance()) return this;
        if (other.hasPlayerId()) {
          setPlayerId(other.getPlayerId());
        }
        if (other.hasPlayerName()) {
          bitField0_ |= 0x00000002;
          playerName_ = other.playerName_;
          onChanged();
        }
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasHeadImage()) {
          bitField0_ |= 0x00000008;
          headImage_ = other.headImage_;
          onChanged();
        }
        if (other.hasAllScore()) {
          setAllScore(other.getAllScore());
        }
        if (other.hasMaxScore()) {
          setMaxScore(other.getMaxScore());
        }
        if (other.hasMaxCardType()) {
          setMaxCardType(other.getMaxCardType());
        }
        if (other.hasWinNum()) {
          setWinNum(other.getWinNum());
        }
        if (other.hasLoseNum()) {
          setLoseNum(other.getLoseNum());
        }
        if (other.hasRoomOwner()) {
          setRoomOwner(other.getRoomOwner());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        packet.jack.JACK.JACKPlayerFinalResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (packet.jack.JACK.JACKPlayerFinalResult) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional sint64 playerId = 1;
      private long playerId_ ;
      /**
       * <code>optional sint64 playerId = 1;</code>
       *
       * <pre>
       *玩家ID
       * </pre>
       */
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sint64 playerId = 1;</code>
       *
       * <pre>
       *玩家ID
       * </pre>
       */
      public long getPlayerId() {
        return playerId_;
      }
      /**
       * <code>optional sint64 playerId = 1;</code>
       *
       * <pre>
       *玩家ID
       * </pre>
       */
      public Builder setPlayerId(long value) {
        bitField0_ |= 0x00000001;
        playerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint64 playerId = 1;</code>
       *
       * <pre>
       *玩家ID
       * </pre>
       */
      public Builder clearPlayerId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        playerId_ = 0L;
        onChanged();
        return this;
      }

      // optional string playerName = 2;
      private java.lang.Object playerName_ = "";
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public boolean hasPlayerName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public java.lang.String getPlayerName() {
        java.lang.Object ref = playerName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          playerName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPlayerNameBytes() {
        java.lang.Object ref = playerName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          playerName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public Builder setPlayerName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        playerName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public Builder clearPlayerName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        playerName_ = getDefaultInstance().getPlayerName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string playerName = 2;</code>
       *
       * <pre>
       *玩家昵称
       * </pre>
       */
      public Builder setPlayerNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        playerName_ = value;
        onChanged();
        return this;
      }

      // optional sint32 position = 3;
      private int position_ ;
      /**
       * <code>optional sint32 position = 3;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 position = 3;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>optional sint32 position = 3;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000004;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 position = 3;</code>
       *
       * <pre>
       *玩家位置
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000004);
        position_ = 0;
        onChanged();
        return this;
      }

      // optional string headImage = 4;
      private java.lang.Object headImage_ = "";
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public boolean hasHeadImage() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public java.lang.String getHeadImage() {
        java.lang.Object ref = headImage_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          headImage_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHeadImageBytes() {
        java.lang.Object ref = headImage_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          headImage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        headImage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder clearHeadImage() {
        bitField0_ = (bitField0_ & ~0x00000008);
        headImage_ = getDefaultInstance().getHeadImage();
        onChanged();
        return this;
      }
      /**
       * <code>optional string headImage = 4;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        headImage_ = value;
        onChanged();
        return this;
      }

      // optional sint32 allScore = 5;
      private int allScore_ ;
      /**
       * <code>optional sint32 allScore = 5;</code>
       *
       * <pre>
       *玩家总分
       * </pre>
       */
      public boolean hasAllScore() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 allScore = 5;</code>
       *
       * <pre>
       *玩家总分
       * </pre>
       */
      public int getAllScore() {
        return allScore_;
      }
      /**
       * <code>optional sint32 allScore = 5;</code>
       *
       * <pre>
       *玩家总分
       * </pre>
       */
      public Builder setAllScore(int value) {
        bitField0_ |= 0x00000010;
        allScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 allScore = 5;</code>
       *
       * <pre>
       *玩家总分
       * </pre>
       */
      public Builder clearAllScore() {
        bitField0_ = (bitField0_ & ~0x00000010);
        allScore_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 maxScore = 6;
      private int maxScore_ ;
      /**
       * <code>optional sint32 maxScore = 6;</code>
       *
       * <pre>
       *单局最高得分
       * </pre>
       */
      public boolean hasMaxScore() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 maxScore = 6;</code>
       *
       * <pre>
       *单局最高得分
       * </pre>
       */
      public int getMaxScore() {
        return maxScore_;
      }
      /**
       * <code>optional sint32 maxScore = 6;</code>
       *
       * <pre>
       *单局最高得分
       * </pre>
       */
      public Builder setMaxScore(int value) {
        bitField0_ |= 0x00000020;
        maxScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 maxScore = 6;</code>
       *
       * <pre>
       *单局最高得分
       * </pre>
       */
      public Builder clearMaxScore() {
        bitField0_ = (bitField0_ & ~0x00000020);
        maxScore_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 maxCardType = 7;
      private int maxCardType_ ;
      /**
       * <code>optional sint32 maxCardType = 7;</code>
       *
       * <pre>
       *最大牌型
       * </pre>
       */
      public boolean hasMaxCardType() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional sint32 maxCardType = 7;</code>
       *
       * <pre>
       *最大牌型
       * </pre>
       */
      public int getMaxCardType() {
        return maxCardType_;
      }
      /**
       * <code>optional sint32 maxCardType = 7;</code>
       *
       * <pre>
       *最大牌型
       * </pre>
       */
      public Builder setMaxCardType(int value) {
        bitField0_ |= 0x00000040;
        maxCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 maxCardType = 7;</code>
       *
       * <pre>
       *最大牌型
       * </pre>
       */
      public Builder clearMaxCardType() {
        bitField0_ = (bitField0_ & ~0x00000040);
        maxCardType_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 winNum = 8;
      private int winNum_ ;
      /**
       * <code>optional sint32 winNum = 8;</code>
       *
       * <pre>
       *玩家赢的局数
       * </pre>
       */
      public boolean hasWinNum() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional sint32 winNum = 8;</code>
       *
       * <pre>
       *玩家赢的局数
       * </pre>
       */
      public int getWinNum() {
        return winNum_;
      }
      /**
       * <code>optional sint32 winNum = 8;</code>
       *
       * <pre>
       *玩家赢的局数
       * </pre>
       */
      public Builder setWinNum(int value) {
        bitField0_ |= 0x00000080;
        winNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 winNum = 8;</code>
       *
       * <pre>
       *玩家赢的局数
       * </pre>
       */
      public Builder clearWinNum() {
        bitField0_ = (bitField0_ & ~0x00000080);
        winNum_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 loseNum = 9;
      private int loseNum_ ;
      /**
       * <code>optional sint32 loseNum = 9;</code>
       *
       * <pre>
       *玩家输的局数
       * </pre>
       */
      public boolean hasLoseNum() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional sint32 loseNum = 9;</code>
       *
       * <pre>
       *玩家输的局数
       * </pre>
       */
      public int getLoseNum() {
        return loseNum_;
      }
      /**
       * <code>optional sint32 loseNum = 9;</code>
       *
       * <pre>
       *玩家输的局数
       * </pre>
       */
      public Builder setLoseNum(int value) {
        bitField0_ |= 0x00000100;
        loseNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 loseNum = 9;</code>
       *
       * <pre>
       *玩家输的局数
       * </pre>
       */
      public Builder clearLoseNum() {
        bitField0_ = (bitField0_ & ~0x00000100);
        loseNum_ = 0;
        onChanged();
        return this;
      }

      // optional bool roomOwner = 10;
      private boolean roomOwner_ ;
      /**
       * <code>optional bool roomOwner = 10;</code>
       *
       * <pre>
       *是否是否房主
       * </pre>
       */
      public boolean hasRoomOwner() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bool roomOwner = 10;</code>
       *
       * <pre>
       *是否是否房主
       * </pre>
       */
      public boolean getRoomOwner() {
        return roomOwner_;
      }
      /**
       * <code>optional bool roomOwner = 10;</code>
       *
       * <pre>
       *是否是否房主
       * </pre>
       */
      public Builder setRoomOwner(boolean value) {
        bitField0_ |= 0x00000200;
        roomOwner_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool roomOwner = 10;</code>
       *
       * <pre>
       *是否是否房主
       * </pre>
       */
      public Builder clearRoomOwner() {
        bitField0_ = (bitField0_ & ~0x00000200);
        roomOwner_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packet.jack.JACKPlayerFinalResult)
    }

    static {
      defaultInstance = new JACKPlayerFinalResult(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:packet.jack.JACKPlayerFinalResult)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_jack_JACKGameOperStartSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_jack_JACKGameOperStartSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_jack_JACKGameOperHandCardSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_jack_JACKGameOperHandCardSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_jack_JACKGameOperPublicInfoSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_jack_JACKGameOperPublicInfoSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_jack_JACKGameOperActorSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_jack_JACKGameOperActorSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_jack_JACKGameDeskData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_jack_JACKGameDeskData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_jack_JACKGameOperPlayerActionSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_jack_JACKGameOperPlayerActionSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_jack_JACKGameOperPlayerData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_jack_JACKGameOperPlayerData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_jack_JACKGameOperPlayerActionNotify_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_jack_JACKGameOperPlayerActionNotify_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_jack_JACKGameOperPlayerHuSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_jack_JACKGameOperPlayerHuSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_jack_JACKGameOperPlayerSettle_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_jack_JACKGameOperPlayerSettle_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_jack_JACKGameOperFinalSettleSyn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_jack_JACKGameOperFinalSettleSyn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_packet_jack_JACKPlayerFinalResult_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_packet_jack_JACKPlayerFinalResult_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\nJACK.proto\022\013packet.jack\"\227\001\n\024JACKGameOp" +
      "erStartSyn\022\021\n\tbankerPos\030\001 \001(\021\022=\n\017playerH" +
      "andCards\030\002 \003(\0132$.packet.jack.JACKGameOpe" +
      "rHandCardSyn\022\021\n\treconnect\030\003 \001(\010\022\r\n\005juNum" +
      "\030\004 \001(\021\022\013\n\003seq\030d \001(\021\"\241\001\n\027JACKGameOperHand" +
      "CardSyn\022\020\n\010position\030\001 \002(\021\022\021\n\thandCards\030\002" +
      " \003(\021\022\r\n\005socre\030\003 \001(\021\022\016\n\006xiaZhu\030\004 \001(\021\022\017\n\007i" +
      "sZanLi\030\005 \001(\010\022\016\n\006isWait\030\006 \001(\010\022\017\n\007cardNum\030" +
      "\007 \001(\021\022\020\n\010cardType\030\010 \001(\021\"[\n\031JACKGameOperP" +
      "ublicInfoSyn\022\021\n\tdeskState\030\001 \001(\021\022+\n\004data\030",
      "\002 \003(\0132\035.packet.jack.JACKGameDeskData\":\n\024" +
      "JACKGameOperActorSyn\022\020\n\010position\030\001 \002(\021\022\020" +
      "\n\010timeLeft\030\002 \002(\021\"6\n\020JACKGameDeskData\022\020\n\010" +
      "position\030\001 \002(\021\022\020\n\010isXiaZhu\030\002 \002(\010\"\214\002\n\033JAC" +
      "KGameOperPlayerActionSyn\022\020\n\010position\030\001 \002" +
      "(\021\022\016\n\006action\030\002 \002(\021\022\021\n\tcardValue\030\003 \001(\021\022\016\n" +
      "\006chouMa\030\004 \001(\021\022\021\n\tyanPaiPos\030\005 \001(\021\022\021\n\twinn" +
      "erPos\030\006 \001(\021\022\017\n\007cardNum\030\007 \001(\021\022\020\n\010cardType" +
      "\030\010 \001(\021\022\023\n\013cardsInHand\030\t \003(\021\022=\n\017playerHan" +
      "dCards\030\n \003(\0132$.packet.jack.JACKGameOperH",
      "andCardSyn\022\013\n\003seq\030d \001(\021\"b\n\026JACKGameOperP" +
      "layerData\022\020\n\010position\030\001 \002(\021\022\023\n\013cardsInHa" +
      "nd\030\002 \003(\021\022\017\n\007cardNum\030\003 \001(\021\022\020\n\010cardType\030\004 " +
      "\001(\021\"s\n\036JACKGameOperPlayerActionNotify\022\020\n" +
      "\010position\030\001 \002(\021\022\017\n\007actions\030\002 \002(\021\022\016\n\006xiaZ" +
      "hu\030\003 \003(\021\022\021\n\tyanPaiPos\030\004 \003(\021\022\013\n\003seq\030d \001(\021" +
      "\"q\n\027JACKGameOperPlayerHuSyn\022\020\n\010position\030" +
      "\001 \002(\021\0225\n\006detail\030\002 \003(\0132%.packet.jack.JACK" +
      "GameOperPlayerSettle\022\r\n\005juNum\030\003 \001(\021\"\356\001\n\030" +
      "JACKGameOperPlayerSettle\022\020\n\010position\030\001 \002",
      "(\021\022\020\n\010playerId\030\002 \001(\021\022\022\n\nplayerName\030\003 \001(\t" +
      "\022\020\n\010handcard\030\004 \003(\021\022\021\n\tlastScore\030\005 \001(\021\022\r\n" +
      "\005score\030\006 \001(\021\022\020\n\010allSocre\030\007 \001(\021\022\017\n\007isZanL" +
      "i\030\010 \001(\010\022\017\n\007cardNum\030\t \001(\021\022\020\n\010cardType\030\n \001" +
      "(\021\022\020\n\010isBanker\030\013 \001(\021\022\016\n\006result\030\014 \001(\021\"q\n\032" +
      "JACKGameOperFinalSettleSyn\022\016\n\006roomId\030\001 \001" +
      "(\021\022\017\n\007innings\030\002 \001(\021\0222\n\006detail\030\003 \003(\0132\".pa" +
      "cket.jack.JACKPlayerFinalResult\"\317\001\n\025JACK" +
      "PlayerFinalResult\022\020\n\010playerId\030\001 \001(\022\022\022\n\np" +
      "layerName\030\002 \001(\t\022\020\n\010position\030\003 \001(\021\022\021\n\thea",
      "dImage\030\004 \001(\t\022\020\n\010allScore\030\005 \001(\021\022\020\n\010maxSco" +
      "re\030\006 \001(\021\022\023\n\013maxCardType\030\007 \001(\021\022\016\n\006winNum\030" +
      "\010 \001(\021\022\017\n\007loseNum\030\t \001(\021\022\021\n\troomOwner\030\n \001(" +
      "\010"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_packet_jack_JACKGameOperStartSyn_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_packet_jack_JACKGameOperStartSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_jack_JACKGameOperStartSyn_descriptor,
              new java.lang.String[] { "BankerPos", "PlayerHandCards", "Reconnect", "JuNum", "Seq", });
          internal_static_packet_jack_JACKGameOperHandCardSyn_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_packet_jack_JACKGameOperHandCardSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_jack_JACKGameOperHandCardSyn_descriptor,
              new java.lang.String[] { "Position", "HandCards", "Socre", "XiaZhu", "IsZanLi", "IsWait", "CardNum", "CardType", });
          internal_static_packet_jack_JACKGameOperPublicInfoSyn_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_packet_jack_JACKGameOperPublicInfoSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_jack_JACKGameOperPublicInfoSyn_descriptor,
              new java.lang.String[] { "DeskState", "Data", });
          internal_static_packet_jack_JACKGameOperActorSyn_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_packet_jack_JACKGameOperActorSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_jack_JACKGameOperActorSyn_descriptor,
              new java.lang.String[] { "Position", "TimeLeft", });
          internal_static_packet_jack_JACKGameDeskData_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_packet_jack_JACKGameDeskData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_jack_JACKGameDeskData_descriptor,
              new java.lang.String[] { "Position", "IsXiaZhu", });
          internal_static_packet_jack_JACKGameOperPlayerActionSyn_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_packet_jack_JACKGameOperPlayerActionSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_jack_JACKGameOperPlayerActionSyn_descriptor,
              new java.lang.String[] { "Position", "Action", "CardValue", "ChouMa", "YanPaiPos", "WinnerPos", "CardNum", "CardType", "CardsInHand", "PlayerHandCards", "Seq", });
          internal_static_packet_jack_JACKGameOperPlayerData_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_packet_jack_JACKGameOperPlayerData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_jack_JACKGameOperPlayerData_descriptor,
              new java.lang.String[] { "Position", "CardsInHand", "CardNum", "CardType", });
          internal_static_packet_jack_JACKGameOperPlayerActionNotify_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_packet_jack_JACKGameOperPlayerActionNotify_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_jack_JACKGameOperPlayerActionNotify_descriptor,
              new java.lang.String[] { "Position", "Actions", "XiaZhu", "YanPaiPos", "Seq", });
          internal_static_packet_jack_JACKGameOperPlayerHuSyn_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_packet_jack_JACKGameOperPlayerHuSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_jack_JACKGameOperPlayerHuSyn_descriptor,
              new java.lang.String[] { "Position", "Detail", "JuNum", });
          internal_static_packet_jack_JACKGameOperPlayerSettle_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_packet_jack_JACKGameOperPlayerSettle_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_jack_JACKGameOperPlayerSettle_descriptor,
              new java.lang.String[] { "Position", "PlayerId", "PlayerName", "Handcard", "LastScore", "Score", "AllSocre", "IsZanLi", "CardNum", "CardType", "IsBanker", "Result", });
          internal_static_packet_jack_JACKGameOperFinalSettleSyn_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_packet_jack_JACKGameOperFinalSettleSyn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_jack_JACKGameOperFinalSettleSyn_descriptor,
              new java.lang.String[] { "RoomId", "Innings", "Detail", });
          internal_static_packet_jack_JACKPlayerFinalResult_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_packet_jack_JACKPlayerFinalResult_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_packet_jack_JACKPlayerFinalResult_descriptor,
              new java.lang.String[] { "PlayerId", "PlayerName", "Position", "HeadImage", "AllScore", "MaxScore", "MaxCardType", "WinNum", "LoseNum", "RoomOwner", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
